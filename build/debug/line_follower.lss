
build/debug/line_follower.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004314  080001d0  080001d0  000011d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  080044e8  080044e8  000054e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004548  08004548  0000606c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08004548  08004548  0000606c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08004548  08004548  0000606c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004548  08004548  00005548  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800454c  0800454c  0000554c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08004550  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002b8  2000006c  080045bc  0000606c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000324  080045bc  00006324  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000606c  2**0
                  CONTENTS, READONLY
 12 .comment      00000039  00000000  00000000  00006095  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e0c7  00000000  00000000  000060ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002310  00000000  00000000  00014195  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loclists 00007038  00000000  00000000  000164a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000b90  00000000  00000000  0001d4e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000008f4  00000000  00000000  0001e070  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000c88c  00000000  00000000  0001e964  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000036eb  00000000  00000000  0002b1f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001e60  00000000  00000000  0002e8dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000049  00000000  00000000  0003073c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__aeabi_drsub>:
 80001d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001d4:	e002      	b.n	80001dc <__adddf3>
 80001d6:	bf00      	nop

080001d8 <__aeabi_dsub>:
 80001d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001dc <__adddf3>:
 80001dc:	b530      	push	{r4, r5, lr}
 80001de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001e6:	ea94 0f05 	teq	r4, r5
 80001ea:	bf08      	it	eq
 80001ec:	ea90 0f02 	teqeq	r0, r2
 80001f0:	bf1f      	itttt	ne
 80001f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000202:	f000 80e2 	beq.w	80003ca <__adddf3+0x1ee>
 8000206:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800020a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800020e:	bfb8      	it	lt
 8000210:	426d      	neglt	r5, r5
 8000212:	dd0c      	ble.n	800022e <__adddf3+0x52>
 8000214:	442c      	add	r4, r5
 8000216:	ea80 0202 	eor.w	r2, r0, r2
 800021a:	ea81 0303 	eor.w	r3, r1, r3
 800021e:	ea82 0000 	eor.w	r0, r2, r0
 8000222:	ea83 0101 	eor.w	r1, r3, r1
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	2d36      	cmp	r5, #54	@ 0x36
 8000230:	bf88      	it	hi
 8000232:	bd30      	pophi	{r4, r5, pc}
 8000234:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000238:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800023c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000240:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000244:	d002      	beq.n	800024c <__adddf3+0x70>
 8000246:	4240      	negs	r0, r0
 8000248:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800024c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000250:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000254:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000258:	d002      	beq.n	8000260 <__adddf3+0x84>
 800025a:	4252      	negs	r2, r2
 800025c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000260:	ea94 0f05 	teq	r4, r5
 8000264:	f000 80a7 	beq.w	80003b6 <__adddf3+0x1da>
 8000268:	f1a4 0401 	sub.w	r4, r4, #1
 800026c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000270:	db0d      	blt.n	800028e <__adddf3+0xb2>
 8000272:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000276:	fa22 f205 	lsr.w	r2, r2, r5
 800027a:	1880      	adds	r0, r0, r2
 800027c:	f141 0100 	adc.w	r1, r1, #0
 8000280:	fa03 f20e 	lsl.w	r2, r3, lr
 8000284:	1880      	adds	r0, r0, r2
 8000286:	fa43 f305 	asr.w	r3, r3, r5
 800028a:	4159      	adcs	r1, r3
 800028c:	e00e      	b.n	80002ac <__adddf3+0xd0>
 800028e:	f1a5 0520 	sub.w	r5, r5, #32
 8000292:	f10e 0e20 	add.w	lr, lr, #32
 8000296:	2a01      	cmp	r2, #1
 8000298:	fa03 fc0e 	lsl.w	ip, r3, lr
 800029c:	bf28      	it	cs
 800029e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002a2:	fa43 f305 	asr.w	r3, r3, r5
 80002a6:	18c0      	adds	r0, r0, r3
 80002a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002b0:	d507      	bpl.n	80002c2 <__adddf3+0xe6>
 80002b2:	f04f 0e00 	mov.w	lr, #0
 80002b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002be:	eb6e 0101 	sbc.w	r1, lr, r1
 80002c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002c6:	d31b      	bcc.n	8000300 <__adddf3+0x124>
 80002c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002cc:	d30c      	bcc.n	80002e8 <__adddf3+0x10c>
 80002ce:	0849      	lsrs	r1, r1, #1
 80002d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d8:	f104 0401 	add.w	r4, r4, #1
 80002dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002e4:	f080 809a 	bcs.w	800041c <__adddf3+0x240>
 80002e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002ec:	bf08      	it	eq
 80002ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002f2:	f150 0000 	adcs.w	r0, r0, #0
 80002f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002fa:	ea41 0105 	orr.w	r1, r1, r5
 80002fe:	bd30      	pop	{r4, r5, pc}
 8000300:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000304:	4140      	adcs	r0, r0
 8000306:	eb41 0101 	adc.w	r1, r1, r1
 800030a:	3c01      	subs	r4, #1
 800030c:	bf28      	it	cs
 800030e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000312:	d2e9      	bcs.n	80002e8 <__adddf3+0x10c>
 8000314:	f091 0f00 	teq	r1, #0
 8000318:	bf04      	itt	eq
 800031a:	4601      	moveq	r1, r0
 800031c:	2000      	moveq	r0, #0
 800031e:	fab1 f381 	clz	r3, r1
 8000322:	bf08      	it	eq
 8000324:	3320      	addeq	r3, #32
 8000326:	f1a3 030b 	sub.w	r3, r3, #11
 800032a:	f1b3 0220 	subs.w	r2, r3, #32
 800032e:	da0c      	bge.n	800034a <__adddf3+0x16e>
 8000330:	320c      	adds	r2, #12
 8000332:	dd08      	ble.n	8000346 <__adddf3+0x16a>
 8000334:	f102 0c14 	add.w	ip, r2, #20
 8000338:	f1c2 020c 	rsb	r2, r2, #12
 800033c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000340:	fa21 f102 	lsr.w	r1, r1, r2
 8000344:	e00c      	b.n	8000360 <__adddf3+0x184>
 8000346:	f102 0214 	add.w	r2, r2, #20
 800034a:	bfd8      	it	le
 800034c:	f1c2 0c20 	rsble	ip, r2, #32
 8000350:	fa01 f102 	lsl.w	r1, r1, r2
 8000354:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000358:	bfdc      	itt	le
 800035a:	ea41 010c 	orrle.w	r1, r1, ip
 800035e:	4090      	lslle	r0, r2
 8000360:	1ae4      	subs	r4, r4, r3
 8000362:	bfa2      	ittt	ge
 8000364:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000368:	4329      	orrge	r1, r5
 800036a:	bd30      	popge	{r4, r5, pc}
 800036c:	ea6f 0404 	mvn.w	r4, r4
 8000370:	3c1f      	subs	r4, #31
 8000372:	da1c      	bge.n	80003ae <__adddf3+0x1d2>
 8000374:	340c      	adds	r4, #12
 8000376:	dc0e      	bgt.n	8000396 <__adddf3+0x1ba>
 8000378:	f104 0414 	add.w	r4, r4, #20
 800037c:	f1c4 0220 	rsb	r2, r4, #32
 8000380:	fa20 f004 	lsr.w	r0, r0, r4
 8000384:	fa01 f302 	lsl.w	r3, r1, r2
 8000388:	ea40 0003 	orr.w	r0, r0, r3
 800038c:	fa21 f304 	lsr.w	r3, r1, r4
 8000390:	ea45 0103 	orr.w	r1, r5, r3
 8000394:	bd30      	pop	{r4, r5, pc}
 8000396:	f1c4 040c 	rsb	r4, r4, #12
 800039a:	f1c4 0220 	rsb	r2, r4, #32
 800039e:	fa20 f002 	lsr.w	r0, r0, r2
 80003a2:	fa01 f304 	lsl.w	r3, r1, r4
 80003a6:	ea40 0003 	orr.w	r0, r0, r3
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	fa21 f004 	lsr.w	r0, r1, r4
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f094 0f00 	teq	r4, #0
 80003ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003be:	bf06      	itte	eq
 80003c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003c4:	3401      	addeq	r4, #1
 80003c6:	3d01      	subne	r5, #1
 80003c8:	e74e      	b.n	8000268 <__adddf3+0x8c>
 80003ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ce:	bf18      	it	ne
 80003d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d4:	d029      	beq.n	800042a <__adddf3+0x24e>
 80003d6:	ea94 0f05 	teq	r4, r5
 80003da:	bf08      	it	eq
 80003dc:	ea90 0f02 	teqeq	r0, r2
 80003e0:	d005      	beq.n	80003ee <__adddf3+0x212>
 80003e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003e6:	bf04      	itt	eq
 80003e8:	4619      	moveq	r1, r3
 80003ea:	4610      	moveq	r0, r2
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	ea91 0f03 	teq	r1, r3
 80003f2:	bf1e      	ittt	ne
 80003f4:	2100      	movne	r1, #0
 80003f6:	2000      	movne	r0, #0
 80003f8:	bd30      	popne	{r4, r5, pc}
 80003fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003fe:	d105      	bne.n	800040c <__adddf3+0x230>
 8000400:	0040      	lsls	r0, r0, #1
 8000402:	4149      	adcs	r1, r1
 8000404:	bf28      	it	cs
 8000406:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800040a:	bd30      	pop	{r4, r5, pc}
 800040c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000410:	bf3c      	itt	cc
 8000412:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000416:	bd30      	popcc	{r4, r5, pc}
 8000418:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800041c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000420:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000424:	f04f 0000 	mov.w	r0, #0
 8000428:	bd30      	pop	{r4, r5, pc}
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf1a      	itte	ne
 8000430:	4619      	movne	r1, r3
 8000432:	4610      	movne	r0, r2
 8000434:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000438:	bf1c      	itt	ne
 800043a:	460b      	movne	r3, r1
 800043c:	4602      	movne	r2, r0
 800043e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000442:	bf06      	itte	eq
 8000444:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000448:	ea91 0f03 	teqeq	r1, r3
 800044c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000450:	bd30      	pop	{r4, r5, pc}
 8000452:	bf00      	nop

08000454 <__aeabi_ui2d>:
 8000454:	f090 0f00 	teq	r0, #0
 8000458:	bf04      	itt	eq
 800045a:	2100      	moveq	r1, #0
 800045c:	4770      	bxeq	lr
 800045e:	b530      	push	{r4, r5, lr}
 8000460:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000464:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000468:	f04f 0500 	mov.w	r5, #0
 800046c:	f04f 0100 	mov.w	r1, #0
 8000470:	e750      	b.n	8000314 <__adddf3+0x138>
 8000472:	bf00      	nop

08000474 <__aeabi_i2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000488:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800048c:	bf48      	it	mi
 800048e:	4240      	negmi	r0, r0
 8000490:	f04f 0100 	mov.w	r1, #0
 8000494:	e73e      	b.n	8000314 <__adddf3+0x138>
 8000496:	bf00      	nop

08000498 <__aeabi_f2d>:
 8000498:	0042      	lsls	r2, r0, #1
 800049a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800049e:	ea4f 0131 	mov.w	r1, r1, rrx
 80004a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004a6:	bf1f      	itttt	ne
 80004a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004b4:	4770      	bxne	lr
 80004b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004ba:	bf08      	it	eq
 80004bc:	4770      	bxeq	lr
 80004be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004c2:	bf04      	itt	eq
 80004c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004c8:	4770      	bxeq	lr
 80004ca:	b530      	push	{r4, r5, lr}
 80004cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004d8:	e71c      	b.n	8000314 <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_ul2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f04f 0500 	mov.w	r5, #0
 80004ea:	e00a      	b.n	8000502 <__aeabi_l2d+0x16>

080004ec <__aeabi_l2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004fa:	d502      	bpl.n	8000502 <__aeabi_l2d+0x16>
 80004fc:	4240      	negs	r0, r0
 80004fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000502:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000506:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800050a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800050e:	f43f aed8 	beq.w	80002c2 <__adddf3+0xe6>
 8000512:	f04f 0203 	mov.w	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000532:	fa20 f002 	lsr.w	r0, r0, r2
 8000536:	fa01 fe03 	lsl.w	lr, r1, r3
 800053a:	ea40 000e 	orr.w	r0, r0, lr
 800053e:	fa21 f102 	lsr.w	r1, r1, r2
 8000542:	4414      	add	r4, r2
 8000544:	e6bd      	b.n	80002c2 <__adddf3+0xe6>
 8000546:	bf00      	nop

08000548 <__aeabi_dmul>:
 8000548:	b570      	push	{r4, r5, r6, lr}
 800054a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800054e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000552:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000556:	bf1d      	ittte	ne
 8000558:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800055c:	ea94 0f0c 	teqne	r4, ip
 8000560:	ea95 0f0c 	teqne	r5, ip
 8000564:	f000 f8de 	bleq	8000724 <__aeabi_dmul+0x1dc>
 8000568:	442c      	add	r4, r5
 800056a:	ea81 0603 	eor.w	r6, r1, r3
 800056e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000572:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000576:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800057a:	bf18      	it	ne
 800057c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000580:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000584:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000588:	d038      	beq.n	80005fc <__aeabi_dmul+0xb4>
 800058a:	fba0 ce02 	umull	ip, lr, r0, r2
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000596:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800059a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800059e:	f04f 0600 	mov.w	r6, #0
 80005a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005a6:	f09c 0f00 	teq	ip, #0
 80005aa:	bf18      	it	ne
 80005ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005bc:	d204      	bcs.n	80005c8 <__aeabi_dmul+0x80>
 80005be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005c2:	416d      	adcs	r5, r5
 80005c4:	eb46 0606 	adc.w	r6, r6, r6
 80005c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005e0:	bf88      	it	hi
 80005e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005e6:	d81e      	bhi.n	8000626 <__aeabi_dmul+0xde>
 80005e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005ec:	bf08      	it	eq
 80005ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005f2:	f150 0000 	adcs.w	r0, r0, #0
 80005f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000600:	ea46 0101 	orr.w	r1, r6, r1
 8000604:	ea40 0002 	orr.w	r0, r0, r2
 8000608:	ea81 0103 	eor.w	r1, r1, r3
 800060c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000610:	bfc2      	ittt	gt
 8000612:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000616:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800061a:	bd70      	popgt	{r4, r5, r6, pc}
 800061c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000620:	f04f 0e00 	mov.w	lr, #0
 8000624:	3c01      	subs	r4, #1
 8000626:	f300 80ab 	bgt.w	8000780 <__aeabi_dmul+0x238>
 800062a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800062e:	bfde      	ittt	le
 8000630:	2000      	movle	r0, #0
 8000632:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000636:	bd70      	pople	{r4, r5, r6, pc}
 8000638:	f1c4 0400 	rsb	r4, r4, #0
 800063c:	3c20      	subs	r4, #32
 800063e:	da35      	bge.n	80006ac <__aeabi_dmul+0x164>
 8000640:	340c      	adds	r4, #12
 8000642:	dc1b      	bgt.n	800067c <__aeabi_dmul+0x134>
 8000644:	f104 0414 	add.w	r4, r4, #20
 8000648:	f1c4 0520 	rsb	r5, r4, #32
 800064c:	fa00 f305 	lsl.w	r3, r0, r5
 8000650:	fa20 f004 	lsr.w	r0, r0, r4
 8000654:	fa01 f205 	lsl.w	r2, r1, r5
 8000658:	ea40 0002 	orr.w	r0, r0, r2
 800065c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000660:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000664:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000668:	fa21 f604 	lsr.w	r6, r1, r4
 800066c:	eb42 0106 	adc.w	r1, r2, r6
 8000670:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000674:	bf08      	it	eq
 8000676:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800067a:	bd70      	pop	{r4, r5, r6, pc}
 800067c:	f1c4 040c 	rsb	r4, r4, #12
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f304 	lsl.w	r3, r0, r4
 8000688:	fa20 f005 	lsr.w	r0, r0, r5
 800068c:	fa01 f204 	lsl.w	r2, r1, r4
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000698:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800069c:	f141 0100 	adc.w	r1, r1, #0
 80006a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a4:	bf08      	it	eq
 80006a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f1c4 0520 	rsb	r5, r4, #32
 80006b0:	fa00 f205 	lsl.w	r2, r0, r5
 80006b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b8:	fa20 f304 	lsr.w	r3, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea43 0302 	orr.w	r3, r3, r2
 80006c4:	fa21 f004 	lsr.w	r0, r1, r4
 80006c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006cc:	fa21 f204 	lsr.w	r2, r1, r4
 80006d0:	ea20 0002 	bic.w	r0, r0, r2
 80006d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f094 0f00 	teq	r4, #0
 80006e8:	d10f      	bne.n	800070a <__aeabi_dmul+0x1c2>
 80006ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006ee:	0040      	lsls	r0, r0, #1
 80006f0:	eb41 0101 	adc.w	r1, r1, r1
 80006f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80006f8:	bf08      	it	eq
 80006fa:	3c01      	subeq	r4, #1
 80006fc:	d0f7      	beq.n	80006ee <__aeabi_dmul+0x1a6>
 80006fe:	ea41 0106 	orr.w	r1, r1, r6
 8000702:	f095 0f00 	teq	r5, #0
 8000706:	bf18      	it	ne
 8000708:	4770      	bxne	lr
 800070a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800070e:	0052      	lsls	r2, r2, #1
 8000710:	eb43 0303 	adc.w	r3, r3, r3
 8000714:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000718:	bf08      	it	eq
 800071a:	3d01      	subeq	r5, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1c6>
 800071e:	ea43 0306 	orr.w	r3, r3, r6
 8000722:	4770      	bx	lr
 8000724:	ea94 0f0c 	teq	r4, ip
 8000728:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800072c:	bf18      	it	ne
 800072e:	ea95 0f0c 	teqne	r5, ip
 8000732:	d00c      	beq.n	800074e <__aeabi_dmul+0x206>
 8000734:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000738:	bf18      	it	ne
 800073a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800073e:	d1d1      	bne.n	80006e4 <__aeabi_dmul+0x19c>
 8000740:	ea81 0103 	eor.w	r1, r1, r3
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	f04f 0000 	mov.w	r0, #0
 800074c:	bd70      	pop	{r4, r5, r6, pc}
 800074e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000752:	bf06      	itte	eq
 8000754:	4610      	moveq	r0, r2
 8000756:	4619      	moveq	r1, r3
 8000758:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075c:	d019      	beq.n	8000792 <__aeabi_dmul+0x24a>
 800075e:	ea94 0f0c 	teq	r4, ip
 8000762:	d102      	bne.n	800076a <__aeabi_dmul+0x222>
 8000764:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000768:	d113      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800076a:	ea95 0f0c 	teq	r5, ip
 800076e:	d105      	bne.n	800077c <__aeabi_dmul+0x234>
 8000770:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000774:	bf1c      	itt	ne
 8000776:	4610      	movne	r0, r2
 8000778:	4619      	movne	r1, r3
 800077a:	d10a      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800077c:	ea81 0103 	eor.w	r1, r1, r3
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000784:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000788:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800078c:	f04f 0000 	mov.w	r0, #0
 8000790:	bd70      	pop	{r4, r5, r6, pc}
 8000792:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000796:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800079a:	bd70      	pop	{r4, r5, r6, pc}

0800079c <__aeabi_ddiv>:
 800079c:	b570      	push	{r4, r5, r6, lr}
 800079e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007aa:	bf1d      	ittte	ne
 80007ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b0:	ea94 0f0c 	teqne	r4, ip
 80007b4:	ea95 0f0c 	teqne	r5, ip
 80007b8:	f000 f8a7 	bleq	800090a <__aeabi_ddiv+0x16e>
 80007bc:	eba4 0405 	sub.w	r4, r4, r5
 80007c0:	ea81 0e03 	eor.w	lr, r1, r3
 80007c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007cc:	f000 8088 	beq.w	80008e0 <__aeabi_ddiv+0x144>
 80007d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007f4:	429d      	cmp	r5, r3
 80007f6:	bf08      	it	eq
 80007f8:	4296      	cmpeq	r6, r2
 80007fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000802:	d202      	bcs.n	800080a <__aeabi_ddiv+0x6e>
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	1ab6      	subs	r6, r6, r2
 800080c:	eb65 0503 	sbc.w	r5, r5, r3
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800081a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800081e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000822:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000826:	bf22      	ittt	cs
 8000828:	1ab6      	subcs	r6, r6, r2
 800082a:	4675      	movcs	r5, lr
 800082c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	ebb6 0e02 	subs.w	lr, r6, r2
 800083a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083e:	bf22      	ittt	cs
 8000840:	1ab6      	subcs	r6, r6, r2
 8000842:	4675      	movcs	r5, lr
 8000844:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000878:	ea55 0e06 	orrs.w	lr, r5, r6
 800087c:	d018      	beq.n	80008b0 <__aeabi_ddiv+0x114>
 800087e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000882:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000886:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800088a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800088e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000892:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000896:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800089a:	d1c0      	bne.n	800081e <__aeabi_ddiv+0x82>
 800089c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008a0:	d10b      	bne.n	80008ba <__aeabi_ddiv+0x11e>
 80008a2:	ea41 0100 	orr.w	r1, r1, r0
 80008a6:	f04f 0000 	mov.w	r0, #0
 80008aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008ae:	e7b6      	b.n	800081e <__aeabi_ddiv+0x82>
 80008b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008b4:	bf04      	itt	eq
 80008b6:	4301      	orreq	r1, r0
 80008b8:	2000      	moveq	r0, #0
 80008ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008be:	bf88      	it	hi
 80008c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008c4:	f63f aeaf 	bhi.w	8000626 <__aeabi_dmul+0xde>
 80008c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008cc:	bf04      	itt	eq
 80008ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008d6:	f150 0000 	adcs.w	r0, r0, #0
 80008da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008de:	bd70      	pop	{r4, r5, r6, pc}
 80008e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ec:	bfc2      	ittt	gt
 80008ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008f6:	bd70      	popgt	{r4, r5, r6, pc}
 80008f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008fc:	f04f 0e00 	mov.w	lr, #0
 8000900:	3c01      	subs	r4, #1
 8000902:	e690      	b.n	8000626 <__aeabi_dmul+0xde>
 8000904:	ea45 0e06 	orr.w	lr, r5, r6
 8000908:	e68d      	b.n	8000626 <__aeabi_dmul+0xde>
 800090a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800090e:	ea94 0f0c 	teq	r4, ip
 8000912:	bf08      	it	eq
 8000914:	ea95 0f0c 	teqeq	r5, ip
 8000918:	f43f af3b 	beq.w	8000792 <__aeabi_dmul+0x24a>
 800091c:	ea94 0f0c 	teq	r4, ip
 8000920:	d10a      	bne.n	8000938 <__aeabi_ddiv+0x19c>
 8000922:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000926:	f47f af34 	bne.w	8000792 <__aeabi_dmul+0x24a>
 800092a:	ea95 0f0c 	teq	r5, ip
 800092e:	f47f af25 	bne.w	800077c <__aeabi_dmul+0x234>
 8000932:	4610      	mov	r0, r2
 8000934:	4619      	mov	r1, r3
 8000936:	e72c      	b.n	8000792 <__aeabi_dmul+0x24a>
 8000938:	ea95 0f0c 	teq	r5, ip
 800093c:	d106      	bne.n	800094c <__aeabi_ddiv+0x1b0>
 800093e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000942:	f43f aefd 	beq.w	8000740 <__aeabi_dmul+0x1f8>
 8000946:	4610      	mov	r0, r2
 8000948:	4619      	mov	r1, r3
 800094a:	e722      	b.n	8000792 <__aeabi_dmul+0x24a>
 800094c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000956:	f47f aec5 	bne.w	80006e4 <__aeabi_dmul+0x19c>
 800095a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800095e:	f47f af0d 	bne.w	800077c <__aeabi_dmul+0x234>
 8000962:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000966:	f47f aeeb 	bne.w	8000740 <__aeabi_dmul+0x1f8>
 800096a:	e712      	b.n	8000792 <__aeabi_dmul+0x24a>

0800096c <__gedf2>:
 800096c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000970:	e006      	b.n	8000980 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__ledf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	e002      	b.n	8000980 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__cmpdf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000984:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800098c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000990:	bf18      	it	ne
 8000992:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000996:	d01b      	beq.n	80009d0 <__cmpdf2+0x54>
 8000998:	b001      	add	sp, #4
 800099a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800099e:	bf0c      	ite	eq
 80009a0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009a4:	ea91 0f03 	teqne	r1, r3
 80009a8:	bf02      	ittt	eq
 80009aa:	ea90 0f02 	teqeq	r0, r2
 80009ae:	2000      	moveq	r0, #0
 80009b0:	4770      	bxeq	lr
 80009b2:	f110 0f00 	cmn.w	r0, #0
 80009b6:	ea91 0f03 	teq	r1, r3
 80009ba:	bf58      	it	pl
 80009bc:	4299      	cmppl	r1, r3
 80009be:	bf08      	it	eq
 80009c0:	4290      	cmpeq	r0, r2
 80009c2:	bf2c      	ite	cs
 80009c4:	17d8      	asrcs	r0, r3, #31
 80009c6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009ca:	f040 0001 	orr.w	r0, r0, #1
 80009ce:	4770      	bx	lr
 80009d0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d8:	d102      	bne.n	80009e0 <__cmpdf2+0x64>
 80009da:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009de:	d107      	bne.n	80009f0 <__cmpdf2+0x74>
 80009e0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e8:	d1d6      	bne.n	8000998 <__cmpdf2+0x1c>
 80009ea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009ee:	d0d3      	beq.n	8000998 <__cmpdf2+0x1c>
 80009f0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009f4:	4770      	bx	lr
 80009f6:	bf00      	nop

080009f8 <__aeabi_cdrcmple>:
 80009f8:	4684      	mov	ip, r0
 80009fa:	4610      	mov	r0, r2
 80009fc:	4662      	mov	r2, ip
 80009fe:	468c      	mov	ip, r1
 8000a00:	4619      	mov	r1, r3
 8000a02:	4663      	mov	r3, ip
 8000a04:	e000      	b.n	8000a08 <__aeabi_cdcmpeq>
 8000a06:	bf00      	nop

08000a08 <__aeabi_cdcmpeq>:
 8000a08:	b501      	push	{r0, lr}
 8000a0a:	f7ff ffb7 	bl	800097c <__cmpdf2>
 8000a0e:	2800      	cmp	r0, #0
 8000a10:	bf48      	it	mi
 8000a12:	f110 0f00 	cmnmi.w	r0, #0
 8000a16:	bd01      	pop	{r0, pc}

08000a18 <__aeabi_dcmpeq>:
 8000a18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a1c:	f7ff fff4 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a20:	bf0c      	ite	eq
 8000a22:	2001      	moveq	r0, #1
 8000a24:	2000      	movne	r0, #0
 8000a26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a2a:	bf00      	nop

08000a2c <__aeabi_dcmplt>:
 8000a2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a30:	f7ff ffea 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a34:	bf34      	ite	cc
 8000a36:	2001      	movcc	r0, #1
 8000a38:	2000      	movcs	r0, #0
 8000a3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3e:	bf00      	nop

08000a40 <__aeabi_dcmple>:
 8000a40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a44:	f7ff ffe0 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a48:	bf94      	ite	ls
 8000a4a:	2001      	movls	r0, #1
 8000a4c:	2000      	movhi	r0, #0
 8000a4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a52:	bf00      	nop

08000a54 <__aeabi_dcmpge>:
 8000a54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a58:	f7ff ffce 	bl	80009f8 <__aeabi_cdrcmple>
 8000a5c:	bf94      	ite	ls
 8000a5e:	2001      	movls	r0, #1
 8000a60:	2000      	movhi	r0, #0
 8000a62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a66:	bf00      	nop

08000a68 <__aeabi_dcmpgt>:
 8000a68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a6c:	f7ff ffc4 	bl	80009f8 <__aeabi_cdrcmple>
 8000a70:	bf34      	ite	cc
 8000a72:	2001      	movcc	r0, #1
 8000a74:	2000      	movcs	r0, #0
 8000a76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7a:	bf00      	nop

08000a7c <__aeabi_dcmpun>:
 8000a7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a84:	d102      	bne.n	8000a8c <__aeabi_dcmpun+0x10>
 8000a86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8a:	d10a      	bne.n	8000aa2 <__aeabi_dcmpun+0x26>
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a94:	d102      	bne.n	8000a9c <__aeabi_dcmpun+0x20>
 8000a96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9a:	d102      	bne.n	8000aa2 <__aeabi_dcmpun+0x26>
 8000a9c:	f04f 0000 	mov.w	r0, #0
 8000aa0:	4770      	bx	lr
 8000aa2:	f04f 0001 	mov.w	r0, #1
 8000aa6:	4770      	bx	lr

08000aa8 <__aeabi_d2f>:
 8000aa8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ab0:	bf24      	itt	cs
 8000ab2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ab6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000aba:	d90d      	bls.n	8000ad8 <__aeabi_d2f+0x30>
 8000abc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ac0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ac4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ac8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000acc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ad0:	bf08      	it	eq
 8000ad2:	f020 0001 	biceq.w	r0, r0, #1
 8000ad6:	4770      	bx	lr
 8000ad8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000adc:	d121      	bne.n	8000b22 <__aeabi_d2f+0x7a>
 8000ade:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000ae2:	bfbc      	itt	lt
 8000ae4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000ae8:	4770      	bxlt	lr
 8000aea:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000aee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000af2:	f1c2 0218 	rsb	r2, r2, #24
 8000af6:	f1c2 0c20 	rsb	ip, r2, #32
 8000afa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000afe:	fa20 f002 	lsr.w	r0, r0, r2
 8000b02:	bf18      	it	ne
 8000b04:	f040 0001 	orrne.w	r0, r0, #1
 8000b08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b14:	ea40 000c 	orr.w	r0, r0, ip
 8000b18:	fa23 f302 	lsr.w	r3, r3, r2
 8000b1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b20:	e7cc      	b.n	8000abc <__aeabi_d2f+0x14>
 8000b22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b26:	d107      	bne.n	8000b38 <__aeabi_d2f+0x90>
 8000b28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b2c:	bf1e      	ittt	ne
 8000b2e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b32:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b36:	4770      	bxne	lr
 8000b38:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b3c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b40:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b44:	4770      	bx	lr
 8000b46:	bf00      	nop

08000b48 <__aeabi_frsub>:
 8000b48:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b4c:	e002      	b.n	8000b54 <__addsf3>
 8000b4e:	bf00      	nop

08000b50 <__aeabi_fsub>:
 8000b50:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b54 <__addsf3>:
 8000b54:	0042      	lsls	r2, r0, #1
 8000b56:	bf1f      	itttt	ne
 8000b58:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b5c:	ea92 0f03 	teqne	r2, r3
 8000b60:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b64:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b68:	d06a      	beq.n	8000c40 <__addsf3+0xec>
 8000b6a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b6e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b72:	bfc1      	itttt	gt
 8000b74:	18d2      	addgt	r2, r2, r3
 8000b76:	4041      	eorgt	r1, r0
 8000b78:	4048      	eorgt	r0, r1
 8000b7a:	4041      	eorgt	r1, r0
 8000b7c:	bfb8      	it	lt
 8000b7e:	425b      	neglt	r3, r3
 8000b80:	2b19      	cmp	r3, #25
 8000b82:	bf88      	it	hi
 8000b84:	4770      	bxhi	lr
 8000b86:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000b8a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b8e:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b9a:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000b9e:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000ba2:	bf18      	it	ne
 8000ba4:	4249      	negne	r1, r1
 8000ba6:	ea92 0f03 	teq	r2, r3
 8000baa:	d03f      	beq.n	8000c2c <__addsf3+0xd8>
 8000bac:	f1a2 0201 	sub.w	r2, r2, #1
 8000bb0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bb4:	eb10 000c 	adds.w	r0, r0, ip
 8000bb8:	f1c3 0320 	rsb	r3, r3, #32
 8000bbc:	fa01 f103 	lsl.w	r1, r1, r3
 8000bc0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000bc4:	d502      	bpl.n	8000bcc <__addsf3+0x78>
 8000bc6:	4249      	negs	r1, r1
 8000bc8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bcc:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000bd0:	d313      	bcc.n	8000bfa <__addsf3+0xa6>
 8000bd2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000bd6:	d306      	bcc.n	8000be6 <__addsf3+0x92>
 8000bd8:	0840      	lsrs	r0, r0, #1
 8000bda:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bde:	f102 0201 	add.w	r2, r2, #1
 8000be2:	2afe      	cmp	r2, #254	@ 0xfe
 8000be4:	d251      	bcs.n	8000c8a <__addsf3+0x136>
 8000be6:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000bea:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bee:	bf08      	it	eq
 8000bf0:	f020 0001 	biceq.w	r0, r0, #1
 8000bf4:	ea40 0003 	orr.w	r0, r0, r3
 8000bf8:	4770      	bx	lr
 8000bfa:	0049      	lsls	r1, r1, #1
 8000bfc:	eb40 0000 	adc.w	r0, r0, r0
 8000c00:	3a01      	subs	r2, #1
 8000c02:	bf28      	it	cs
 8000c04:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000c08:	d2ed      	bcs.n	8000be6 <__addsf3+0x92>
 8000c0a:	fab0 fc80 	clz	ip, r0
 8000c0e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c12:	ebb2 020c 	subs.w	r2, r2, ip
 8000c16:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c1a:	bfaa      	itet	ge
 8000c1c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c20:	4252      	neglt	r2, r2
 8000c22:	4318      	orrge	r0, r3
 8000c24:	bfbc      	itt	lt
 8000c26:	40d0      	lsrlt	r0, r2
 8000c28:	4318      	orrlt	r0, r3
 8000c2a:	4770      	bx	lr
 8000c2c:	f092 0f00 	teq	r2, #0
 8000c30:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c34:	bf06      	itte	eq
 8000c36:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c3a:	3201      	addeq	r2, #1
 8000c3c:	3b01      	subne	r3, #1
 8000c3e:	e7b5      	b.n	8000bac <__addsf3+0x58>
 8000c40:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c44:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c48:	bf18      	it	ne
 8000c4a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c4e:	d021      	beq.n	8000c94 <__addsf3+0x140>
 8000c50:	ea92 0f03 	teq	r2, r3
 8000c54:	d004      	beq.n	8000c60 <__addsf3+0x10c>
 8000c56:	f092 0f00 	teq	r2, #0
 8000c5a:	bf08      	it	eq
 8000c5c:	4608      	moveq	r0, r1
 8000c5e:	4770      	bx	lr
 8000c60:	ea90 0f01 	teq	r0, r1
 8000c64:	bf1c      	itt	ne
 8000c66:	2000      	movne	r0, #0
 8000c68:	4770      	bxne	lr
 8000c6a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c6e:	d104      	bne.n	8000c7a <__addsf3+0x126>
 8000c70:	0040      	lsls	r0, r0, #1
 8000c72:	bf28      	it	cs
 8000c74:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c78:	4770      	bx	lr
 8000c7a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c7e:	bf3c      	itt	cc
 8000c80:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bxcc	lr
 8000c86:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c8a:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000c8e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c92:	4770      	bx	lr
 8000c94:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c98:	bf16      	itet	ne
 8000c9a:	4608      	movne	r0, r1
 8000c9c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000ca0:	4601      	movne	r1, r0
 8000ca2:	0242      	lsls	r2, r0, #9
 8000ca4:	bf06      	itte	eq
 8000ca6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000caa:	ea90 0f01 	teqeq	r0, r1
 8000cae:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000cb2:	4770      	bx	lr

08000cb4 <__aeabi_ui2f>:
 8000cb4:	f04f 0300 	mov.w	r3, #0
 8000cb8:	e004      	b.n	8000cc4 <__aeabi_i2f+0x8>
 8000cba:	bf00      	nop

08000cbc <__aeabi_i2f>:
 8000cbc:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000cc0:	bf48      	it	mi
 8000cc2:	4240      	negmi	r0, r0
 8000cc4:	ea5f 0c00 	movs.w	ip, r0
 8000cc8:	bf08      	it	eq
 8000cca:	4770      	bxeq	lr
 8000ccc:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000cd0:	4601      	mov	r1, r0
 8000cd2:	f04f 0000 	mov.w	r0, #0
 8000cd6:	e01c      	b.n	8000d12 <__aeabi_l2f+0x2a>

08000cd8 <__aeabi_ul2f>:
 8000cd8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cdc:	bf08      	it	eq
 8000cde:	4770      	bxeq	lr
 8000ce0:	f04f 0300 	mov.w	r3, #0
 8000ce4:	e00a      	b.n	8000cfc <__aeabi_l2f+0x14>
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_l2f>:
 8000ce8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cec:	bf08      	it	eq
 8000cee:	4770      	bxeq	lr
 8000cf0:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000cf4:	d502      	bpl.n	8000cfc <__aeabi_l2f+0x14>
 8000cf6:	4240      	negs	r0, r0
 8000cf8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cfc:	ea5f 0c01 	movs.w	ip, r1
 8000d00:	bf02      	ittt	eq
 8000d02:	4684      	moveq	ip, r0
 8000d04:	4601      	moveq	r1, r0
 8000d06:	2000      	moveq	r0, #0
 8000d08:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000d0c:	bf08      	it	eq
 8000d0e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000d12:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000d16:	fabc f28c 	clz	r2, ip
 8000d1a:	3a08      	subs	r2, #8
 8000d1c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d20:	db10      	blt.n	8000d44 <__aeabi_l2f+0x5c>
 8000d22:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d26:	4463      	add	r3, ip
 8000d28:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d2c:	f1c2 0220 	rsb	r2, r2, #32
 8000d30:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d34:	fa20 f202 	lsr.w	r2, r0, r2
 8000d38:	eb43 0002 	adc.w	r0, r3, r2
 8000d3c:	bf08      	it	eq
 8000d3e:	f020 0001 	biceq.w	r0, r0, #1
 8000d42:	4770      	bx	lr
 8000d44:	f102 0220 	add.w	r2, r2, #32
 8000d48:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d54:	fa21 f202 	lsr.w	r2, r1, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d62:	4770      	bx	lr

08000d64 <__aeabi_f2iz>:
 8000d64:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000d68:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000d6c:	d30f      	bcc.n	8000d8e <__aeabi_f2iz+0x2a>
 8000d6e:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000d72:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000d76:	d90d      	bls.n	8000d94 <__aeabi_f2iz+0x30>
 8000d78:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000d7c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000d80:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000d84:	fa23 f002 	lsr.w	r0, r3, r2
 8000d88:	bf18      	it	ne
 8000d8a:	4240      	negne	r0, r0
 8000d8c:	4770      	bx	lr
 8000d8e:	f04f 0000 	mov.w	r0, #0
 8000d92:	4770      	bx	lr
 8000d94:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000d98:	d101      	bne.n	8000d9e <__aeabi_f2iz+0x3a>
 8000d9a:	0242      	lsls	r2, r0, #9
 8000d9c:	d105      	bne.n	8000daa <__aeabi_f2iz+0x46>
 8000d9e:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 8000da2:	bf08      	it	eq
 8000da4:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000da8:	4770      	bx	lr
 8000daa:	f04f 0000 	mov.w	r0, #0
 8000dae:	4770      	bx	lr

08000db0 <__do_global_dtors_aux>:
 8000db0:	b510      	push	{r4, lr}
 8000db2:	4c05      	ldr	r4, [pc, #20]	@ (8000dc8 <__do_global_dtors_aux+0x18>)
 8000db4:	7823      	ldrb	r3, [r4, #0]
 8000db6:	b933      	cbnz	r3, 8000dc6 <__do_global_dtors_aux+0x16>
 8000db8:	4b04      	ldr	r3, [pc, #16]	@ (8000dcc <__do_global_dtors_aux+0x1c>)
 8000dba:	b113      	cbz	r3, 8000dc2 <__do_global_dtors_aux+0x12>
 8000dbc:	4804      	ldr	r0, [pc, #16]	@ (8000dd0 <__do_global_dtors_aux+0x20>)
 8000dbe:	f3af 8000 	nop.w
 8000dc2:	2301      	movs	r3, #1
 8000dc4:	7023      	strb	r3, [r4, #0]
 8000dc6:	bd10      	pop	{r4, pc}
 8000dc8:	2000006c 	.word	0x2000006c
 8000dcc:	00000000 	.word	0x00000000
 8000dd0:	080044cc 	.word	0x080044cc

08000dd4 <frame_dummy>:
 8000dd4:	b508      	push	{r3, lr}
 8000dd6:	4b03      	ldr	r3, [pc, #12]	@ (8000de4 <frame_dummy+0x10>)
 8000dd8:	b11b      	cbz	r3, 8000de2 <frame_dummy+0xe>
 8000dda:	4903      	ldr	r1, [pc, #12]	@ (8000de8 <frame_dummy+0x14>)
 8000ddc:	4803      	ldr	r0, [pc, #12]	@ (8000dec <frame_dummy+0x18>)
 8000dde:	f3af 8000 	nop.w
 8000de2:	bd08      	pop	{r3, pc}
 8000de4:	00000000 	.word	0x00000000
 8000de8:	20000070 	.word	0x20000070
 8000dec:	080044cc 	.word	0x080044cc

08000df0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000df0:	b570      	push	{r4, r5, r6, lr}
 8000df2:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000df4:	2400      	movs	r4, #0
 8000df6:	9402      	str	r4, [sp, #8]
 8000df8:	9403      	str	r4, [sp, #12]
 8000dfa:	9404      	str	r4, [sp, #16]
 8000dfc:	9405      	str	r4, [sp, #20]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dfe:	4b1c      	ldr	r3, [pc, #112]	@ (8000e70 <MX_GPIO_Init+0x80>)
 8000e00:	699a      	ldr	r2, [r3, #24]
 8000e02:	f042 0204 	orr.w	r2, r2, #4
 8000e06:	619a      	str	r2, [r3, #24]
 8000e08:	699a      	ldr	r2, [r3, #24]
 8000e0a:	f002 0204 	and.w	r2, r2, #4
 8000e0e:	9200      	str	r2, [sp, #0]
 8000e10:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e12:	699a      	ldr	r2, [r3, #24]
 8000e14:	f042 0208 	orr.w	r2, r2, #8
 8000e18:	619a      	str	r2, [r3, #24]
 8000e1a:	699b      	ldr	r3, [r3, #24]
 8000e1c:	f003 0308 	and.w	r3, r3, #8
 8000e20:	9301      	str	r3, [sp, #4]
 8000e22:	9b01      	ldr	r3, [sp, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_ON_Pin|BUZZ_Pin|nSleep_Pin|IR_EN_Pin
 8000e24:	4d13      	ldr	r5, [pc, #76]	@ (8000e74 <MX_GPIO_Init+0x84>)
 8000e26:	4622      	mov	r2, r4
 8000e28:	f44f 6173 	mov.w	r1, #3888	@ 0xf30
 8000e2c:	4628      	mov	r0, r5
 8000e2e:	f001 fb04 	bl	800243a <HAL_GPIO_WritePin>
                          |LED_ACT_Pin|LED_LOW_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : BTT_ON_Pin */
  GPIO_InitStruct.Pin = BTT_ON_Pin;
 8000e32:	2601      	movs	r6, #1
 8000e34:	9602      	str	r6, [sp, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e36:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e38:	9404      	str	r4, [sp, #16]
  HAL_GPIO_Init(BTT_ON_GPIO_Port, &GPIO_InitStruct);
 8000e3a:	a902      	add	r1, sp, #8
 8000e3c:	480e      	ldr	r0, [pc, #56]	@ (8000e78 <MX_GPIO_Init+0x88>)
 8000e3e:	f001 f9e7 	bl	8002210 <HAL_GPIO_Init>

  /*Configure GPIO pin : nFautl_Pin */
  GPIO_InitStruct.Pin = nFautl_Pin;
 8000e42:	2304      	movs	r3, #4
 8000e44:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e46:	4b0d      	ldr	r3, [pc, #52]	@ (8000e7c <MX_GPIO_Init+0x8c>)
 8000e48:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e4a:	9404      	str	r4, [sp, #16]
  HAL_GPIO_Init(nFautl_GPIO_Port, &GPIO_InitStruct);
 8000e4c:	a902      	add	r1, sp, #8
 8000e4e:	4628      	mov	r0, r5
 8000e50:	f001 f9de 	bl	8002210 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_ON_Pin BUZZ_Pin nSleep_Pin IR_EN_Pin
                           LED_ACT_Pin LED_LOW_Pin */
  GPIO_InitStruct.Pin = LED_ON_Pin|BUZZ_Pin|nSleep_Pin|IR_EN_Pin
 8000e54:	f44f 6373 	mov.w	r3, #3888	@ 0xf30
 8000e58:	9302      	str	r3, [sp, #8]
                          |LED_ACT_Pin|LED_LOW_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e5a:	9603      	str	r6, [sp, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e5c:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e5e:	2302      	movs	r3, #2
 8000e60:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e62:	a902      	add	r1, sp, #8
 8000e64:	4628      	mov	r0, r5
 8000e66:	f001 f9d3 	bl	8002210 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000e6a:	b006      	add	sp, #24
 8000e6c:	bd70      	pop	{r4, r5, r6, pc}
 8000e6e:	bf00      	nop
 8000e70:	40021000 	.word	0x40021000
 8000e74:	40010c00 	.word	0x40010c00
 8000e78:	40010800 	.word	0x40010800
 8000e7c:	10110000 	.word	0x10110000

08000e80 <MX_DMA_Init>:
{
 8000e80:	b500      	push	{lr}
 8000e82:	b083      	sub	sp, #12
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000e84:	4b0a      	ldr	r3, [pc, #40]	@ (8000eb0 <MX_DMA_Init+0x30>)
 8000e86:	695a      	ldr	r2, [r3, #20]
 8000e88:	f042 0201 	orr.w	r2, r2, #1
 8000e8c:	615a      	str	r2, [r3, #20]
 8000e8e:	695b      	ldr	r3, [r3, #20]
 8000e90:	f003 0301 	and.w	r3, r3, #1
 8000e94:	9301      	str	r3, [sp, #4]
 8000e96:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000e98:	2200      	movs	r2, #0
 8000e9a:	4611      	mov	r1, r2
 8000e9c:	200b      	movs	r0, #11
 8000e9e:	f001 f859 	bl	8001f54 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000ea2:	200b      	movs	r0, #11
 8000ea4:	f001 f866 	bl	8001f74 <HAL_NVIC_EnableIRQ>
}
 8000ea8:	b003      	add	sp, #12
 8000eaa:	f85d fb04 	ldr.w	pc, [sp], #4
 8000eae:	bf00      	nop
 8000eb0:	40021000 	.word	0x40021000
 8000eb4:	00000000 	.word	0x00000000

08000eb8 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8000eb8:	b508      	push	{r3, lr}
  if(hadc->Instance == ADC1){
 8000eba:	6802      	ldr	r2, [r0, #0]
 8000ebc:	4b1c      	ldr	r3, [pc, #112]	@ (8000f30 <HAL_ADC_ConvCpltCallback+0x78>)
 8000ebe:	429a      	cmp	r2, r3
 8000ec0:	d000      	beq.n	8000ec4 <HAL_ADC_ConvCpltCallback+0xc>
      HAL_GPIO_WritePin(LED_LOW_GPIO_Port, LED_LOW_Pin, GPIO_PIN_SET);
    }else{
      HAL_GPIO_WritePin(LED_LOW_GPIO_Port, LED_LOW_Pin, GPIO_PIN_RESET);
    }
  }
}
 8000ec2:	bd08      	pop	{r3, pc}
    adc_done_flag = true;
 8000ec4:	4b1b      	ldr	r3, [pc, #108]	@ (8000f34 <HAL_ADC_ConvCpltCallback+0x7c>)
 8000ec6:	2201      	movs	r2, #1
 8000ec8:	701a      	strb	r2, [r3, #0]
    float voltage = adc_buffer[0] * 3.3 / 4095;
 8000eca:	4b1b      	ldr	r3, [pc, #108]	@ (8000f38 <HAL_ADC_ConvCpltCallback+0x80>)
 8000ecc:	6818      	ldr	r0, [r3, #0]
 8000ece:	f7ff fac1 	bl	8000454 <__aeabi_ui2d>
 8000ed2:	a311      	add	r3, pc, #68	@ (adr r3, 8000f18 <HAL_ADC_ConvCpltCallback+0x60>)
 8000ed4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ed8:	f7ff fb36 	bl	8000548 <__aeabi_dmul>
 8000edc:	a310      	add	r3, pc, #64	@ (adr r3, 8000f20 <HAL_ADC_ConvCpltCallback+0x68>)
 8000ede:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ee2:	f7ff fc5b 	bl	800079c <__aeabi_ddiv>
 8000ee6:	f7ff fddf 	bl	8000aa8 <__aeabi_d2f>
    if(voltage < (5.4 / 4)){
 8000eea:	f7ff fad5 	bl	8000498 <__aeabi_f2d>
 8000eee:	a30e      	add	r3, pc, #56	@ (adr r3, 8000f28 <HAL_ADC_ConvCpltCallback+0x70>)
 8000ef0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ef4:	f7ff fd9a 	bl	8000a2c <__aeabi_dcmplt>
 8000ef8:	b130      	cbz	r0, 8000f08 <HAL_ADC_ConvCpltCallback+0x50>
      HAL_GPIO_WritePin(LED_LOW_GPIO_Port, LED_LOW_Pin, GPIO_PIN_SET);
 8000efa:	2201      	movs	r2, #1
 8000efc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000f00:	480e      	ldr	r0, [pc, #56]	@ (8000f3c <HAL_ADC_ConvCpltCallback+0x84>)
 8000f02:	f001 fa9a 	bl	800243a <HAL_GPIO_WritePin>
 8000f06:	e7dc      	b.n	8000ec2 <HAL_ADC_ConvCpltCallback+0xa>
      HAL_GPIO_WritePin(LED_LOW_GPIO_Port, LED_LOW_Pin, GPIO_PIN_RESET);
 8000f08:	2200      	movs	r2, #0
 8000f0a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000f0e:	480b      	ldr	r0, [pc, #44]	@ (8000f3c <HAL_ADC_ConvCpltCallback+0x84>)
 8000f10:	f001 fa93 	bl	800243a <HAL_GPIO_WritePin>
}
 8000f14:	e7d5      	b.n	8000ec2 <HAL_ADC_ConvCpltCallback+0xa>
 8000f16:	bf00      	nop
 8000f18:	66666666 	.word	0x66666666
 8000f1c:	400a6666 	.word	0x400a6666
 8000f20:	00000000 	.word	0x00000000
 8000f24:	40affe00 	.word	0x40affe00
 8000f28:	9999999a 	.word	0x9999999a
 8000f2c:	3ff59999 	.word	0x3ff59999
 8000f30:	40012400 	.word	0x40012400
 8000f34:	20000088 	.word	0x20000088
 8000f38:	200000c0 	.word	0x200000c0
 8000f3c:	40010c00 	.word	0x40010c00

08000f40 <Get_Line>:
  }

  PID_Linefollow(error);
}

uint8_t Get_Line(void){
 8000f40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  uint8_t out = 0;
  for (uint8_t i = 0; i < 8; i++){
 8000f44:	2400      	movs	r4, #0
  uint8_t out = 0;
 8000f46:	4625      	mov	r5, r4
  for (uint8_t i = 0; i < 8; i++){
 8000f48:	e001      	b.n	8000f4e <Get_Line+0xe>
 8000f4a:	3401      	adds	r4, #1
 8000f4c:	b2e4      	uxtb	r4, r4
 8000f4e:	2c07      	cmp	r4, #7
 8000f50:	d82b      	bhi.n	8000faa <Get_Line+0x6a>
    if(adc_buffer[i+1] > (BLACK[i] - (BLACK[i]-WHITE[i])*0.5)){
 8000f52:	1c63      	adds	r3, r4, #1
 8000f54:	4a16      	ldr	r2, [pc, #88]	@ (8000fb0 <Get_Line+0x70>)
 8000f56:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000f5a:	f7ff fa7b 	bl	8000454 <__aeabi_ui2d>
 8000f5e:	4606      	mov	r6, r0
 8000f60:	460f      	mov	r7, r1
 8000f62:	4b14      	ldr	r3, [pc, #80]	@ (8000fb4 <Get_Line+0x74>)
 8000f64:	f833 a014 	ldrh.w	sl, [r3, r4, lsl #1]
 8000f68:	4b13      	ldr	r3, [pc, #76]	@ (8000fb8 <Get_Line+0x78>)
 8000f6a:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 8000f6e:	ebaa 0000 	sub.w	r0, sl, r0
 8000f72:	f7ff fa7f 	bl	8000474 <__aeabi_i2d>
 8000f76:	2200      	movs	r2, #0
 8000f78:	4b10      	ldr	r3, [pc, #64]	@ (8000fbc <Get_Line+0x7c>)
 8000f7a:	f7ff fae5 	bl	8000548 <__aeabi_dmul>
 8000f7e:	4680      	mov	r8, r0
 8000f80:	4689      	mov	r9, r1
 8000f82:	4650      	mov	r0, sl
 8000f84:	f7ff fa76 	bl	8000474 <__aeabi_i2d>
 8000f88:	4642      	mov	r2, r8
 8000f8a:	464b      	mov	r3, r9
 8000f8c:	f7ff f924 	bl	80001d8 <__aeabi_dsub>
 8000f90:	4602      	mov	r2, r0
 8000f92:	460b      	mov	r3, r1
 8000f94:	4630      	mov	r0, r6
 8000f96:	4639      	mov	r1, r7
 8000f98:	f7ff fd66 	bl	8000a68 <__aeabi_dcmpgt>
 8000f9c:	2800      	cmp	r0, #0
 8000f9e:	d0d4      	beq.n	8000f4a <Get_Line+0xa>
      out = out | (1 << i);
 8000fa0:	2001      	movs	r0, #1
 8000fa2:	40a0      	lsls	r0, r4
 8000fa4:	4328      	orrs	r0, r5
 8000fa6:	b2c5      	uxtb	r5, r0
 8000fa8:	e7cf      	b.n	8000f4a <Get_Line+0xa>
    }
  }
  return out;
}
 8000faa:	4628      	mov	r0, r5
 8000fac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fb0:	200000c0 	.word	0x200000c0
 8000fb4:	080044e8 	.word	0x080044e8
 8000fb8:	080044f8 	.word	0x080044f8
 8000fbc:	3fe00000 	.word	0x3fe00000

08000fc0 <PID_Linefollow>:

    if (sum == 0) return 0;  // no line detected
    return avg / sum;        // 0 … 7000
}

void PID_Linefollow(int32_t error){
 8000fc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000fc4:	4604      	mov	r4, r0
    P = error;
 8000fc6:	4b76      	ldr	r3, [pc, #472]	@ (80011a0 <PID_Linefollow+0x1e0>)
 8000fc8:	6018      	str	r0, [r3, #0]
    I = I + error*((HAL_GetTick()-t0)/1000);
 8000fca:	f000 fc8f 	bl	80018ec <HAL_GetTick>
 8000fce:	4b75      	ldr	r3, [pc, #468]	@ (80011a4 <PID_Linefollow+0x1e4>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	1ac0      	subs	r0, r0, r3
 8000fd4:	4b74      	ldr	r3, [pc, #464]	@ (80011a8 <PID_Linefollow+0x1e8>)
 8000fd6:	fba3 3000 	umull	r3, r0, r3, r0
 8000fda:	0980      	lsrs	r0, r0, #6
 8000fdc:	4a73      	ldr	r2, [pc, #460]	@ (80011ac <PID_Linefollow+0x1ec>)
 8000fde:	6813      	ldr	r3, [r2, #0]
 8000fe0:	fb00 3304 	mla	r3, r0, r4, r3
 8000fe4:	6013      	str	r3, [r2, #0]
    D = error - previousError;
 8000fe6:	4b72      	ldr	r3, [pc, #456]	@ (80011b0 <PID_Linefollow+0x1f0>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	1ae3      	subs	r3, r4, r3
 8000fec:	4a71      	ldr	r2, [pc, #452]	@ (80011b4 <PID_Linefollow+0x1f4>)
 8000fee:	6013      	str	r3, [r2, #0]

    if (position >= 3500) I = 0;
 8000ff0:	4b71      	ldr	r3, [pc, #452]	@ (80011b8 <PID_Linefollow+0x1f8>)
 8000ff2:	881a      	ldrh	r2, [r3, #0]
 8000ff4:	f640 53ab 	movw	r3, #3499	@ 0xdab
 8000ff8:	429a      	cmp	r2, r3
 8000ffa:	d902      	bls.n	8001002 <PID_Linefollow+0x42>
 8000ffc:	4b6b      	ldr	r3, [pc, #428]	@ (80011ac <PID_Linefollow+0x1ec>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	601a      	str	r2, [r3, #0]

    t0 = HAL_GetTick();
 8001002:	f000 fc73 	bl	80018ec <HAL_GetTick>
 8001006:	4b67      	ldr	r3, [pc, #412]	@ (80011a4 <PID_Linefollow+0x1e4>)
 8001008:	6018      	str	r0, [r3, #0]
    
    Pvalue = (Kp/pow(10,multiP))*P;
 800100a:	4b6c      	ldr	r3, [pc, #432]	@ (80011bc <PID_Linefollow+0x1fc>)
 800100c:	6818      	ldr	r0, [r3, #0]
 800100e:	f7ff fa43 	bl	8000498 <__aeabi_f2d>
 8001012:	4606      	mov	r6, r0
 8001014:	460f      	mov	r7, r1
 8001016:	4b6a      	ldr	r3, [pc, #424]	@ (80011c0 <PID_Linefollow+0x200>)
 8001018:	7818      	ldrb	r0, [r3, #0]
 800101a:	f7ff fa1b 	bl	8000454 <__aeabi_ui2d>
 800101e:	4602      	mov	r2, r0
 8001020:	460b      	mov	r3, r1
 8001022:	f04f 0800 	mov.w	r8, #0
 8001026:	f8df 919c 	ldr.w	r9, [pc, #412]	@ 80011c4 <PID_Linefollow+0x204>
 800102a:	4640      	mov	r0, r8
 800102c:	4649      	mov	r1, r9
 800102e:	f002 fa95 	bl	800355c <pow>
 8001032:	4602      	mov	r2, r0
 8001034:	460b      	mov	r3, r1
 8001036:	4630      	mov	r0, r6
 8001038:	4639      	mov	r1, r7
 800103a:	f7ff fbaf 	bl	800079c <__aeabi_ddiv>
 800103e:	4606      	mov	r6, r0
 8001040:	460f      	mov	r7, r1
 8001042:	4b57      	ldr	r3, [pc, #348]	@ (80011a0 <PID_Linefollow+0x1e0>)
 8001044:	6818      	ldr	r0, [r3, #0]
 8001046:	f7ff fa15 	bl	8000474 <__aeabi_i2d>
 800104a:	4632      	mov	r2, r6
 800104c:	463b      	mov	r3, r7
 800104e:	f7ff fa7b 	bl	8000548 <__aeabi_dmul>
 8001052:	f7ff fd29 	bl	8000aa8 <__aeabi_d2f>
 8001056:	4605      	mov	r5, r0
 8001058:	4b5b      	ldr	r3, [pc, #364]	@ (80011c8 <PID_Linefollow+0x208>)
 800105a:	6018      	str	r0, [r3, #0]
    Ivalue = (Ki/pow(10,multiI))*I;
 800105c:	4b5b      	ldr	r3, [pc, #364]	@ (80011cc <PID_Linefollow+0x20c>)
 800105e:	6818      	ldr	r0, [r3, #0]
 8001060:	f7ff fa1a 	bl	8000498 <__aeabi_f2d>
 8001064:	4606      	mov	r6, r0
 8001066:	460f      	mov	r7, r1
 8001068:	4b59      	ldr	r3, [pc, #356]	@ (80011d0 <PID_Linefollow+0x210>)
 800106a:	7818      	ldrb	r0, [r3, #0]
 800106c:	f7ff f9f2 	bl	8000454 <__aeabi_ui2d>
 8001070:	4602      	mov	r2, r0
 8001072:	460b      	mov	r3, r1
 8001074:	4640      	mov	r0, r8
 8001076:	4649      	mov	r1, r9
 8001078:	f002 fa70 	bl	800355c <pow>
 800107c:	4602      	mov	r2, r0
 800107e:	460b      	mov	r3, r1
 8001080:	4630      	mov	r0, r6
 8001082:	4639      	mov	r1, r7
 8001084:	f7ff fb8a 	bl	800079c <__aeabi_ddiv>
 8001088:	4606      	mov	r6, r0
 800108a:	460f      	mov	r7, r1
 800108c:	4b47      	ldr	r3, [pc, #284]	@ (80011ac <PID_Linefollow+0x1ec>)
 800108e:	6818      	ldr	r0, [r3, #0]
 8001090:	f7ff f9f0 	bl	8000474 <__aeabi_i2d>
 8001094:	4632      	mov	r2, r6
 8001096:	463b      	mov	r3, r7
 8001098:	f7ff fa56 	bl	8000548 <__aeabi_dmul>
 800109c:	f7ff fd04 	bl	8000aa8 <__aeabi_d2f>
 80010a0:	4682      	mov	sl, r0
 80010a2:	4b4c      	ldr	r3, [pc, #304]	@ (80011d4 <PID_Linefollow+0x214>)
 80010a4:	6018      	str	r0, [r3, #0]
    Dvalue = (Kd/pow(10,multiD))*D; 
 80010a6:	4b4c      	ldr	r3, [pc, #304]	@ (80011d8 <PID_Linefollow+0x218>)
 80010a8:	6818      	ldr	r0, [r3, #0]
 80010aa:	f7ff f9f5 	bl	8000498 <__aeabi_f2d>
 80010ae:	4606      	mov	r6, r0
 80010b0:	460f      	mov	r7, r1
 80010b2:	4b4a      	ldr	r3, [pc, #296]	@ (80011dc <PID_Linefollow+0x21c>)
 80010b4:	7818      	ldrb	r0, [r3, #0]
 80010b6:	f7ff f9cd 	bl	8000454 <__aeabi_ui2d>
 80010ba:	4602      	mov	r2, r0
 80010bc:	460b      	mov	r3, r1
 80010be:	4640      	mov	r0, r8
 80010c0:	4649      	mov	r1, r9
 80010c2:	f002 fa4b 	bl	800355c <pow>
 80010c6:	4602      	mov	r2, r0
 80010c8:	460b      	mov	r3, r1
 80010ca:	4630      	mov	r0, r6
 80010cc:	4639      	mov	r1, r7
 80010ce:	f7ff fb65 	bl	800079c <__aeabi_ddiv>
 80010d2:	4606      	mov	r6, r0
 80010d4:	460f      	mov	r7, r1
 80010d6:	4b37      	ldr	r3, [pc, #220]	@ (80011b4 <PID_Linefollow+0x1f4>)
 80010d8:	6818      	ldr	r0, [r3, #0]
 80010da:	f7ff f9cb 	bl	8000474 <__aeabi_i2d>
 80010de:	4632      	mov	r2, r6
 80010e0:	463b      	mov	r3, r7
 80010e2:	f7ff fa31 	bl	8000548 <__aeabi_dmul>
 80010e6:	f7ff fcdf 	bl	8000aa8 <__aeabi_d2f>
 80010ea:	4606      	mov	r6, r0
 80010ec:	4b3c      	ldr	r3, [pc, #240]	@ (80011e0 <PID_Linefollow+0x220>)
 80010ee:	6018      	str	r0, [r3, #0]

    float PIDvalue = Pvalue + Ivalue + Dvalue;
 80010f0:	4651      	mov	r1, sl
 80010f2:	4628      	mov	r0, r5
 80010f4:	f7ff fd2e 	bl	8000b54 <__addsf3>
 80010f8:	4601      	mov	r1, r0
 80010fa:	4630      	mov	r0, r6
 80010fc:	f7ff fd2a 	bl	8000b54 <__addsf3>
 8001100:	4605      	mov	r5, r0
    previousError = error;
 8001102:	4b2b      	ldr	r3, [pc, #172]	@ (80011b0 <PID_Linefollow+0x1f0>)
 8001104:	601c      	str	r4, [r3, #0]

    lsp = lfspeed - PIDvalue;
 8001106:	4b37      	ldr	r3, [pc, #220]	@ (80011e4 <PID_Linefollow+0x224>)
 8001108:	6818      	ldr	r0, [r3, #0]
 800110a:	f7ff fdd7 	bl	8000cbc <__aeabi_i2f>
 800110e:	4606      	mov	r6, r0
 8001110:	4629      	mov	r1, r5
 8001112:	f7ff fd1d 	bl	8000b50 <__aeabi_fsub>
 8001116:	f7ff fe25 	bl	8000d64 <__aeabi_f2iz>
 800111a:	4604      	mov	r4, r0
 800111c:	4b32      	ldr	r3, [pc, #200]	@ (80011e8 <PID_Linefollow+0x228>)
 800111e:	6018      	str	r0, [r3, #0]
    rsp = lfspeed + PIDvalue;
 8001120:	4629      	mov	r1, r5
 8001122:	4630      	mov	r0, r6
 8001124:	f7ff fd16 	bl	8000b54 <__addsf3>
 8001128:	f7ff fe1c 	bl	8000d64 <__aeabi_f2iz>
 800112c:	4b2f      	ldr	r3, [pc, #188]	@ (80011ec <PID_Linefollow+0x22c>)
 800112e:	6018      	str	r0, [r3, #0]

    if (lsp > MAX_SPEED) {
 8001130:	f5b4 7f2f 	cmp.w	r4, #700	@ 0x2bc
 8001134:	dd03      	ble.n	800113e <PID_Linefollow+0x17e>
      lsp = MAX_SPEED;
 8001136:	4b2c      	ldr	r3, [pc, #176]	@ (80011e8 <PID_Linefollow+0x228>)
 8001138:	f44f 722f 	mov.w	r2, #700	@ 0x2bc
 800113c:	601a      	str	r2, [r3, #0]
    }
    if (lsp < -MAX_SPEED) {
 800113e:	4b2a      	ldr	r3, [pc, #168]	@ (80011e8 <PID_Linefollow+0x228>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	f513 7f2f 	cmn.w	r3, #700	@ 0x2bc
 8001146:	da02      	bge.n	800114e <PID_Linefollow+0x18e>
      lsp = -MAX_SPEED;
 8001148:	4b27      	ldr	r3, [pc, #156]	@ (80011e8 <PID_Linefollow+0x228>)
 800114a:	4a29      	ldr	r2, [pc, #164]	@ (80011f0 <PID_Linefollow+0x230>)
 800114c:	601a      	str	r2, [r3, #0]
    }
    
    if (rsp > MAX_SPEED) {
 800114e:	f5b0 7f2f 	cmp.w	r0, #700	@ 0x2bc
 8001152:	dd03      	ble.n	800115c <PID_Linefollow+0x19c>
      rsp = MAX_SPEED;
 8001154:	4b25      	ldr	r3, [pc, #148]	@ (80011ec <PID_Linefollow+0x22c>)
 8001156:	f44f 722f 	mov.w	r2, #700	@ 0x2bc
 800115a:	601a      	str	r2, [r3, #0]
    }
    if (rsp < -MAX_SPEED) {
 800115c:	4b23      	ldr	r3, [pc, #140]	@ (80011ec <PID_Linefollow+0x22c>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	f513 7f2f 	cmn.w	r3, #700	@ 0x2bc
 8001164:	da02      	bge.n	800116c <PID_Linefollow+0x1ac>
      rsp = -MAX_SPEED;
 8001166:	4b21      	ldr	r3, [pc, #132]	@ (80011ec <PID_Linefollow+0x22c>)
 8001168:	4a21      	ldr	r2, [pc, #132]	@ (80011f0 <PID_Linefollow+0x230>)
 800116a:	601a      	str	r2, [r3, #0]
    }

    bool dir_a, dir_b;
    dir_a = rsp > 0 ? FORWARD : BACKWARD;
 800116c:	4b1f      	ldr	r3, [pc, #124]	@ (80011ec <PID_Linefollow+0x22c>)
 800116e:	681a      	ldr	r2, [r3, #0]
    dir_b = lsp > 0 ? FORWARD : BACKWARD;
 8001170:	4b1d      	ldr	r3, [pc, #116]	@ (80011e8 <PID_Linefollow+0x228>)
 8001172:	681b      	ldr	r3, [r3, #0]

    M_SetSpeed(abs(rsp), abs(lsp), dir_a, dir_b);
 8001174:	ea82 70e2 	eor.w	r0, r2, r2, asr #31
 8001178:	eba0 70e2 	sub.w	r0, r0, r2, asr #31
 800117c:	ea83 71e3 	eor.w	r1, r3, r3, asr #31
 8001180:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
 8001184:	2b00      	cmp	r3, #0
 8001186:	bfd4      	ite	le
 8001188:	2300      	movle	r3, #0
 800118a:	2301      	movgt	r3, #1
 800118c:	2a00      	cmp	r2, #0
 800118e:	bfd4      	ite	le
 8001190:	2200      	movle	r2, #0
 8001192:	2201      	movgt	r2, #1
 8001194:	b289      	uxth	r1, r1
 8001196:	b280      	uxth	r0, r0
 8001198:	f000 fb38 	bl	800180c <M_SetSpeed>
}
 800119c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80011a0:	200000a4 	.word	0x200000a4
 80011a4:	200000ac 	.word	0x200000ac
 80011a8:	10624dd3 	.word	0x10624dd3
 80011ac:	2000009c 	.word	0x2000009c
 80011b0:	20000098 	.word	0x20000098
 80011b4:	200000a0 	.word	0x200000a0
 80011b8:	200000a8 	.word	0x200000a8
 80011bc:	2000000c 	.word	0x2000000c
 80011c0:	20000006 	.word	0x20000006
 80011c4:	40240000 	.word	0x40240000
 80011c8:	200000b8 	.word	0x200000b8
 80011cc:	20000008 	.word	0x20000008
 80011d0:	20000005 	.word	0x20000005
 80011d4:	200000b4 	.word	0x200000b4
 80011d8:	200000bc 	.word	0x200000bc
 80011dc:	20000004 	.word	0x20000004
 80011e0:	200000b0 	.word	0x200000b0
 80011e4:	20000000 	.word	0x20000000
 80011e8:	20000090 	.word	0x20000090
 80011ec:	2000008c 	.word	0x2000008c
 80011f0:	fffffd44 	.word	0xfffffd44

080011f4 <Normalize_Sensors>:


uint16_t Normalize_Sensors(uint16_t raw, uint8_t i) {
    if (BLACK[i] == WHITE[i]) return 0; // avoid div by 0
 80011f4:	4b0d      	ldr	r3, [pc, #52]	@ (800122c <Normalize_Sensors+0x38>)
 80011f6:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 80011fa:	4a0d      	ldr	r2, [pc, #52]	@ (8001230 <Normalize_Sensors+0x3c>)
 80011fc:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 8001200:	4293      	cmp	r3, r2
 8001202:	d011      	beq.n	8001228 <Normalize_Sensors+0x34>

    int32_t val = ((int32_t)(raw - WHITE[i]) * 1000) / (BLACK[i] - WHITE[i]);
 8001204:	1a80      	subs	r0, r0, r2
 8001206:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800120a:	fb01 f000 	mul.w	r0, r1, r0
 800120e:	1a9b      	subs	r3, r3, r2
 8001210:	fb90 f0f3 	sdiv	r0, r0, r3

    if (val < 0) val = 0;
 8001214:	2800      	cmp	r0, #0
 8001216:	db04      	blt.n	8001222 <Normalize_Sensors+0x2e>
    if (val > 1000) val = 1000;
 8001218:	4288      	cmp	r0, r1
 800121a:	dd03      	ble.n	8001224 <Normalize_Sensors+0x30>
 800121c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001220:	e000      	b.n	8001224 <Normalize_Sensors+0x30>
    if (val < 0) val = 0;
 8001222:	2000      	movs	r0, #0

    return (uint16_t)val;
 8001224:	b280      	uxth	r0, r0
 8001226:	4770      	bx	lr
    if (BLACK[i] == WHITE[i]) return 0; // avoid div by 0
 8001228:	2000      	movs	r0, #0
}
 800122a:	4770      	bx	lr
 800122c:	080044e8 	.word	0x080044e8
 8001230:	080044f8 	.word	0x080044f8

08001234 <Read_Line>:
uint32_t Read_Line(void){
 8001234:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    for (uint8_t i = 0; i < 8; i++) {
 8001236:	2400      	movs	r4, #0
    uint32_t sum = 0;
 8001238:	4626      	mov	r6, r4
    uint32_t avg = 0;
 800123a:	4627      	mov	r7, r4
    for (uint8_t i = 0; i < 8; i++) {
 800123c:	e00e      	b.n	800125c <Read_Line+0x28>
        uint16_t value = Normalize_Sensors(adc_buffer[i+1], i);  // ADC value for sensor i
 800123e:	1c65      	adds	r5, r4, #1
 8001240:	4621      	mov	r1, r4
 8001242:	4b0a      	ldr	r3, [pc, #40]	@ (800126c <Read_Line+0x38>)
 8001244:	f833 0025 	ldrh.w	r0, [r3, r5, lsl #2]
 8001248:	f7ff ffd4 	bl	80011f4 <Normalize_Sensors>
        avg += (uint32_t)value * (i * 1000);
 800124c:	fb00 f404 	mul.w	r4, r0, r4
 8001250:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001254:	fb03 7704 	mla	r7, r3, r4, r7
        sum += value;
 8001258:	4406      	add	r6, r0
    for (uint8_t i = 0; i < 8; i++) {
 800125a:	b2ec      	uxtb	r4, r5
 800125c:	2c07      	cmp	r4, #7
 800125e:	d9ee      	bls.n	800123e <Read_Line+0xa>
    if (sum == 0) return 0;  // no line detected
 8001260:	b10e      	cbz	r6, 8001266 <Read_Line+0x32>
    return avg / sum;        // 0 … 7000
 8001262:	fbb7 f6f6 	udiv	r6, r7, r6
}
 8001266:	4630      	mov	r0, r6
 8001268:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800126a:	bf00      	nop
 800126c:	200000c0 	.word	0x200000c0

08001270 <Robot_Control>:
void Robot_Control(void){
 8001270:	b508      	push	{r3, lr}
  position = Read_Line();
 8001272:	f7ff ffdf 	bl	8001234 <Read_Line>
 8001276:	4b1b      	ldr	r3, [pc, #108]	@ (80012e4 <Robot_Control+0x74>)
 8001278:	8018      	strh	r0, [r3, #0]
  error = 3500 - position;
 800127a:	b283      	uxth	r3, r0
 800127c:	f5c3 635a 	rsb	r3, r3, #3488	@ 0xda0
 8001280:	330c      	adds	r3, #12
 8001282:	4a19      	ldr	r2, [pc, #100]	@ (80012e8 <Robot_Control+0x78>)
 8001284:	6013      	str	r3, [r2, #0]
  while(Get_Line() == 0){
 8001286:	e017      	b.n	80012b8 <Robot_Control+0x48>
      M_SetSpeed(0.4*MAX_SPEED, 0.7*MAX_SPEED, BACKWARD, FORWARD);
 8001288:	2301      	movs	r3, #1
 800128a:	2200      	movs	r2, #0
 800128c:	f240 11e9 	movw	r1, #489	@ 0x1e9
 8001290:	f44f 708c 	mov.w	r0, #280	@ 0x118
 8001294:	f000 faba 	bl	800180c <M_SetSpeed>
    adc_done_flag = false;
 8001298:	4b14      	ldr	r3, [pc, #80]	@ (80012ec <Robot_Control+0x7c>)
 800129a:	2200      	movs	r2, #0
 800129c:	701a      	strb	r2, [r3, #0]
    HAL_ADC_Start_DMA(&hadc1, adc_buffer, 9);
 800129e:	2209      	movs	r2, #9
 80012a0:	4913      	ldr	r1, [pc, #76]	@ (80012f0 <Robot_Control+0x80>)
 80012a2:	4814      	ldr	r0, [pc, #80]	@ (80012f4 <Robot_Control+0x84>)
 80012a4:	f000 fce0 	bl	8001c68 <HAL_ADC_Start_DMA>
    while(!adc_done_flag);
 80012a8:	4b10      	ldr	r3, [pc, #64]	@ (80012ec <Robot_Control+0x7c>)
 80012aa:	781b      	ldrb	r3, [r3, #0]
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d0fb      	beq.n	80012a8 <Robot_Control+0x38>
    position = Read_Line();
 80012b0:	f7ff ffc0 	bl	8001234 <Read_Line>
 80012b4:	4b0b      	ldr	r3, [pc, #44]	@ (80012e4 <Robot_Control+0x74>)
 80012b6:	8018      	strh	r0, [r3, #0]
  while(Get_Line() == 0){
 80012b8:	f7ff fe42 	bl	8000f40 <Get_Line>
 80012bc:	b960      	cbnz	r0, 80012d8 <Robot_Control+0x68>
    if(previousError<0){      
 80012be:	4b0e      	ldr	r3, [pc, #56]	@ (80012f8 <Robot_Control+0x88>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	dbe0      	blt.n	8001288 <Robot_Control+0x18>
      M_SetSpeed(0.7*MAX_SPEED, 0.4*MAX_SPEED, FORWARD, BACKWARD);
 80012c6:	2300      	movs	r3, #0
 80012c8:	2201      	movs	r2, #1
 80012ca:	f44f 718c 	mov.w	r1, #280	@ 0x118
 80012ce:	f240 10e9 	movw	r0, #489	@ 0x1e9
 80012d2:	f000 fa9b 	bl	800180c <M_SetSpeed>
 80012d6:	e7df      	b.n	8001298 <Robot_Control+0x28>
  PID_Linefollow(error);
 80012d8:	4b03      	ldr	r3, [pc, #12]	@ (80012e8 <Robot_Control+0x78>)
 80012da:	6818      	ldr	r0, [r3, #0]
 80012dc:	f7ff fe70 	bl	8000fc0 <PID_Linefollow>
}
 80012e0:	bd08      	pop	{r3, pc}
 80012e2:	bf00      	nop
 80012e4:	200000a8 	.word	0x200000a8
 80012e8:	20000094 	.word	0x20000094
 80012ec:	20000088 	.word	0x20000088
 80012f0:	200000c0 	.word	0x200000c0
 80012f4:	200001b8 	.word	0x200001b8
 80012f8:	20000098 	.word	0x20000098

080012fc <Error_Handler>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012fc:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012fe:	e7fe      	b.n	80012fe <Error_Handler+0x2>

08001300 <MX_ADC1_Init>:
{
 8001300:	b500      	push	{lr}
 8001302:	b085      	sub	sp, #20
  ADC_ChannelConfTypeDef sConfig = {0};
 8001304:	2300      	movs	r3, #0
 8001306:	9301      	str	r3, [sp, #4]
 8001308:	9302      	str	r3, [sp, #8]
 800130a:	9303      	str	r3, [sp, #12]
  hadc1.Instance = ADC1;
 800130c:	483b      	ldr	r0, [pc, #236]	@ (80013fc <MX_ADC1_Init+0xfc>)
 800130e:	4a3c      	ldr	r2, [pc, #240]	@ (8001400 <MX_ADC1_Init+0x100>)
 8001310:	6002      	str	r2, [r0, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001312:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001316:	6082      	str	r2, [r0, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001318:	7303      	strb	r3, [r0, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800131a:	7503      	strb	r3, [r0, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800131c:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8001320:	61c2      	str	r2, [r0, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001322:	6043      	str	r3, [r0, #4]
  hadc1.Init.NbrOfConversion = 9;
 8001324:	2309      	movs	r3, #9
 8001326:	6103      	str	r3, [r0, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001328:	f000 fd36 	bl	8001d98 <HAL_ADC_Init>
 800132c:	2800      	cmp	r0, #0
 800132e:	d150      	bne.n	80013d2 <MX_ADC1_Init+0xd2>
  sConfig.Channel = ADC_CHANNEL_1;
 8001330:	2301      	movs	r3, #1
 8001332:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001334:	9302      	str	r3, [sp, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 8001336:	9303      	str	r3, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001338:	a901      	add	r1, sp, #4
 800133a:	4830      	ldr	r0, [pc, #192]	@ (80013fc <MX_ADC1_Init+0xfc>)
 800133c:	f000 fbb0 	bl	8001aa0 <HAL_ADC_ConfigChannel>
 8001340:	2800      	cmp	r0, #0
 8001342:	d148      	bne.n	80013d6 <MX_ADC1_Init+0xd6>
  sConfig.Channel = ADC_CHANNEL_2;
 8001344:	2302      	movs	r3, #2
 8001346:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001348:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800134a:	a901      	add	r1, sp, #4
 800134c:	482b      	ldr	r0, [pc, #172]	@ (80013fc <MX_ADC1_Init+0xfc>)
 800134e:	f000 fba7 	bl	8001aa0 <HAL_ADC_ConfigChannel>
 8001352:	2800      	cmp	r0, #0
 8001354:	d141      	bne.n	80013da <MX_ADC1_Init+0xda>
  sConfig.Channel = ADC_CHANNEL_3;
 8001356:	2303      	movs	r3, #3
 8001358:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800135a:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800135c:	a901      	add	r1, sp, #4
 800135e:	4827      	ldr	r0, [pc, #156]	@ (80013fc <MX_ADC1_Init+0xfc>)
 8001360:	f000 fb9e 	bl	8001aa0 <HAL_ADC_ConfigChannel>
 8001364:	2800      	cmp	r0, #0
 8001366:	d13a      	bne.n	80013de <MX_ADC1_Init+0xde>
  sConfig.Channel = ADC_CHANNEL_4;
 8001368:	2304      	movs	r3, #4
 800136a:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 800136c:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800136e:	eb0d 0103 	add.w	r1, sp, r3
 8001372:	4822      	ldr	r0, [pc, #136]	@ (80013fc <MX_ADC1_Init+0xfc>)
 8001374:	f000 fb94 	bl	8001aa0 <HAL_ADC_ConfigChannel>
 8001378:	2800      	cmp	r0, #0
 800137a:	d132      	bne.n	80013e2 <MX_ADC1_Init+0xe2>
  sConfig.Channel = ADC_CHANNEL_5;
 800137c:	2305      	movs	r3, #5
 800137e:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8001380:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001382:	a901      	add	r1, sp, #4
 8001384:	481d      	ldr	r0, [pc, #116]	@ (80013fc <MX_ADC1_Init+0xfc>)
 8001386:	f000 fb8b 	bl	8001aa0 <HAL_ADC_ConfigChannel>
 800138a:	bb60      	cbnz	r0, 80013e6 <MX_ADC1_Init+0xe6>
  sConfig.Channel = ADC_CHANNEL_6;
 800138c:	2306      	movs	r3, #6
 800138e:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8001390:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001392:	a901      	add	r1, sp, #4
 8001394:	4819      	ldr	r0, [pc, #100]	@ (80013fc <MX_ADC1_Init+0xfc>)
 8001396:	f000 fb83 	bl	8001aa0 <HAL_ADC_ConfigChannel>
 800139a:	bb30      	cbnz	r0, 80013ea <MX_ADC1_Init+0xea>
  sConfig.Channel = ADC_CHANNEL_7;
 800139c:	2307      	movs	r3, #7
 800139e:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 80013a0:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013a2:	a901      	add	r1, sp, #4
 80013a4:	4815      	ldr	r0, [pc, #84]	@ (80013fc <MX_ADC1_Init+0xfc>)
 80013a6:	f000 fb7b 	bl	8001aa0 <HAL_ADC_ConfigChannel>
 80013aa:	bb00      	cbnz	r0, 80013ee <MX_ADC1_Init+0xee>
  sConfig.Channel = ADC_CHANNEL_8;
 80013ac:	2308      	movs	r3, #8
 80013ae:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 80013b0:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013b2:	a901      	add	r1, sp, #4
 80013b4:	4811      	ldr	r0, [pc, #68]	@ (80013fc <MX_ADC1_Init+0xfc>)
 80013b6:	f000 fb73 	bl	8001aa0 <HAL_ADC_ConfigChannel>
 80013ba:	b9d0      	cbnz	r0, 80013f2 <MX_ADC1_Init+0xf2>
  sConfig.Channel = ADC_CHANNEL_9;
 80013bc:	2309      	movs	r3, #9
 80013be:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 80013c0:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013c2:	a901      	add	r1, sp, #4
 80013c4:	480d      	ldr	r0, [pc, #52]	@ (80013fc <MX_ADC1_Init+0xfc>)
 80013c6:	f000 fb6b 	bl	8001aa0 <HAL_ADC_ConfigChannel>
 80013ca:	b9a0      	cbnz	r0, 80013f6 <MX_ADC1_Init+0xf6>
}
 80013cc:	b005      	add	sp, #20
 80013ce:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80013d2:	f7ff ff93 	bl	80012fc <Error_Handler>
    Error_Handler();
 80013d6:	f7ff ff91 	bl	80012fc <Error_Handler>
    Error_Handler();
 80013da:	f7ff ff8f 	bl	80012fc <Error_Handler>
    Error_Handler();
 80013de:	f7ff ff8d 	bl	80012fc <Error_Handler>
    Error_Handler();
 80013e2:	f7ff ff8b 	bl	80012fc <Error_Handler>
    Error_Handler();
 80013e6:	f7ff ff89 	bl	80012fc <Error_Handler>
    Error_Handler();
 80013ea:	f7ff ff87 	bl	80012fc <Error_Handler>
    Error_Handler();
 80013ee:	f7ff ff85 	bl	80012fc <Error_Handler>
    Error_Handler();
 80013f2:	f7ff ff83 	bl	80012fc <Error_Handler>
    Error_Handler();
 80013f6:	f7ff ff81 	bl	80012fc <Error_Handler>
 80013fa:	bf00      	nop
 80013fc:	200001b8 	.word	0x200001b8
 8001400:	40012400 	.word	0x40012400

08001404 <MX_TIM1_Init>:
{
 8001404:	b510      	push	{r4, lr}
 8001406:	b096      	sub	sp, #88	@ 0x58
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001408:	2400      	movs	r4, #0
 800140a:	9412      	str	r4, [sp, #72]	@ 0x48
 800140c:	9413      	str	r4, [sp, #76]	@ 0x4c
 800140e:	9414      	str	r4, [sp, #80]	@ 0x50
 8001410:	9415      	str	r4, [sp, #84]	@ 0x54
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001412:	9410      	str	r4, [sp, #64]	@ 0x40
 8001414:	9411      	str	r4, [sp, #68]	@ 0x44
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001416:	9409      	str	r4, [sp, #36]	@ 0x24
 8001418:	940a      	str	r4, [sp, #40]	@ 0x28
 800141a:	940b      	str	r4, [sp, #44]	@ 0x2c
 800141c:	940c      	str	r4, [sp, #48]	@ 0x30
 800141e:	940d      	str	r4, [sp, #52]	@ 0x34
 8001420:	940e      	str	r4, [sp, #56]	@ 0x38
 8001422:	940f      	str	r4, [sp, #60]	@ 0x3c
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001424:	2220      	movs	r2, #32
 8001426:	4621      	mov	r1, r4
 8001428:	a801      	add	r0, sp, #4
 800142a:	f002 f864 	bl	80034f6 <memset>
  htim1.Instance = TIM1;
 800142e:	482e      	ldr	r0, [pc, #184]	@ (80014e8 <MX_TIM1_Init+0xe4>)
 8001430:	4b2e      	ldr	r3, [pc, #184]	@ (80014ec <MX_TIM1_Init+0xe8>)
 8001432:	6003      	str	r3, [r0, #0]
  htim1.Init.Prescaler = 0;
 8001434:	6044      	str	r4, [r0, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001436:	6084      	str	r4, [r0, #8]
  htim1.Init.Period = 799;
 8001438:	f240 331f 	movw	r3, #799	@ 0x31f
 800143c:	60c3      	str	r3, [r0, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800143e:	6104      	str	r4, [r0, #16]
  htim1.Init.RepetitionCounter = 0;
 8001440:	6144      	str	r4, [r0, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001442:	6184      	str	r4, [r0, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001444:	f001 fd96 	bl	8002f74 <HAL_TIM_Base_Init>
 8001448:	2800      	cmp	r0, #0
 800144a:	d13e      	bne.n	80014ca <MX_TIM1_Init+0xc6>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800144c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001450:	9312      	str	r3, [sp, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001452:	a912      	add	r1, sp, #72	@ 0x48
 8001454:	4824      	ldr	r0, [pc, #144]	@ (80014e8 <MX_TIM1_Init+0xe4>)
 8001456:	f001 fe9b 	bl	8003190 <HAL_TIM_ConfigClockSource>
 800145a:	2800      	cmp	r0, #0
 800145c:	d137      	bne.n	80014ce <MX_TIM1_Init+0xca>
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800145e:	4822      	ldr	r0, [pc, #136]	@ (80014e8 <MX_TIM1_Init+0xe4>)
 8001460:	f001 fdb4 	bl	8002fcc <HAL_TIM_PWM_Init>
 8001464:	2800      	cmp	r0, #0
 8001466:	d134      	bne.n	80014d2 <MX_TIM1_Init+0xce>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001468:	2300      	movs	r3, #0
 800146a:	9310      	str	r3, [sp, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800146c:	9311      	str	r3, [sp, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800146e:	a910      	add	r1, sp, #64	@ 0x40
 8001470:	481d      	ldr	r0, [pc, #116]	@ (80014e8 <MX_TIM1_Init+0xe4>)
 8001472:	f001 ff99 	bl	80033a8 <HAL_TIMEx_MasterConfigSynchronization>
 8001476:	2800      	cmp	r0, #0
 8001478:	d12d      	bne.n	80014d6 <MX_TIM1_Init+0xd2>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800147a:	2360      	movs	r3, #96	@ 0x60
 800147c:	9309      	str	r3, [sp, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 800147e:	2200      	movs	r2, #0
 8001480:	920a      	str	r2, [sp, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001482:	920b      	str	r2, [sp, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001484:	920c      	str	r2, [sp, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001486:	920d      	str	r2, [sp, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001488:	920e      	str	r2, [sp, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800148a:	920f      	str	r2, [sp, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800148c:	a909      	add	r1, sp, #36	@ 0x24
 800148e:	4816      	ldr	r0, [pc, #88]	@ (80014e8 <MX_TIM1_Init+0xe4>)
 8001490:	f001 fe04 	bl	800309c <HAL_TIM_PWM_ConfigChannel>
 8001494:	bb08      	cbnz	r0, 80014da <MX_TIM1_Init+0xd6>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001496:	2204      	movs	r2, #4
 8001498:	a909      	add	r1, sp, #36	@ 0x24
 800149a:	4813      	ldr	r0, [pc, #76]	@ (80014e8 <MX_TIM1_Init+0xe4>)
 800149c:	f001 fdfe 	bl	800309c <HAL_TIM_PWM_ConfigChannel>
 80014a0:	b9e8      	cbnz	r0, 80014de <MX_TIM1_Init+0xda>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80014a2:	2300      	movs	r3, #0
 80014a4:	9301      	str	r3, [sp, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80014a6:	9302      	str	r3, [sp, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80014a8:	9303      	str	r3, [sp, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80014aa:	9304      	str	r3, [sp, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80014ac:	9305      	str	r3, [sp, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80014ae:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80014b2:	9206      	str	r2, [sp, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80014b4:	9308      	str	r3, [sp, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80014b6:	a901      	add	r1, sp, #4
 80014b8:	480b      	ldr	r0, [pc, #44]	@ (80014e8 <MX_TIM1_Init+0xe4>)
 80014ba:	f001 ffaf 	bl	800341c <HAL_TIMEx_ConfigBreakDeadTime>
 80014be:	b980      	cbnz	r0, 80014e2 <MX_TIM1_Init+0xde>
  HAL_TIM_MspPostInit(&htim1);
 80014c0:	4809      	ldr	r0, [pc, #36]	@ (80014e8 <MX_TIM1_Init+0xe4>)
 80014c2:	f001 f86f 	bl	80025a4 <HAL_TIM_MspPostInit>
}
 80014c6:	b016      	add	sp, #88	@ 0x58
 80014c8:	bd10      	pop	{r4, pc}
    Error_Handler();
 80014ca:	f7ff ff17 	bl	80012fc <Error_Handler>
    Error_Handler();
 80014ce:	f7ff ff15 	bl	80012fc <Error_Handler>
    Error_Handler();
 80014d2:	f7ff ff13 	bl	80012fc <Error_Handler>
    Error_Handler();
 80014d6:	f7ff ff11 	bl	80012fc <Error_Handler>
    Error_Handler();
 80014da:	f7ff ff0f 	bl	80012fc <Error_Handler>
    Error_Handler();
 80014de:	f7ff ff0d 	bl	80012fc <Error_Handler>
    Error_Handler();
 80014e2:	f7ff ff0b 	bl	80012fc <Error_Handler>
 80014e6:	bf00      	nop
 80014e8:	2000012c 	.word	0x2000012c
 80014ec:	40012c00 	.word	0x40012c00

080014f0 <MX_TIM2_Init>:
{
 80014f0:	b500      	push	{lr}
 80014f2:	b08f      	sub	sp, #60	@ 0x3c
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014f4:	2300      	movs	r3, #0
 80014f6:	930a      	str	r3, [sp, #40]	@ 0x28
 80014f8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80014fa:	930c      	str	r3, [sp, #48]	@ 0x30
 80014fc:	930d      	str	r3, [sp, #52]	@ 0x34
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014fe:	9308      	str	r3, [sp, #32]
 8001500:	9309      	str	r3, [sp, #36]	@ 0x24
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001502:	9301      	str	r3, [sp, #4]
 8001504:	9302      	str	r3, [sp, #8]
 8001506:	9303      	str	r3, [sp, #12]
 8001508:	9304      	str	r3, [sp, #16]
 800150a:	9305      	str	r3, [sp, #20]
 800150c:	9306      	str	r3, [sp, #24]
 800150e:	9307      	str	r3, [sp, #28]
  htim2.Instance = TIM2;
 8001510:	4822      	ldr	r0, [pc, #136]	@ (800159c <MX_TIM2_Init+0xac>)
 8001512:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001516:	6002      	str	r2, [r0, #0]
  htim2.Init.Prescaler = 0;
 8001518:	6043      	str	r3, [r0, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800151a:	6083      	str	r3, [r0, #8]
  htim2.Init.Period = 799;
 800151c:	f240 321f 	movw	r2, #799	@ 0x31f
 8001520:	60c2      	str	r2, [r0, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001522:	6103      	str	r3, [r0, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001524:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001526:	f001 fd25 	bl	8002f74 <HAL_TIM_Base_Init>
 800152a:	bb58      	cbnz	r0, 8001584 <MX_TIM2_Init+0x94>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800152c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001530:	930a      	str	r3, [sp, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001532:	a90a      	add	r1, sp, #40	@ 0x28
 8001534:	4819      	ldr	r0, [pc, #100]	@ (800159c <MX_TIM2_Init+0xac>)
 8001536:	f001 fe2b 	bl	8003190 <HAL_TIM_ConfigClockSource>
 800153a:	bb28      	cbnz	r0, 8001588 <MX_TIM2_Init+0x98>
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800153c:	4817      	ldr	r0, [pc, #92]	@ (800159c <MX_TIM2_Init+0xac>)
 800153e:	f001 fd45 	bl	8002fcc <HAL_TIM_PWM_Init>
 8001542:	bb18      	cbnz	r0, 800158c <MX_TIM2_Init+0x9c>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001544:	2300      	movs	r3, #0
 8001546:	9308      	str	r3, [sp, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001548:	9309      	str	r3, [sp, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800154a:	a908      	add	r1, sp, #32
 800154c:	4813      	ldr	r0, [pc, #76]	@ (800159c <MX_TIM2_Init+0xac>)
 800154e:	f001 ff2b 	bl	80033a8 <HAL_TIMEx_MasterConfigSynchronization>
 8001552:	b9e8      	cbnz	r0, 8001590 <MX_TIM2_Init+0xa0>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001554:	2360      	movs	r3, #96	@ 0x60
 8001556:	9301      	str	r3, [sp, #4]
  sConfigOC.Pulse = 0;
 8001558:	2200      	movs	r2, #0
 800155a:	9202      	str	r2, [sp, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800155c:	9203      	str	r2, [sp, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800155e:	9205      	str	r2, [sp, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001560:	a901      	add	r1, sp, #4
 8001562:	480e      	ldr	r0, [pc, #56]	@ (800159c <MX_TIM2_Init+0xac>)
 8001564:	f001 fd9a 	bl	800309c <HAL_TIM_PWM_ConfigChannel>
 8001568:	b9a0      	cbnz	r0, 8001594 <MX_TIM2_Init+0xa4>
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800156a:	2204      	movs	r2, #4
 800156c:	eb0d 0102 	add.w	r1, sp, r2
 8001570:	480a      	ldr	r0, [pc, #40]	@ (800159c <MX_TIM2_Init+0xac>)
 8001572:	f001 fd93 	bl	800309c <HAL_TIM_PWM_ConfigChannel>
 8001576:	b978      	cbnz	r0, 8001598 <MX_TIM2_Init+0xa8>
  HAL_TIM_MspPostInit(&htim2);
 8001578:	4808      	ldr	r0, [pc, #32]	@ (800159c <MX_TIM2_Init+0xac>)
 800157a:	f001 f813 	bl	80025a4 <HAL_TIM_MspPostInit>
}
 800157e:	b00f      	add	sp, #60	@ 0x3c
 8001580:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8001584:	f7ff feba 	bl	80012fc <Error_Handler>
    Error_Handler();
 8001588:	f7ff feb8 	bl	80012fc <Error_Handler>
    Error_Handler();
 800158c:	f7ff feb6 	bl	80012fc <Error_Handler>
    Error_Handler();
 8001590:	f7ff feb4 	bl	80012fc <Error_Handler>
    Error_Handler();
 8001594:	f7ff feb2 	bl	80012fc <Error_Handler>
    Error_Handler();
 8001598:	f7ff feb0 	bl	80012fc <Error_Handler>
 800159c:	200000e4 	.word	0x200000e4

080015a0 <SystemClock_Config>:
{
 80015a0:	b500      	push	{lr}
 80015a2:	b093      	sub	sp, #76	@ 0x4c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015a4:	2228      	movs	r2, #40	@ 0x28
 80015a6:	2100      	movs	r1, #0
 80015a8:	a808      	add	r0, sp, #32
 80015aa:	f001 ffa4 	bl	80034f6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015ae:	2300      	movs	r3, #0
 80015b0:	9303      	str	r3, [sp, #12]
 80015b2:	9304      	str	r3, [sp, #16]
 80015b4:	9305      	str	r3, [sp, #20]
 80015b6:	9306      	str	r3, [sp, #24]
 80015b8:	9307      	str	r3, [sp, #28]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80015ba:	9300      	str	r3, [sp, #0]
 80015bc:	9301      	str	r3, [sp, #4]
 80015be:	9302      	str	r3, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80015c0:	2302      	movs	r3, #2
 80015c2:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80015c4:	2201      	movs	r2, #1
 80015c6:	920c      	str	r2, [sp, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80015c8:	2210      	movs	r2, #16
 80015ca:	920d      	str	r2, [sp, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015cc:	930f      	str	r3, [sp, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80015ce:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80015d2:	9311      	str	r3, [sp, #68]	@ 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015d4:	a808      	add	r0, sp, #32
 80015d6:	f001 f85b 	bl	8002690 <HAL_RCC_OscConfig>
 80015da:	b9b0      	cbnz	r0, 800160a <SystemClock_Config+0x6a>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015dc:	230f      	movs	r3, #15
 80015de:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015e0:	2302      	movs	r3, #2
 80015e2:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015e4:	2100      	movs	r1, #0
 80015e6:	9105      	str	r1, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80015e8:	9106      	str	r1, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80015ea:	9107      	str	r1, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80015ec:	a803      	add	r0, sp, #12
 80015ee:	f001 fa81 	bl	8002af4 <HAL_RCC_ClockConfig>
 80015f2:	b960      	cbnz	r0, 800160e <SystemClock_Config+0x6e>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80015f4:	2302      	movs	r3, #2
 80015f6:	9300      	str	r3, [sp, #0]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 80015f8:	2300      	movs	r3, #0
 80015fa:	9302      	str	r3, [sp, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80015fc:	4668      	mov	r0, sp
 80015fe:	f001 fb03 	bl	8002c08 <HAL_RCCEx_PeriphCLKConfig>
 8001602:	b930      	cbnz	r0, 8001612 <SystemClock_Config+0x72>
}
 8001604:	b013      	add	sp, #76	@ 0x4c
 8001606:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 800160a:	f7ff fe77 	bl	80012fc <Error_Handler>
    Error_Handler();
 800160e:	f7ff fe75 	bl	80012fc <Error_Handler>
    Error_Handler();
 8001612:	f7ff fe73 	bl	80012fc <Error_Handler>
	...

08001618 <main>:
{
 8001618:	b510      	push	{r4, lr}
  HAL_Init();
 800161a:	f000 f94f 	bl	80018bc <HAL_Init>
  SystemClock_Config();
 800161e:	f7ff ffbf 	bl	80015a0 <SystemClock_Config>
  MX_GPIO_Init();
 8001622:	f7ff fbe5 	bl	8000df0 <MX_GPIO_Init>
  MX_DMA_Init();
 8001626:	f7ff fc2b 	bl	8000e80 <MX_DMA_Init>
  MX_ADC1_Init();
 800162a:	f7ff fe69 	bl	8001300 <MX_ADC1_Init>
  MX_TIM1_Init();
 800162e:	f7ff fee9 	bl	8001404 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001632:	f7ff ff5d 	bl	80014f0 <MX_TIM2_Init>
  HAL_GPIO_WritePin(BUZZ_GPIO_Port, BUZZ_Pin, GPIO_PIN_SET);
 8001636:	4c4e      	ldr	r4, [pc, #312]	@ (8001770 <main+0x158>)
 8001638:	2201      	movs	r2, #1
 800163a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800163e:	4620      	mov	r0, r4
 8001640:	f000 fefb 	bl	800243a <HAL_GPIO_WritePin>
  HAL_Delay(300);
 8001644:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8001648:	f000 f956 	bl	80018f8 <HAL_Delay>
  HAL_GPIO_WritePin(BUZZ_GPIO_Port, BUZZ_Pin, GPIO_PIN_RESET);
 800164c:	2200      	movs	r2, #0
 800164e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001652:	4620      	mov	r0, r4
 8001654:	f000 fef1 	bl	800243a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_ON_GPIO_Port, LED_ON_Pin, GPIO_PIN_SET);
 8001658:	2201      	movs	r2, #1
 800165a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800165e:	4620      	mov	r0, r4
 8001660:	f000 feeb 	bl	800243a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(IR_EN_GPIO_Port, IR_EN_Pin, GPIO_PIN_SET);
 8001664:	2201      	movs	r2, #1
 8001666:	2120      	movs	r1, #32
 8001668:	4620      	mov	r0, r4
 800166a:	f000 fee6 	bl	800243a <HAL_GPIO_WritePin>
  HAL_ADC_Start_DMA(&hadc1, adc_buffer, 9);
 800166e:	2209      	movs	r2, #9
 8001670:	4940      	ldr	r1, [pc, #256]	@ (8001774 <main+0x15c>)
 8001672:	4841      	ldr	r0, [pc, #260]	@ (8001778 <main+0x160>)
 8001674:	f000 faf8 	bl	8001c68 <HAL_ADC_Start_DMA>
  M_Init();
 8001678:	f000 f884 	bl	8001784 <M_Init>
  while(!HAL_GPIO_ReadPin(BTT_ON_GPIO_Port, BTT_ON_Pin));
 800167c:	2101      	movs	r1, #1
 800167e:	483f      	ldr	r0, [pc, #252]	@ (800177c <main+0x164>)
 8001680:	f000 fed4 	bl	800242c <HAL_GPIO_ReadPin>
 8001684:	2800      	cmp	r0, #0
 8001686:	d0f9      	beq.n	800167c <main+0x64>
  HAL_GPIO_WritePin(BUZZ_GPIO_Port, BUZZ_Pin, GPIO_PIN_SET);
 8001688:	4c39      	ldr	r4, [pc, #228]	@ (8001770 <main+0x158>)
 800168a:	2201      	movs	r2, #1
 800168c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001690:	4620      	mov	r0, r4
 8001692:	f000 fed2 	bl	800243a <HAL_GPIO_WritePin>
  HAL_Delay(300);
 8001696:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800169a:	f000 f92d 	bl	80018f8 <HAL_Delay>
  HAL_GPIO_WritePin(BUZZ_GPIO_Port, BUZZ_Pin, GPIO_PIN_RESET);
 800169e:	2200      	movs	r2, #0
 80016a0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80016a4:	4620      	mov	r0, r4
 80016a6:	f000 fec8 	bl	800243a <HAL_GPIO_WritePin>
  HAL_Delay(500);
 80016aa:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80016ae:	f000 f923 	bl	80018f8 <HAL_Delay>
  HAL_GPIO_WritePin(BUZZ_GPIO_Port, BUZZ_Pin, GPIO_PIN_SET);
 80016b2:	2201      	movs	r2, #1
 80016b4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80016b8:	4620      	mov	r0, r4
 80016ba:	f000 febe 	bl	800243a <HAL_GPIO_WritePin>
  HAL_Delay(200);
 80016be:	20c8      	movs	r0, #200	@ 0xc8
 80016c0:	f000 f91a 	bl	80018f8 <HAL_Delay>
  HAL_GPIO_WritePin(BUZZ_GPIO_Port, BUZZ_Pin, GPIO_PIN_RESET);
 80016c4:	2200      	movs	r2, #0
 80016c6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80016ca:	4620      	mov	r0, r4
 80016cc:	f000 feb5 	bl	800243a <HAL_GPIO_WritePin>
  HAL_Delay(500);
 80016d0:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80016d4:	f000 f910 	bl	80018f8 <HAL_Delay>
  HAL_GPIO_WritePin(BUZZ_GPIO_Port, BUZZ_Pin, GPIO_PIN_SET);
 80016d8:	2201      	movs	r2, #1
 80016da:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80016de:	4620      	mov	r0, r4
 80016e0:	f000 feab 	bl	800243a <HAL_GPIO_WritePin>
  HAL_Delay(100);
 80016e4:	2064      	movs	r0, #100	@ 0x64
 80016e6:	f000 f907 	bl	80018f8 <HAL_Delay>
  HAL_GPIO_WritePin(BUZZ_GPIO_Port, BUZZ_Pin, GPIO_PIN_RESET);
 80016ea:	2200      	movs	r2, #0
 80016ec:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80016f0:	4620      	mov	r0, r4
 80016f2:	f000 fea2 	bl	800243a <HAL_GPIO_WritePin>
  HAL_Delay(400);
 80016f6:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 80016fa:	f000 f8fd 	bl	80018f8 <HAL_Delay>
 80016fe:	e00a      	b.n	8001716 <main+0xfe>
        HAL_GPIO_WritePin(LED_ACT_GPIO_Port, LED_ACT_Pin, GPIO_PIN_SET);
 8001700:	2201      	movs	r2, #1
 8001702:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001706:	481a      	ldr	r0, [pc, #104]	@ (8001770 <main+0x158>)
 8001708:	f000 fe97 	bl	800243a <HAL_GPIO_WritePin>
    if(HAL_GPIO_ReadPin(BTT_ON_GPIO_Port, BTT_ON_Pin)){
 800170c:	2101      	movs	r1, #1
 800170e:	481b      	ldr	r0, [pc, #108]	@ (800177c <main+0x164>)
 8001710:	f000 fe8c 	bl	800242c <HAL_GPIO_ReadPin>
 8001714:	b9d0      	cbnz	r0, 800174c <main+0x134>
    if(adc_done_flag){
 8001716:	4b1a      	ldr	r3, [pc, #104]	@ (8001780 <main+0x168>)
 8001718:	781b      	ldrb	r3, [r3, #0]
 800171a:	2b00      	cmp	r3, #0
 800171c:	d0f6      	beq.n	800170c <main+0xf4>
      adc_done_flag = false;
 800171e:	4b18      	ldr	r3, [pc, #96]	@ (8001780 <main+0x168>)
 8001720:	2200      	movs	r2, #0
 8001722:	701a      	strb	r2, [r3, #0]
      Robot_Control();
 8001724:	f7ff fda4 	bl	8001270 <Robot_Control>
      HAL_ADC_Start_DMA(&hadc1, adc_buffer, 9);
 8001728:	2209      	movs	r2, #9
 800172a:	4912      	ldr	r1, [pc, #72]	@ (8001774 <main+0x15c>)
 800172c:	4812      	ldr	r0, [pc, #72]	@ (8001778 <main+0x160>)
 800172e:	f000 fa9b 	bl	8001c68 <HAL_ADC_Start_DMA>
      if(Get_Line() == 0 || Get_Line() == 255){
 8001732:	f7ff fc05 	bl	8000f40 <Get_Line>
 8001736:	2800      	cmp	r0, #0
 8001738:	d0e2      	beq.n	8001700 <main+0xe8>
 800173a:	28ff      	cmp	r0, #255	@ 0xff
 800173c:	d0e0      	beq.n	8001700 <main+0xe8>
        HAL_GPIO_WritePin(LED_ACT_GPIO_Port, LED_ACT_Pin, GPIO_PIN_RESET);
 800173e:	2200      	movs	r2, #0
 8001740:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001744:	480a      	ldr	r0, [pc, #40]	@ (8001770 <main+0x158>)
 8001746:	f000 fe78 	bl	800243a <HAL_GPIO_WritePin>
 800174a:	e7df      	b.n	800170c <main+0xf4>
      M_Disable();
 800174c:	f000 f854 	bl	80017f8 <M_Disable>
      HAL_GPIO_WritePin(LED_ON_GPIO_Port, LED_ON_Pin, GPIO_PIN_RESET);
 8001750:	4c07      	ldr	r4, [pc, #28]	@ (8001770 <main+0x158>)
 8001752:	2200      	movs	r2, #0
 8001754:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001758:	4620      	mov	r0, r4
 800175a:	f000 fe6e 	bl	800243a <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(IR_EN_GPIO_Port, IR_EN_Pin, GPIO_PIN_RESET);
 800175e:	2200      	movs	r2, #0
 8001760:	2120      	movs	r1, #32
 8001762:	4620      	mov	r0, r4
 8001764:	f000 fe69 	bl	800243a <HAL_GPIO_WritePin>
      HAL_NVIC_SystemReset();
 8001768:	f000 fc12 	bl	8001f90 <HAL_NVIC_SystemReset>
}
 800176c:	2000      	movs	r0, #0
 800176e:	bd10      	pop	{r4, pc}
 8001770:	40010c00 	.word	0x40010c00
 8001774:	200000c0 	.word	0x200000c0
 8001778:	200001b8 	.word	0x200001b8
 800177c:	40010800 	.word	0x40010800
 8001780:	20000088 	.word	0x20000088

08001784 <M_Init>:
#include "main.h"

extern TIM_HandleTypeDef htim1;
extern TIM_HandleTypeDef htim2;

void M_Init(void){
 8001784:	b510      	push	{r4, lr}
    HAL_GPIO_WritePin(nSleep_GPIO_Port, nSleep_Pin, GPIO_PIN_SET);
 8001786:	4c18      	ldr	r4, [pc, #96]	@ (80017e8 <M_Init+0x64>)
 8001788:	2201      	movs	r2, #1
 800178a:	2110      	movs	r1, #16
 800178c:	4620      	mov	r0, r4
 800178e:	f000 fe54 	bl	800243a <HAL_GPIO_WritePin>
    HAL_Delay(1);
 8001792:	2001      	movs	r0, #1
 8001794:	f000 f8b0 	bl	80018f8 <HAL_Delay>
    HAL_GPIO_WritePin(nSleep_GPIO_Port, nSleep_Pin, GPIO_PIN_RESET);
 8001798:	2200      	movs	r2, #0
 800179a:	2110      	movs	r1, #16
 800179c:	4620      	mov	r0, r4
 800179e:	f000 fe4c 	bl	800243a <HAL_GPIO_WritePin>
    HAL_Delay(1);
 80017a2:	2001      	movs	r0, #1
 80017a4:	f000 f8a8 	bl	80018f8 <HAL_Delay>
    HAL_GPIO_WritePin(nSleep_GPIO_Port, nSleep_Pin, GPIO_PIN_SET);
 80017a8:	2201      	movs	r2, #1
 80017aa:	2110      	movs	r1, #16
 80017ac:	4620      	mov	r0, r4
 80017ae:	f000 fe44 	bl	800243a <HAL_GPIO_WritePin>
    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80017b2:	4c0e      	ldr	r4, [pc, #56]	@ (80017ec <M_Init+0x68>)
 80017b4:	2100      	movs	r1, #0
 80017b6:	4620      	mov	r0, r4
 80017b8:	f001 fd78 	bl	80032ac <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80017bc:	2104      	movs	r1, #4
 80017be:	4620      	mov	r0, r4
 80017c0:	f001 fd74 	bl	80032ac <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80017c4:	4c0a      	ldr	r4, [pc, #40]	@ (80017f0 <M_Init+0x6c>)
 80017c6:	2100      	movs	r1, #0
 80017c8:	4620      	mov	r0, r4
 80017ca:	f001 fd6f 	bl	80032ac <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 80017ce:	2104      	movs	r1, #4
 80017d0:	4620      	mov	r0, r4
 80017d2:	f001 fd6b 	bl	80032ac <HAL_TIM_PWM_Start>

    TIM1->CCR1 = 0;
 80017d6:	4a07      	ldr	r2, [pc, #28]	@ (80017f4 <M_Init+0x70>)
 80017d8:	2300      	movs	r3, #0
 80017da:	6353      	str	r3, [r2, #52]	@ 0x34
    TIM1->CCR2 = 0;
 80017dc:	6393      	str	r3, [r2, #56]	@ 0x38
    TIM2->CCR1 = 0;
 80017de:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80017e2:	6353      	str	r3, [r2, #52]	@ 0x34
    TIM2->CCR2 = 0;
 80017e4:	6393      	str	r3, [r2, #56]	@ 0x38
}
 80017e6:	bd10      	pop	{r4, pc}
 80017e8:	40010c00 	.word	0x40010c00
 80017ec:	2000012c 	.word	0x2000012c
 80017f0:	200000e4 	.word	0x200000e4
 80017f4:	40012c00 	.word	0x40012c00

080017f8 <M_Disable>:

void M_Disable(void){
 80017f8:	b508      	push	{r3, lr}
    HAL_GPIO_WritePin(nSleep_GPIO_Port, nSleep_Pin, GPIO_PIN_RESET);
 80017fa:	2200      	movs	r2, #0
 80017fc:	2110      	movs	r1, #16
 80017fe:	4802      	ldr	r0, [pc, #8]	@ (8001808 <M_Disable+0x10>)
 8001800:	f000 fe1b 	bl	800243a <HAL_GPIO_WritePin>
}
 8001804:	bd08      	pop	{r3, pc}
 8001806:	bf00      	nop
 8001808:	40010c00 	.word	0x40010c00

0800180c <M_SetSpeed>:

void M_Enable(void){
    HAL_GPIO_WritePin(nSleep_GPIO_Port, nSleep_Pin, GPIO_PIN_SET);
}

void M_SetSpeed(uint16_t spd_a, uint16_t spd_b, bool dir_a, bool dir_b){
 800180c:	b470      	push	{r4, r5, r6}
    TIM1->CCR1 = 799-spd_a;
 800180e:	f240 341f 	movw	r4, #799	@ 0x31f
 8001812:	1a26      	subs	r6, r4, r0
 8001814:	4d15      	ldr	r5, [pc, #84]	@ (800186c <M_SetSpeed+0x60>)
 8001816:	636e      	str	r6, [r5, #52]	@ 0x34
    TIM1->CCR2 = 799-spd_a;
 8001818:	63ae      	str	r6, [r5, #56]	@ 0x38
    TIM2->CCR1 = 799-spd_b;
 800181a:	1a64      	subs	r4, r4, r1
 800181c:	f04f 4c80 	mov.w	ip, #1073741824	@ 0x40000000
 8001820:	f8cc 4034 	str.w	r4, [ip, #52]	@ 0x34
    TIM2->CCR2 = 799-spd_b;
 8001824:	f8cc 4038 	str.w	r4, [ip, #56]	@ 0x38

    if(dir_a == BACKWARD){
 8001828:	b9aa      	cbnz	r2, 8001856 <M_SetSpeed+0x4a>
        TIM1->CCR1 = 799;
 800182a:	f240 341f 	movw	r4, #799	@ 0x31f
 800182e:	636c      	str	r4, [r5, #52]	@ 0x34
    }else{
        TIM1->CCR2 = 799;
    }
    
    if(dir_b == BACKWARD){
 8001830:	b9b3      	cbnz	r3, 8001860 <M_SetSpeed+0x54>
        TIM2->CCR1 = 799;
 8001832:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001836:	f240 321f 	movw	r2, #799	@ 0x31f
 800183a:	635a      	str	r2, [r3, #52]	@ 0x34
    }else{
        TIM2->CCR2 = 799;
    }

    
    if(spd_a == 0){
 800183c:	b918      	cbnz	r0, 8001846 <M_SetSpeed+0x3a>
        TIM1->CCR1 = 0;
 800183e:	4b0b      	ldr	r3, [pc, #44]	@ (800186c <M_SetSpeed+0x60>)
 8001840:	2200      	movs	r2, #0
 8001842:	635a      	str	r2, [r3, #52]	@ 0x34
        TIM1->CCR2 = 0;
 8001844:	639a      	str	r2, [r3, #56]	@ 0x38
    }

    if(spd_b == 0){
 8001846:	b921      	cbnz	r1, 8001852 <M_SetSpeed+0x46>
        TIM2->CCR1 = 0;
 8001848:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800184c:	2200      	movs	r2, #0
 800184e:	635a      	str	r2, [r3, #52]	@ 0x34
        TIM2->CCR2 = 0;
 8001850:	639a      	str	r2, [r3, #56]	@ 0x38
    }
 8001852:	bc70      	pop	{r4, r5, r6}
 8001854:	4770      	bx	lr
        TIM1->CCR2 = 799;
 8001856:	4a05      	ldr	r2, [pc, #20]	@ (800186c <M_SetSpeed+0x60>)
 8001858:	f240 341f 	movw	r4, #799	@ 0x31f
 800185c:	6394      	str	r4, [r2, #56]	@ 0x38
 800185e:	e7e7      	b.n	8001830 <M_SetSpeed+0x24>
        TIM2->CCR2 = 799;
 8001860:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001864:	f240 321f 	movw	r2, #799	@ 0x31f
 8001868:	639a      	str	r2, [r3, #56]	@ 0x38
 800186a:	e7e7      	b.n	800183c <M_SetSpeed+0x30>
 800186c:	40012c00 	.word	0x40012c00

08001870 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001870:	b510      	push	{r4, lr}
 8001872:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001874:	4b0e      	ldr	r3, [pc, #56]	@ (80018b0 <HAL_InitTick+0x40>)
 8001876:	781a      	ldrb	r2, [r3, #0]
 8001878:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800187c:	fbb3 f3f2 	udiv	r3, r3, r2
 8001880:	4a0c      	ldr	r2, [pc, #48]	@ (80018b4 <HAL_InitTick+0x44>)
 8001882:	6810      	ldr	r0, [r2, #0]
 8001884:	fbb0 f0f3 	udiv	r0, r0, r3
 8001888:	f000 fb86 	bl	8001f98 <HAL_SYSTICK_Config>
 800188c:	b968      	cbnz	r0, 80018aa <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800188e:	2c0f      	cmp	r4, #15
 8001890:	d901      	bls.n	8001896 <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 8001892:	2001      	movs	r0, #1
 8001894:	e00a      	b.n	80018ac <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001896:	2200      	movs	r2, #0
 8001898:	4621      	mov	r1, r4
 800189a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800189e:	f000 fb59 	bl	8001f54 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80018a2:	4b05      	ldr	r3, [pc, #20]	@ (80018b8 <HAL_InitTick+0x48>)
 80018a4:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80018a6:	2000      	movs	r0, #0
 80018a8:	e000      	b.n	80018ac <HAL_InitTick+0x3c>
    return HAL_ERROR;
 80018aa:	2001      	movs	r0, #1
}
 80018ac:	bd10      	pop	{r4, pc}
 80018ae:	bf00      	nop
 80018b0:	20000010 	.word	0x20000010
 80018b4:	20000018 	.word	0x20000018
 80018b8:	20000014 	.word	0x20000014

080018bc <HAL_Init>:
{
 80018bc:	b508      	push	{r3, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018be:	2003      	movs	r0, #3
 80018c0:	f000 fb36 	bl	8001f30 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80018c4:	200f      	movs	r0, #15
 80018c6:	f7ff ffd3 	bl	8001870 <HAL_InitTick>
  HAL_MspInit();
 80018ca:	f000 fdbd 	bl	8002448 <HAL_MspInit>
}
 80018ce:	2000      	movs	r0, #0
 80018d0:	bd08      	pop	{r3, pc}
	...

080018d4 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80018d4:	4a03      	ldr	r2, [pc, #12]	@ (80018e4 <HAL_IncTick+0x10>)
 80018d6:	6811      	ldr	r1, [r2, #0]
 80018d8:	4b03      	ldr	r3, [pc, #12]	@ (80018e8 <HAL_IncTick+0x14>)
 80018da:	781b      	ldrb	r3, [r3, #0]
 80018dc:	440b      	add	r3, r1
 80018de:	6013      	str	r3, [r2, #0]
}
 80018e0:	4770      	bx	lr
 80018e2:	bf00      	nop
 80018e4:	200001e8 	.word	0x200001e8
 80018e8:	20000010 	.word	0x20000010

080018ec <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80018ec:	4b01      	ldr	r3, [pc, #4]	@ (80018f4 <HAL_GetTick+0x8>)
 80018ee:	6818      	ldr	r0, [r3, #0]
}
 80018f0:	4770      	bx	lr
 80018f2:	bf00      	nop
 80018f4:	200001e8 	.word	0x200001e8

080018f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018f8:	b538      	push	{r3, r4, r5, lr}
 80018fa:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80018fc:	f7ff fff6 	bl	80018ec <HAL_GetTick>
 8001900:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001902:	f1b4 3fff 	cmp.w	r4, #4294967295	@ 0xffffffff
 8001906:	d002      	beq.n	800190e <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8001908:	4b04      	ldr	r3, [pc, #16]	@ (800191c <HAL_Delay+0x24>)
 800190a:	781b      	ldrb	r3, [r3, #0]
 800190c:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800190e:	f7ff ffed 	bl	80018ec <HAL_GetTick>
 8001912:	1b40      	subs	r0, r0, r5
 8001914:	42a0      	cmp	r0, r4
 8001916:	d3fa      	bcc.n	800190e <HAL_Delay+0x16>
  {
  }
}
 8001918:	bd38      	pop	{r3, r4, r5, pc}
 800191a:	bf00      	nop
 800191c:	20000010 	.word	0x20000010

08001920 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001920:	b508      	push	{r3, lr}
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001922:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001924:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001926:	f012 0f50 	tst.w	r2, #80	@ 0x50
 800192a:	d11e      	bne.n	800196a <ADC_DMAConvCplt+0x4a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800192c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800192e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001932:	629a      	str	r2, [r3, #40]	@ 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001934:	681a      	ldr	r2, [r3, #0]
 8001936:	6892      	ldr	r2, [r2, #8]
 8001938:	f402 2260 	and.w	r2, r2, #917504	@ 0xe0000
 800193c:	f5b2 2f60 	cmp.w	r2, #917504	@ 0xe0000
 8001940:	d003      	beq.n	800194a <ADC_DMAConvCplt+0x2a>
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001942:	4618      	mov	r0, r3
 8001944:	f7ff fab8 	bl	8000eb8 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8001948:	bd08      	pop	{r3, pc}
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 800194a:	7b1a      	ldrb	r2, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800194c:	2a00      	cmp	r2, #0
 800194e:	d1f8      	bne.n	8001942 <ADC_DMAConvCplt+0x22>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001950:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001952:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001956:	629a      	str	r2, [r3, #40]	@ 0x28
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001958:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800195a:	f412 5f80 	tst.w	r2, #4096	@ 0x1000
 800195e:	d1f0      	bne.n	8001942 <ADC_DMAConvCplt+0x22>
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001960:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001962:	f042 0201 	orr.w	r2, r2, #1
 8001966:	629a      	str	r2, [r3, #40]	@ 0x28
 8001968:	e7eb      	b.n	8001942 <ADC_DMAConvCplt+0x22>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 800196a:	6a1b      	ldr	r3, [r3, #32]
 800196c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800196e:	4798      	blx	r3
}
 8001970:	e7ea      	b.n	8001948 <ADC_DMAConvCplt+0x28>

08001972 <HAL_ADC_ConvHalfCpltCallback>:
}
 8001972:	4770      	bx	lr

08001974 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001974:	b508      	push	{r3, lr}
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001976:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 8001978:	f7ff fffb 	bl	8001972 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800197c:	bd08      	pop	{r3, pc}

0800197e <HAL_ADC_LevelOutOfWindowCallback>:
}
 800197e:	4770      	bx	lr

08001980 <HAL_ADC_IRQHandler>:
{
 8001980:	b570      	push	{r4, r5, r6, lr}
 8001982:	4604      	mov	r4, r0
  uint32_t tmp_sr = hadc->Instance->SR;
 8001984:	6803      	ldr	r3, [r0, #0]
 8001986:	681e      	ldr	r6, [r3, #0]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8001988:	685d      	ldr	r5, [r3, #4]
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 800198a:	f015 0f20 	tst.w	r5, #32
 800198e:	d017      	beq.n	80019c0 <HAL_ADC_IRQHandler+0x40>
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 8001990:	f016 0f02 	tst.w	r6, #2
 8001994:	d014      	beq.n	80019c0 <HAL_ADC_IRQHandler+0x40>
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001996:	6a82      	ldr	r2, [r0, #40]	@ 0x28
 8001998:	f012 0f10 	tst.w	r2, #16
 800199c:	d103      	bne.n	80019a6 <HAL_ADC_IRQHandler+0x26>
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800199e:	6a82      	ldr	r2, [r0, #40]	@ 0x28
 80019a0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80019a4:	6282      	str	r2, [r0, #40]	@ 0x28
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80019a6:	689a      	ldr	r2, [r3, #8]
 80019a8:	f402 2260 	and.w	r2, r2, #917504	@ 0xe0000
 80019ac:	f5b2 2f60 	cmp.w	r2, #917504	@ 0xe0000
 80019b0:	d033      	beq.n	8001a1a <HAL_ADC_IRQHandler+0x9a>
      HAL_ADC_ConvCpltCallback(hadc);
 80019b2:	4620      	mov	r0, r4
 80019b4:	f7ff fa80 	bl	8000eb8 <HAL_ADC_ConvCpltCallback>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80019b8:	6823      	ldr	r3, [r4, #0]
 80019ba:	f06f 0212 	mvn.w	r2, #18
 80019be:	601a      	str	r2, [r3, #0]
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 80019c0:	f015 0f80 	tst.w	r5, #128	@ 0x80
 80019c4:	d022      	beq.n	8001a0c <HAL_ADC_IRQHandler+0x8c>
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 80019c6:	f016 0f04 	tst.w	r6, #4
 80019ca:	d01f      	beq.n	8001a0c <HAL_ADC_IRQHandler+0x8c>
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80019cc:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80019ce:	f013 0f10 	tst.w	r3, #16
 80019d2:	d103      	bne.n	80019dc <HAL_ADC_IRQHandler+0x5c>
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80019d4:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80019d6:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80019da:	62a3      	str	r3, [r4, #40]	@ 0x28
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 80019dc:	6822      	ldr	r2, [r4, #0]
 80019de:	6893      	ldr	r3, [r2, #8]
 80019e0:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 80019e4:	f5b3 4fe0 	cmp.w	r3, #28672	@ 0x7000
 80019e8:	d02e      	beq.n	8001a48 <HAL_ADC_IRQHandler+0xc8>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80019ea:	6853      	ldr	r3, [r2, #4]
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 80019ec:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 80019f0:	d105      	bne.n	80019fe <HAL_ADC_IRQHandler+0x7e>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80019f2:	6893      	ldr	r3, [r2, #8]
 80019f4:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80019f8:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 80019fc:	d021      	beq.n	8001a42 <HAL_ADC_IRQHandler+0xc2>
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80019fe:	4620      	mov	r0, r4
 8001a00:	f000 fa4e 	bl	8001ea0 <HAL_ADCEx_InjectedConvCpltCallback>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001a04:	6823      	ldr	r3, [r4, #0]
 8001a06:	f06f 020c 	mvn.w	r2, #12
 8001a0a:	601a      	str	r2, [r3, #0]
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 8001a0c:	f015 0f40 	tst.w	r5, #64	@ 0x40
 8001a10:	d002      	beq.n	8001a18 <HAL_ADC_IRQHandler+0x98>
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 8001a12:	f016 0f01 	tst.w	r6, #1
 8001a16:	d128      	bne.n	8001a6a <HAL_ADC_IRQHandler+0xea>
}
 8001a18:	bd70      	pop	{r4, r5, r6, pc}
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001a1a:	7b22      	ldrb	r2, [r4, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001a1c:	2a00      	cmp	r2, #0
 8001a1e:	d1c8      	bne.n	80019b2 <HAL_ADC_IRQHandler+0x32>
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001a20:	685a      	ldr	r2, [r3, #4]
 8001a22:	f022 0220 	bic.w	r2, r2, #32
 8001a26:	605a      	str	r2, [r3, #4]
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001a28:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8001a2a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001a2e:	62a3      	str	r3, [r4, #40]	@ 0x28
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001a30:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8001a32:	f413 5f80 	tst.w	r3, #4096	@ 0x1000
 8001a36:	d1bc      	bne.n	80019b2 <HAL_ADC_IRQHandler+0x32>
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001a38:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8001a3a:	f043 0301 	orr.w	r3, r3, #1
 8001a3e:	62a3      	str	r3, [r4, #40]	@ 0x28
 8001a40:	e7b7      	b.n	80019b2 <HAL_ADC_IRQHandler+0x32>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 8001a42:	7b23      	ldrb	r3, [r4, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d1da      	bne.n	80019fe <HAL_ADC_IRQHandler+0x7e>
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001a48:	6853      	ldr	r3, [r2, #4]
 8001a4a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001a4e:	6053      	str	r3, [r2, #4]
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8001a50:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8001a52:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001a56:	62a3      	str	r3, [r4, #40]	@ 0x28
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001a58:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8001a5a:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8001a5e:	d1ce      	bne.n	80019fe <HAL_ADC_IRQHandler+0x7e>
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001a60:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8001a62:	f043 0301 	orr.w	r3, r3, #1
 8001a66:	62a3      	str	r3, [r4, #40]	@ 0x28
 8001a68:	e7c9      	b.n	80019fe <HAL_ADC_IRQHandler+0x7e>
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001a6a:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8001a6c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001a70:	62a3      	str	r3, [r4, #40]	@ 0x28
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001a72:	4620      	mov	r0, r4
 8001a74:	f7ff ff83 	bl	800197e <HAL_ADC_LevelOutOfWindowCallback>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001a78:	6823      	ldr	r3, [r4, #0]
 8001a7a:	f06f 0201 	mvn.w	r2, #1
 8001a7e:	601a      	str	r2, [r3, #0]
}
 8001a80:	e7ca      	b.n	8001a18 <HAL_ADC_IRQHandler+0x98>

08001a82 <HAL_ADC_ErrorCallback>:
}
 8001a82:	4770      	bx	lr

08001a84 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001a84:	b508      	push	{r3, lr}
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001a86:	6a40      	ldr	r0, [r0, #36]	@ 0x24
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001a88:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8001a8a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001a8e:	6283      	str	r3, [r0, #40]	@ 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001a90:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8001a92:	f043 0304 	orr.w	r3, r3, #4
 8001a96:	62c3      	str	r3, [r0, #44]	@ 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001a98:	f7ff fff3 	bl	8001a82 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001a9c:	bd08      	pop	{r3, pc}
	...

08001aa0 <HAL_ADC_ConfigChannel>:
{ 
 8001aa0:	b430      	push	{r4, r5}
 8001aa2:	b082      	sub	sp, #8
  __IO uint32_t wait_loop_index = 0U;
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 8001aa8:	f890 2024 	ldrb.w	r2, [r0, #36]	@ 0x24
 8001aac:	2a01      	cmp	r2, #1
 8001aae:	f000 808f 	beq.w	8001bd0 <HAL_ADC_ConfigChannel+0x130>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	2201      	movs	r2, #1
 8001ab6:	f880 2024 	strb.w	r2, [r0, #36]	@ 0x24
  if (sConfig->Rank < 7U)
 8001aba:	684a      	ldr	r2, [r1, #4]
 8001abc:	2a06      	cmp	r2, #6
 8001abe:	d82d      	bhi.n	8001b1c <HAL_ADC_ConfigChannel+0x7c>
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001ac0:	6804      	ldr	r4, [r0, #0]
 8001ac2:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 8001ac4:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8001ac8:	3a05      	subs	r2, #5
 8001aca:	f04f 0c1f 	mov.w	ip, #31
 8001ace:	fa0c fc02 	lsl.w	ip, ip, r2
 8001ad2:	ea20 000c 	bic.w	r0, r0, ip
 8001ad6:	680d      	ldr	r5, [r1, #0]
 8001ad8:	fa05 f202 	lsl.w	r2, r5, r2
 8001adc:	4302      	orrs	r2, r0
 8001ade:	6362      	str	r2, [r4, #52]	@ 0x34
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001ae0:	680a      	ldr	r2, [r1, #0]
 8001ae2:	2a09      	cmp	r2, #9
 8001ae4:	d938      	bls.n	8001b58 <HAL_ADC_ConfigChannel+0xb8>
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001ae6:	681c      	ldr	r4, [r3, #0]
 8001ae8:	68e0      	ldr	r0, [r4, #12]
 8001aea:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8001aee:	3a1e      	subs	r2, #30
 8001af0:	f04f 0c07 	mov.w	ip, #7
 8001af4:	fa0c fc02 	lsl.w	ip, ip, r2
 8001af8:	ea20 000c 	bic.w	r0, r0, ip
 8001afc:	688d      	ldr	r5, [r1, #8]
 8001afe:	fa05 f202 	lsl.w	r2, r5, r2
 8001b02:	4302      	orrs	r2, r0
 8001b04:	60e2      	str	r2, [r4, #12]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001b06:	680a      	ldr	r2, [r1, #0]
 8001b08:	3a10      	subs	r2, #16
 8001b0a:	2a01      	cmp	r2, #1
 8001b0c:	d934      	bls.n	8001b78 <HAL_ADC_ConfigChannel+0xd8>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b0e:	2000      	movs	r0, #0
  __HAL_UNLOCK(hadc);
 8001b10:	2200      	movs	r2, #0
 8001b12:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
}
 8001b16:	b002      	add	sp, #8
 8001b18:	bc30      	pop	{r4, r5}
 8001b1a:	4770      	bx	lr
  else if (sConfig->Rank < 13U)
 8001b1c:	2a0c      	cmp	r2, #12
 8001b1e:	d80d      	bhi.n	8001b3c <HAL_ADC_ConfigChannel+0x9c>
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001b20:	6805      	ldr	r5, [r0, #0]
 8001b22:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 8001b24:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8001b28:	3a23      	subs	r2, #35	@ 0x23
 8001b2a:	241f      	movs	r4, #31
 8001b2c:	4094      	lsls	r4, r2
 8001b2e:	ea20 0004 	bic.w	r0, r0, r4
 8001b32:	680c      	ldr	r4, [r1, #0]
 8001b34:	4094      	lsls	r4, r2
 8001b36:	4320      	orrs	r0, r4
 8001b38:	6328      	str	r0, [r5, #48]	@ 0x30
 8001b3a:	e7d1      	b.n	8001ae0 <HAL_ADC_ConfigChannel+0x40>
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001b3c:	6805      	ldr	r5, [r0, #0]
 8001b3e:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 8001b40:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8001b44:	3a41      	subs	r2, #65	@ 0x41
 8001b46:	241f      	movs	r4, #31
 8001b48:	4094      	lsls	r4, r2
 8001b4a:	ea20 0004 	bic.w	r0, r0, r4
 8001b4e:	680c      	ldr	r4, [r1, #0]
 8001b50:	4094      	lsls	r4, r2
 8001b52:	4320      	orrs	r0, r4
 8001b54:	62e8      	str	r0, [r5, #44]	@ 0x2c
 8001b56:	e7c3      	b.n	8001ae0 <HAL_ADC_ConfigChannel+0x40>
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001b58:	681c      	ldr	r4, [r3, #0]
 8001b5a:	6920      	ldr	r0, [r4, #16]
 8001b5c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8001b60:	f04f 0c07 	mov.w	ip, #7
 8001b64:	fa0c fc02 	lsl.w	ip, ip, r2
 8001b68:	ea20 000c 	bic.w	r0, r0, ip
 8001b6c:	688d      	ldr	r5, [r1, #8]
 8001b6e:	fa05 f202 	lsl.w	r2, r5, r2
 8001b72:	4302      	orrs	r2, r0
 8001b74:	6122      	str	r2, [r4, #16]
 8001b76:	e7c6      	b.n	8001b06 <HAL_ADC_ConfigChannel+0x66>
    if (hadc->Instance == ADC1)
 8001b78:	681a      	ldr	r2, [r3, #0]
 8001b7a:	4816      	ldr	r0, [pc, #88]	@ (8001bd4 <HAL_ADC_ConfigChannel+0x134>)
 8001b7c:	4282      	cmp	r2, r0
 8001b7e:	d005      	beq.n	8001b8c <HAL_ADC_ConfigChannel+0xec>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001b80:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001b82:	f042 0220 	orr.w	r2, r2, #32
 8001b86:	629a      	str	r2, [r3, #40]	@ 0x28
      tmp_hal_status = HAL_ERROR;
 8001b88:	2001      	movs	r0, #1
 8001b8a:	e7c1      	b.n	8001b10 <HAL_ADC_ConfigChannel+0x70>
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001b8c:	6890      	ldr	r0, [r2, #8]
 8001b8e:	f410 0f00 	tst.w	r0, #8388608	@ 0x800000
 8001b92:	d11b      	bne.n	8001bcc <HAL_ADC_ConfigChannel+0x12c>
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001b94:	6890      	ldr	r0, [r2, #8]
 8001b96:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8001b9a:	6090      	str	r0, [r2, #8]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001b9c:	680a      	ldr	r2, [r1, #0]
 8001b9e:	2a10      	cmp	r2, #16
 8001ba0:	d001      	beq.n	8001ba6 <HAL_ADC_ConfigChannel+0x106>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ba2:	2000      	movs	r0, #0
 8001ba4:	e7b4      	b.n	8001b10 <HAL_ADC_ConfigChannel+0x70>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001ba6:	4a0c      	ldr	r2, [pc, #48]	@ (8001bd8 <HAL_ADC_ConfigChannel+0x138>)
 8001ba8:	6812      	ldr	r2, [r2, #0]
 8001baa:	490c      	ldr	r1, [pc, #48]	@ (8001bdc <HAL_ADC_ConfigChannel+0x13c>)
 8001bac:	fba1 1202 	umull	r1, r2, r1, r2
 8001bb0:	0c92      	lsrs	r2, r2, #18
 8001bb2:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8001bb6:	0052      	lsls	r2, r2, #1
 8001bb8:	9201      	str	r2, [sp, #4]
          while(wait_loop_index != 0U)
 8001bba:	e002      	b.n	8001bc2 <HAL_ADC_ConfigChannel+0x122>
            wait_loop_index--;
 8001bbc:	9a01      	ldr	r2, [sp, #4]
 8001bbe:	3a01      	subs	r2, #1
 8001bc0:	9201      	str	r2, [sp, #4]
          while(wait_loop_index != 0U)
 8001bc2:	9a01      	ldr	r2, [sp, #4]
 8001bc4:	2a00      	cmp	r2, #0
 8001bc6:	d1f9      	bne.n	8001bbc <HAL_ADC_ConfigChannel+0x11c>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001bc8:	2000      	movs	r0, #0
 8001bca:	e7a1      	b.n	8001b10 <HAL_ADC_ConfigChannel+0x70>
 8001bcc:	2000      	movs	r0, #0
 8001bce:	e79f      	b.n	8001b10 <HAL_ADC_ConfigChannel+0x70>
  __HAL_LOCK(hadc);
 8001bd0:	2002      	movs	r0, #2
 8001bd2:	e7a0      	b.n	8001b16 <HAL_ADC_ConfigChannel+0x76>
 8001bd4:	40012400 	.word	0x40012400
 8001bd8:	20000018 	.word	0x20000018
 8001bdc:	431bde83 	.word	0x431bde83

08001be0 <ADC_Enable>:
{
 8001be0:	b530      	push	{r4, r5, lr}
 8001be2:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0U;
 8001be4:	2300      	movs	r3, #0
 8001be6:	9301      	str	r3, [sp, #4]
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001be8:	6803      	ldr	r3, [r0, #0]
 8001bea:	689a      	ldr	r2, [r3, #8]
 8001bec:	f012 0f01 	tst.w	r2, #1
 8001bf0:	d133      	bne.n	8001c5a <ADC_Enable+0x7a>
 8001bf2:	4604      	mov	r4, r0
    __HAL_ADC_ENABLE(hadc);
 8001bf4:	689a      	ldr	r2, [r3, #8]
 8001bf6:	f042 0201 	orr.w	r2, r2, #1
 8001bfa:	609a      	str	r2, [r3, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001bfc:	4b18      	ldr	r3, [pc, #96]	@ (8001c60 <ADC_Enable+0x80>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4a18      	ldr	r2, [pc, #96]	@ (8001c64 <ADC_Enable+0x84>)
 8001c02:	fba2 2303 	umull	r2, r3, r2, r3
 8001c06:	0c9b      	lsrs	r3, r3, #18
 8001c08:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 8001c0a:	e002      	b.n	8001c12 <ADC_Enable+0x32>
      wait_loop_index--;
 8001c0c:	9b01      	ldr	r3, [sp, #4]
 8001c0e:	3b01      	subs	r3, #1
 8001c10:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 8001c12:	9b01      	ldr	r3, [sp, #4]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d1f9      	bne.n	8001c0c <ADC_Enable+0x2c>
    tickstart = HAL_GetTick();
 8001c18:	f7ff fe68 	bl	80018ec <HAL_GetTick>
 8001c1c:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001c1e:	6823      	ldr	r3, [r4, #0]
 8001c20:	689b      	ldr	r3, [r3, #8]
 8001c22:	f013 0f01 	tst.w	r3, #1
 8001c26:	d116      	bne.n	8001c56 <ADC_Enable+0x76>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001c28:	f7ff fe60 	bl	80018ec <HAL_GetTick>
 8001c2c:	1b43      	subs	r3, r0, r5
 8001c2e:	2b02      	cmp	r3, #2
 8001c30:	d9f5      	bls.n	8001c1e <ADC_Enable+0x3e>
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001c32:	6823      	ldr	r3, [r4, #0]
 8001c34:	689b      	ldr	r3, [r3, #8]
 8001c36:	f013 0f01 	tst.w	r3, #1
 8001c3a:	d1f0      	bne.n	8001c1e <ADC_Enable+0x3e>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c3c:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8001c3e:	f043 0310 	orr.w	r3, r3, #16
 8001c42:	62a3      	str	r3, [r4, #40]	@ 0x28
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c44:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8001c46:	f043 0301 	orr.w	r3, r3, #1
 8001c4a:	62e3      	str	r3, [r4, #44]	@ 0x2c
          __HAL_UNLOCK(hadc);
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
          return HAL_ERROR;
 8001c52:	2001      	movs	r0, #1
 8001c54:	e002      	b.n	8001c5c <ADC_Enable+0x7c>
  return HAL_OK;
 8001c56:	2000      	movs	r0, #0
 8001c58:	e000      	b.n	8001c5c <ADC_Enable+0x7c>
 8001c5a:	2000      	movs	r0, #0
}
 8001c5c:	b003      	add	sp, #12
 8001c5e:	bd30      	pop	{r4, r5, pc}
 8001c60:	20000018 	.word	0x20000018
 8001c64:	431bde83 	.word	0x431bde83

08001c68 <HAL_ADC_Start_DMA>:
{
 8001c68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c6a:	460d      	mov	r5, r1
    __HAL_LOCK(hadc);
 8001c6c:	f890 1024 	ldrb.w	r1, [r0, #36]	@ 0x24
 8001c70:	2901      	cmp	r1, #1
 8001c72:	d05d      	beq.n	8001d30 <HAL_ADC_Start_DMA+0xc8>
 8001c74:	4604      	mov	r4, r0
 8001c76:	4616      	mov	r6, r2
 8001c78:	2301      	movs	r3, #1
 8001c7a:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
    tmp_hal_status = ADC_Enable(hadc);
 8001c7e:	f7ff ffaf 	bl	8001be0 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8001c82:	4607      	mov	r7, r0
 8001c84:	2800      	cmp	r0, #0
 8001c86:	d14e      	bne.n	8001d26 <HAL_ADC_Start_DMA+0xbe>
      ADC_STATE_CLR_SET(hadc->State,
 8001c88:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8001c8a:	f421 6170 	bic.w	r1, r1, #3840	@ 0xf00
 8001c8e:	f021 0101 	bic.w	r1, r1, #1
 8001c92:	f441 7180 	orr.w	r1, r1, #256	@ 0x100
 8001c96:	62a1      	str	r1, [r4, #40]	@ 0x28
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001c98:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8001c9a:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8001c9e:	62a3      	str	r3, [r4, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001ca0:	6823      	ldr	r3, [r4, #0]
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 8001ca8:	d005      	beq.n	8001cb6 <HAL_ADC_Start_DMA+0x4e>
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001caa:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8001cac:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001cb0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001cb4:	62a3      	str	r3, [r4, #40]	@ 0x28
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001cb6:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8001cb8:	f413 5f80 	tst.w	r3, #4096	@ 0x1000
 8001cbc:	d02b      	beq.n	8001d16 <HAL_ADC_Start_DMA+0xae>
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001cbe:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8001cc0:	f023 0306 	bic.w	r3, r3, #6
 8001cc4:	62e3      	str	r3, [r4, #44]	@ 0x2c
      __HAL_UNLOCK(hadc);
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001ccc:	6a23      	ldr	r3, [r4, #32]
 8001cce:	4a19      	ldr	r2, [pc, #100]	@ (8001d34 <HAL_ADC_Start_DMA+0xcc>)
 8001cd0:	629a      	str	r2, [r3, #40]	@ 0x28
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001cd2:	6a23      	ldr	r3, [r4, #32]
 8001cd4:	4a18      	ldr	r2, [pc, #96]	@ (8001d38 <HAL_ADC_Start_DMA+0xd0>)
 8001cd6:	62da      	str	r2, [r3, #44]	@ 0x2c
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001cd8:	6a23      	ldr	r3, [r4, #32]
 8001cda:	4a18      	ldr	r2, [pc, #96]	@ (8001d3c <HAL_ADC_Start_DMA+0xd4>)
 8001cdc:	631a      	str	r2, [r3, #48]	@ 0x30
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001cde:	6823      	ldr	r3, [r4, #0]
 8001ce0:	f06f 0202 	mvn.w	r2, #2
 8001ce4:	601a      	str	r2, [r3, #0]
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001ce6:	6822      	ldr	r2, [r4, #0]
 8001ce8:	6893      	ldr	r3, [r2, #8]
 8001cea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001cee:	6093      	str	r3, [r2, #8]
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001cf0:	6821      	ldr	r1, [r4, #0]
 8001cf2:	4633      	mov	r3, r6
 8001cf4:	462a      	mov	r2, r5
 8001cf6:	314c      	adds	r1, #76	@ 0x4c
 8001cf8:	6a20      	ldr	r0, [r4, #32]
 8001cfa:	f000 f9ab 	bl	8002054 <HAL_DMA_Start_IT>
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8001cfe:	6822      	ldr	r2, [r4, #0]
 8001d00:	6893      	ldr	r3, [r2, #8]
 8001d02:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8001d06:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8001d0a:	d007      	beq.n	8001d1c <HAL_ADC_Start_DMA+0xb4>
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001d0c:	6893      	ldr	r3, [r2, #8]
 8001d0e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001d12:	6093      	str	r3, [r2, #8]
 8001d14:	e00a      	b.n	8001d2c <HAL_ADC_Start_DMA+0xc4>
        ADC_CLEAR_ERRORCODE(hadc);
 8001d16:	2300      	movs	r3, #0
 8001d18:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8001d1a:	e7d4      	b.n	8001cc6 <HAL_ADC_Start_DMA+0x5e>
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001d1c:	6893      	ldr	r3, [r2, #8]
 8001d1e:	f443 03a0 	orr.w	r3, r3, #5242880	@ 0x500000
 8001d22:	6093      	str	r3, [r2, #8]
 8001d24:	e002      	b.n	8001d2c <HAL_ADC_Start_DMA+0xc4>
      __HAL_UNLOCK(hadc);
 8001d26:	2300      	movs	r3, #0
 8001d28:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
}
 8001d2c:	4638      	mov	r0, r7
 8001d2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_LOCK(hadc);
 8001d30:	2702      	movs	r7, #2
 8001d32:	e7fb      	b.n	8001d2c <HAL_ADC_Start_DMA+0xc4>
 8001d34:	08001921 	.word	0x08001921
 8001d38:	08001975 	.word	0x08001975
 8001d3c:	08001a85 	.word	0x08001a85

08001d40 <ADC_ConversionStop_Disable>:
{
 8001d40:	b538      	push	{r3, r4, r5, lr}
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001d42:	6803      	ldr	r3, [r0, #0]
 8001d44:	689a      	ldr	r2, [r3, #8]
 8001d46:	f012 0f01 	tst.w	r2, #1
 8001d4a:	d101      	bne.n	8001d50 <ADC_ConversionStop_Disable+0x10>
  return HAL_OK;
 8001d4c:	2000      	movs	r0, #0
}
 8001d4e:	bd38      	pop	{r3, r4, r5, pc}
 8001d50:	4604      	mov	r4, r0
    __HAL_ADC_DISABLE(hadc);
 8001d52:	689a      	ldr	r2, [r3, #8]
 8001d54:	f022 0201 	bic.w	r2, r2, #1
 8001d58:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8001d5a:	f7ff fdc7 	bl	80018ec <HAL_GetTick>
 8001d5e:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001d60:	6823      	ldr	r3, [r4, #0]
 8001d62:	689b      	ldr	r3, [r3, #8]
 8001d64:	f013 0f01 	tst.w	r3, #1
 8001d68:	d013      	beq.n	8001d92 <ADC_ConversionStop_Disable+0x52>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001d6a:	f7ff fdbf 	bl	80018ec <HAL_GetTick>
 8001d6e:	1b43      	subs	r3, r0, r5
 8001d70:	2b02      	cmp	r3, #2
 8001d72:	d9f5      	bls.n	8001d60 <ADC_ConversionStop_Disable+0x20>
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001d74:	6823      	ldr	r3, [r4, #0]
 8001d76:	689b      	ldr	r3, [r3, #8]
 8001d78:	f013 0f01 	tst.w	r3, #1
 8001d7c:	d0f0      	beq.n	8001d60 <ADC_ConversionStop_Disable+0x20>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d7e:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8001d80:	f043 0310 	orr.w	r3, r3, #16
 8001d84:	62a3      	str	r3, [r4, #40]	@ 0x28
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d86:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8001d88:	f043 0301 	orr.w	r3, r3, #1
 8001d8c:	62e3      	str	r3, [r4, #44]	@ 0x2c
          return HAL_ERROR;
 8001d8e:	2001      	movs	r0, #1
 8001d90:	e7dd      	b.n	8001d4e <ADC_ConversionStop_Disable+0xe>
  return HAL_OK;
 8001d92:	2000      	movs	r0, #0
 8001d94:	e7db      	b.n	8001d4e <ADC_ConversionStop_Disable+0xe>
	...

08001d98 <HAL_ADC_Init>:
  if(hadc == NULL)
 8001d98:	2800      	cmp	r0, #0
 8001d9a:	d07b      	beq.n	8001e94 <HAL_ADC_Init+0xfc>
{
 8001d9c:	b570      	push	{r4, r5, r6, lr}
 8001d9e:	4604      	mov	r4, r0
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001da0:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d04d      	beq.n	8001e42 <HAL_ADC_Init+0xaa>
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001da6:	4620      	mov	r0, r4
 8001da8:	f7ff ffca 	bl	8001d40 <ADC_ConversionStop_Disable>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001dac:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8001dae:	f013 0310 	ands.w	r3, r3, #16
 8001db2:	d169      	bne.n	8001e88 <HAL_ADC_Init+0xf0>
 8001db4:	2800      	cmp	r0, #0
 8001db6:	d167      	bne.n	8001e88 <HAL_ADC_Init+0xf0>
    ADC_STATE_CLR_SET(hadc->State,
 8001db8:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8001dba:	f422 5288 	bic.w	r2, r2, #4352	@ 0x1100
 8001dbe:	f022 0202 	bic.w	r2, r2, #2
 8001dc2:	f042 0202 	orr.w	r2, r2, #2
 8001dc6:	62a2      	str	r2, [r4, #40]	@ 0x28
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001dc8:	6862      	ldr	r2, [r4, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001dca:	69e1      	ldr	r1, [r4, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001dcc:	430a      	orrs	r2, r1
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001dce:	7b21      	ldrb	r1, [r4, #12]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001dd0:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001dd4:	68a5      	ldr	r5, [r4, #8]
 8001dd6:	f5b5 7f80 	cmp.w	r5, #256	@ 0x100
 8001dda:	d002      	beq.n	8001de2 <HAL_ADC_Init+0x4a>
 8001ddc:	2d01      	cmp	r5, #1
 8001dde:	d036      	beq.n	8001e4e <HAL_ADC_Init+0xb6>
 8001de0:	461d      	mov	r5, r3
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001de2:	7d26      	ldrb	r6, [r4, #20]
 8001de4:	2e01      	cmp	r6, #1
 8001de6:	d035      	beq.n	8001e54 <HAL_ADC_Init+0xbc>
      MODIFY_REG(hadc->Instance->CR1,
 8001de8:	6826      	ldr	r6, [r4, #0]
 8001dea:	6871      	ldr	r1, [r6, #4]
 8001dec:	f421 4169 	bic.w	r1, r1, #59648	@ 0xe900
 8001df0:	4329      	orrs	r1, r5
 8001df2:	6071      	str	r1, [r6, #4]
      MODIFY_REG(hadc->Instance->CR2,
 8001df4:	6825      	ldr	r5, [r4, #0]
 8001df6:	68ae      	ldr	r6, [r5, #8]
 8001df8:	4927      	ldr	r1, [pc, #156]	@ (8001e98 <HAL_ADC_Init+0x100>)
 8001dfa:	4031      	ands	r1, r6
 8001dfc:	4311      	orrs	r1, r2
 8001dfe:	60a9      	str	r1, [r5, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001e00:	68a1      	ldr	r1, [r4, #8]
 8001e02:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 8001e06:	d001      	beq.n	8001e0c <HAL_ADC_Init+0x74>
 8001e08:	2901      	cmp	r1, #1
 8001e0a:	d102      	bne.n	8001e12 <HAL_ADC_Init+0x7a>
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001e0c:	6923      	ldr	r3, [r4, #16]
 8001e0e:	3b01      	subs	r3, #1
 8001e10:	051b      	lsls	r3, r3, #20
    MODIFY_REG(hadc->Instance->SQR1,
 8001e12:	6825      	ldr	r5, [r4, #0]
 8001e14:	6ae9      	ldr	r1, [r5, #44]	@ 0x2c
 8001e16:	f421 0170 	bic.w	r1, r1, #15728640	@ 0xf00000
 8001e1a:	430b      	orrs	r3, r1
 8001e1c:	62eb      	str	r3, [r5, #44]	@ 0x2c
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001e1e:	6823      	ldr	r3, [r4, #0]
 8001e20:	6899      	ldr	r1, [r3, #8]
 8001e22:	4b1e      	ldr	r3, [pc, #120]	@ (8001e9c <HAL_ADC_Init+0x104>)
 8001e24:	400b      	ands	r3, r1
 8001e26:	429a      	cmp	r2, r3
 8001e28:	d025      	beq.n	8001e76 <HAL_ADC_Init+0xde>
      ADC_STATE_CLR_SET(hadc->State,
 8001e2a:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8001e2c:	f023 0312 	bic.w	r3, r3, #18
 8001e30:	f043 0310 	orr.w	r3, r3, #16
 8001e34:	62a3      	str	r3, [r4, #40]	@ 0x28
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e36:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8001e38:	f043 0301 	orr.w	r3, r3, #1
 8001e3c:	62e3      	str	r3, [r4, #44]	@ 0x2c
      tmp_hal_status = HAL_ERROR;
 8001e3e:	2001      	movs	r0, #1
 8001e40:	e027      	b.n	8001e92 <HAL_ADC_Init+0xfa>
    ADC_CLEAR_ERRORCODE(hadc);
 8001e42:	62c3      	str	r3, [r0, #44]	@ 0x2c
    hadc->Lock = HAL_UNLOCKED;
 8001e44:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
    HAL_ADC_MspInit(hadc);
 8001e48:	f000 fb20 	bl	800248c <HAL_ADC_MspInit>
 8001e4c:	e7ab      	b.n	8001da6 <HAL_ADC_Init+0xe>
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001e4e:	f44f 7580 	mov.w	r5, #256	@ 0x100
 8001e52:	e7c6      	b.n	8001de2 <HAL_ADC_Init+0x4a>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001e54:	b931      	cbnz	r1, 8001e64 <HAL_ADC_Init+0xcc>
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001e56:	69a1      	ldr	r1, [r4, #24]
 8001e58:	3901      	subs	r1, #1
 8001e5a:	ea45 3141 	orr.w	r1, r5, r1, lsl #13
 8001e5e:	f441 6500 	orr.w	r5, r1, #2048	@ 0x800
 8001e62:	e7c1      	b.n	8001de8 <HAL_ADC_Init+0x50>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001e64:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8001e66:	f041 0120 	orr.w	r1, r1, #32
 8001e6a:	62a1      	str	r1, [r4, #40]	@ 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e6c:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8001e6e:	f041 0101 	orr.w	r1, r1, #1
 8001e72:	62e1      	str	r1, [r4, #44]	@ 0x2c
 8001e74:	e7b8      	b.n	8001de8 <HAL_ADC_Init+0x50>
      ADC_CLEAR_ERRORCODE(hadc);
 8001e76:	2300      	movs	r3, #0
 8001e78:	62e3      	str	r3, [r4, #44]	@ 0x2c
      ADC_STATE_CLR_SET(hadc->State,
 8001e7a:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8001e7c:	f023 0303 	bic.w	r3, r3, #3
 8001e80:	f043 0301 	orr.w	r3, r3, #1
 8001e84:	62a3      	str	r3, [r4, #40]	@ 0x28
 8001e86:	e004      	b.n	8001e92 <HAL_ADC_Init+0xfa>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e88:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8001e8a:	f043 0310 	orr.w	r3, r3, #16
 8001e8e:	62a3      	str	r3, [r4, #40]	@ 0x28
    tmp_hal_status = HAL_ERROR;
 8001e90:	2001      	movs	r0, #1
}
 8001e92:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8001e94:	2001      	movs	r0, #1
}
 8001e96:	4770      	bx	lr
 8001e98:	ffe1f7fd 	.word	0xffe1f7fd
 8001e9c:	ff1f0efe 	.word	0xff1f0efe

08001ea0 <HAL_ADCEx_InjectedConvCpltCallback>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8001ea0:	4770      	bx	lr
	...

08001ea4 <__NVIC_SetPriority>:
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 8001ea4:	2800      	cmp	r0, #0
 8001ea6:	db08      	blt.n	8001eba <__NVIC_SetPriority+0x16>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ea8:	0109      	lsls	r1, r1, #4
 8001eaa:	b2c9      	uxtb	r1, r1
 8001eac:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 8001eb0:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 8001eb4:	f880 1300 	strb.w	r1, [r0, #768]	@ 0x300
 8001eb8:	4770      	bx	lr
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001eba:	f000 000f 	and.w	r0, r0, #15
 8001ebe:	0109      	lsls	r1, r1, #4
 8001ec0:	b2c9      	uxtb	r1, r1
 8001ec2:	4b01      	ldr	r3, [pc, #4]	@ (8001ec8 <__NVIC_SetPriority+0x24>)
 8001ec4:	5419      	strb	r1, [r3, r0]
  }
}
 8001ec6:	4770      	bx	lr
 8001ec8:	e000ed14 	.word	0xe000ed14

08001ecc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ecc:	b500      	push	{lr}
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ece:	f000 0007 	and.w	r0, r0, #7
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ed2:	f1c0 0c07 	rsb	ip, r0, #7
 8001ed6:	f1bc 0f04 	cmp.w	ip, #4
 8001eda:	bf28      	it	cs
 8001edc:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ee0:	1d03      	adds	r3, r0, #4
 8001ee2:	2b06      	cmp	r3, #6
 8001ee4:	d90f      	bls.n	8001f06 <NVIC_EncodePriority+0x3a>
 8001ee6:	1ec3      	subs	r3, r0, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ee8:	f04f 3eff 	mov.w	lr, #4294967295	@ 0xffffffff
 8001eec:	fa0e f00c 	lsl.w	r0, lr, ip
 8001ef0:	ea21 0100 	bic.w	r1, r1, r0
 8001ef4:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ef6:	fa0e fe03 	lsl.w	lr, lr, r3
 8001efa:	ea22 020e 	bic.w	r2, r2, lr
         );
}
 8001efe:	ea41 0002 	orr.w	r0, r1, r2
 8001f02:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f06:	2300      	movs	r3, #0
 8001f08:	e7ee      	b.n	8001ee8 <NVIC_EncodePriority+0x1c>
	...

08001f0c <__NVIC_SystemReset>:
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001f0c:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8001f10:	4905      	ldr	r1, [pc, #20]	@ (8001f28 <__NVIC_SystemReset+0x1c>)
 8001f12:	68ca      	ldr	r2, [r1, #12]
 8001f14:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8001f18:	4b04      	ldr	r3, [pc, #16]	@ (8001f2c <__NVIC_SystemReset+0x20>)
 8001f1a:	4313      	orrs	r3, r2
 8001f1c:	60cb      	str	r3, [r1, #12]
 8001f1e:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8001f22:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 8001f24:	e7fd      	b.n	8001f22 <__NVIC_SystemReset+0x16>
 8001f26:	bf00      	nop
 8001f28:	e000ed00 	.word	0xe000ed00
 8001f2c:	05fa0004 	.word	0x05fa0004

08001f30 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f30:	4a07      	ldr	r2, [pc, #28]	@ (8001f50 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8001f32:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f34:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8001f38:	041b      	lsls	r3, r3, #16
 8001f3a:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001f3c:	0200      	lsls	r0, r0, #8
 8001f3e:	f400 60e0 	and.w	r0, r0, #1792	@ 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f42:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8001f44:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001f48:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8001f4c:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8001f4e:	4770      	bx	lr
 8001f50:	e000ed00 	.word	0xe000ed00

08001f54 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f54:	b510      	push	{r4, lr}
 8001f56:	4604      	mov	r4, r0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f58:	4b05      	ldr	r3, [pc, #20]	@ (8001f70 <HAL_NVIC_SetPriority+0x1c>)
 8001f5a:	68d8      	ldr	r0, [r3, #12]
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f5c:	f3c0 2002 	ubfx	r0, r0, #8, #3
 8001f60:	f7ff ffb4 	bl	8001ecc <NVIC_EncodePriority>
 8001f64:	4601      	mov	r1, r0
 8001f66:	4620      	mov	r0, r4
 8001f68:	f7ff ff9c 	bl	8001ea4 <__NVIC_SetPriority>
}
 8001f6c:	bd10      	pop	{r4, pc}
 8001f6e:	bf00      	nop
 8001f70:	e000ed00 	.word	0xe000ed00

08001f74 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001f74:	2800      	cmp	r0, #0
 8001f76:	db07      	blt.n	8001f88 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f78:	f000 021f 	and.w	r2, r0, #31
 8001f7c:	0940      	lsrs	r0, r0, #5
 8001f7e:	2301      	movs	r3, #1
 8001f80:	4093      	lsls	r3, r2
 8001f82:	4a02      	ldr	r2, [pc, #8]	@ (8001f8c <HAL_NVIC_EnableIRQ+0x18>)
 8001f84:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001f88:	4770      	bx	lr
 8001f8a:	bf00      	nop
 8001f8c:	e000e100 	.word	0xe000e100

08001f90 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8001f90:	b508      	push	{r3, lr}
  /* System Reset */
  NVIC_SystemReset();
 8001f92:	f7ff ffbb 	bl	8001f0c <__NVIC_SystemReset>
	...

08001f98 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f98:	3801      	subs	r0, #1
 8001f9a:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8001f9e:	d20b      	bcs.n	8001fb8 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001fa0:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8001fa4:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fa6:	4a05      	ldr	r2, [pc, #20]	@ (8001fbc <HAL_SYSTICK_Config+0x24>)
 8001fa8:	21f0      	movs	r1, #240	@ 0xf0
 8001faa:	f882 1023 	strb.w	r1, [r2, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001fae:	2000      	movs	r0, #0
 8001fb0:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001fb2:	2207      	movs	r2, #7
 8001fb4:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001fb6:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001fb8:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001fba:	4770      	bx	lr
 8001fbc:	e000ed00 	.word	0xe000ed00

08001fc0 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001fc0:	b430      	push	{r4, r5}
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001fc2:	2401      	movs	r4, #1
 8001fc4:	6c05      	ldr	r5, [r0, #64]	@ 0x40
 8001fc6:	40ac      	lsls	r4, r5
 8001fc8:	6bc5      	ldr	r5, [r0, #60]	@ 0x3c
 8001fca:	606c      	str	r4, [r5, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001fcc:	6804      	ldr	r4, [r0, #0]
 8001fce:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001fd0:	6843      	ldr	r3, [r0, #4]
 8001fd2:	2b10      	cmp	r3, #16
 8001fd4:	d005      	beq.n	8001fe2 <DMA_SetConfig+0x22>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8001fd6:	6803      	ldr	r3, [r0, #0]
 8001fd8:	6099      	str	r1, [r3, #8]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8001fda:	6803      	ldr	r3, [r0, #0]
 8001fdc:	60da      	str	r2, [r3, #12]
  }
}
 8001fde:	bc30      	pop	{r4, r5}
 8001fe0:	4770      	bx	lr
    hdma->Instance->CPAR = DstAddress;
 8001fe2:	6803      	ldr	r3, [r0, #0]
 8001fe4:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = SrcAddress;
 8001fe6:	6803      	ldr	r3, [r0, #0]
 8001fe8:	60d9      	str	r1, [r3, #12]
 8001fea:	e7f8      	b.n	8001fde <DMA_SetConfig+0x1e>

08001fec <HAL_DMA_Init>:
  if(hdma == NULL)
 8001fec:	b350      	cbz	r0, 8002044 <HAL_DMA_Init+0x58>
{
 8001fee:	b410      	push	{r4}
 8001ff0:	4602      	mov	r2, r0
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001ff2:	6801      	ldr	r1, [r0, #0]
 8001ff4:	4b14      	ldr	r3, [pc, #80]	@ (8002048 <HAL_DMA_Init+0x5c>)
 8001ff6:	440b      	add	r3, r1
 8001ff8:	4814      	ldr	r0, [pc, #80]	@ (800204c <HAL_DMA_Init+0x60>)
 8001ffa:	fba0 0303 	umull	r0, r3, r0, r3
 8001ffe:	091b      	lsrs	r3, r3, #4
 8002000:	009b      	lsls	r3, r3, #2
 8002002:	6413      	str	r3, [r2, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8002004:	4b12      	ldr	r3, [pc, #72]	@ (8002050 <HAL_DMA_Init+0x64>)
 8002006:	63d3      	str	r3, [r2, #60]	@ 0x3c
  hdma->State = HAL_DMA_STATE_BUSY;
 8002008:	2302      	movs	r3, #2
 800200a:	f882 3021 	strb.w	r3, [r2, #33]	@ 0x21
  tmp = hdma->Instance->CCR;
 800200e:	6808      	ldr	r0, [r1, #0]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002010:	f36f 100d 	bfc	r0, #4, #10
  tmp |=  hdma->Init.Direction        |
 8002014:	6853      	ldr	r3, [r2, #4]
 8002016:	6894      	ldr	r4, [r2, #8]
 8002018:	4323      	orrs	r3, r4
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800201a:	68d4      	ldr	r4, [r2, #12]
 800201c:	4323      	orrs	r3, r4
 800201e:	6914      	ldr	r4, [r2, #16]
 8002020:	4323      	orrs	r3, r4
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002022:	6954      	ldr	r4, [r2, #20]
 8002024:	4323      	orrs	r3, r4
 8002026:	6994      	ldr	r4, [r2, #24]
 8002028:	4323      	orrs	r3, r4
          hdma->Init.Mode                | hdma->Init.Priority;
 800202a:	69d4      	ldr	r4, [r2, #28]
 800202c:	4323      	orrs	r3, r4
  tmp |=  hdma->Init.Direction        |
 800202e:	4303      	orrs	r3, r0
  hdma->Instance->CCR = tmp;
 8002030:	600b      	str	r3, [r1, #0]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002032:	2000      	movs	r0, #0
 8002034:	6390      	str	r0, [r2, #56]	@ 0x38
  hdma->State = HAL_DMA_STATE_READY;
 8002036:	2301      	movs	r3, #1
 8002038:	f882 3021 	strb.w	r3, [r2, #33]	@ 0x21
  hdma->Lock = HAL_UNLOCKED;
 800203c:	f882 0020 	strb.w	r0, [r2, #32]
}
 8002040:	bc10      	pop	{r4}
 8002042:	4770      	bx	lr
    return HAL_ERROR;
 8002044:	2001      	movs	r0, #1
}
 8002046:	4770      	bx	lr
 8002048:	bffdfff8 	.word	0xbffdfff8
 800204c:	cccccccd 	.word	0xcccccccd
 8002050:	40020000 	.word	0x40020000

08002054 <HAL_DMA_Start_IT>:
{
 8002054:	b538      	push	{r3, r4, r5, lr}
 8002056:	4604      	mov	r4, r0
  __HAL_LOCK(hdma);
 8002058:	f890 0020 	ldrb.w	r0, [r0, #32]
 800205c:	2801      	cmp	r0, #1
 800205e:	d032      	beq.n	80020c6 <HAL_DMA_Start_IT+0x72>
 8002060:	2001      	movs	r0, #1
 8002062:	f884 0020 	strb.w	r0, [r4, #32]
  if(HAL_DMA_STATE_READY == hdma->State)
 8002066:	f894 0021 	ldrb.w	r0, [r4, #33]	@ 0x21
 800206a:	b2c0      	uxtb	r0, r0
 800206c:	2801      	cmp	r0, #1
 800206e:	d004      	beq.n	800207a <HAL_DMA_Start_IT+0x26>
    __HAL_UNLOCK(hdma); 
 8002070:	2300      	movs	r3, #0
 8002072:	f884 3020 	strb.w	r3, [r4, #32]
    status = HAL_BUSY;
 8002076:	2002      	movs	r0, #2
}
 8002078:	bd38      	pop	{r3, r4, r5, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 800207a:	2002      	movs	r0, #2
 800207c:	f884 0021 	strb.w	r0, [r4, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002080:	2000      	movs	r0, #0
 8002082:	63a0      	str	r0, [r4, #56]	@ 0x38
    __HAL_DMA_DISABLE(hdma);
 8002084:	6825      	ldr	r5, [r4, #0]
 8002086:	6828      	ldr	r0, [r5, #0]
 8002088:	f020 0001 	bic.w	r0, r0, #1
 800208c:	6028      	str	r0, [r5, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800208e:	4620      	mov	r0, r4
 8002090:	f7ff ff96 	bl	8001fc0 <DMA_SetConfig>
    if(NULL != hdma->XferHalfCpltCallback)
 8002094:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8002096:	b15b      	cbz	r3, 80020b0 <HAL_DMA_Start_IT+0x5c>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002098:	6822      	ldr	r2, [r4, #0]
 800209a:	6813      	ldr	r3, [r2, #0]
 800209c:	f043 030e 	orr.w	r3, r3, #14
 80020a0:	6013      	str	r3, [r2, #0]
    __HAL_DMA_ENABLE(hdma);
 80020a2:	6822      	ldr	r2, [r4, #0]
 80020a4:	6813      	ldr	r3, [r2, #0]
 80020a6:	f043 0301 	orr.w	r3, r3, #1
 80020aa:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80020ac:	2000      	movs	r0, #0
 80020ae:	e7e3      	b.n	8002078 <HAL_DMA_Start_IT+0x24>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80020b0:	6822      	ldr	r2, [r4, #0]
 80020b2:	6813      	ldr	r3, [r2, #0]
 80020b4:	f023 0304 	bic.w	r3, r3, #4
 80020b8:	6013      	str	r3, [r2, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80020ba:	6822      	ldr	r2, [r4, #0]
 80020bc:	6813      	ldr	r3, [r2, #0]
 80020be:	f043 030a 	orr.w	r3, r3, #10
 80020c2:	6013      	str	r3, [r2, #0]
 80020c4:	e7ed      	b.n	80020a2 <HAL_DMA_Start_IT+0x4e>
  __HAL_LOCK(hdma);
 80020c6:	2002      	movs	r0, #2
 80020c8:	e7d6      	b.n	8002078 <HAL_DMA_Start_IT+0x24>
	...

080020cc <HAL_DMA_IRQHandler>:
{
 80020cc:	b538      	push	{r3, r4, r5, lr}
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80020ce:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 80020d0:	681a      	ldr	r2, [r3, #0]
  uint32_t source_it = hdma->Instance->CCR;
 80020d2:	6804      	ldr	r4, [r0, #0]
 80020d4:	6825      	ldr	r5, [r4, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80020d6:	6c01      	ldr	r1, [r0, #64]	@ 0x40
 80020d8:	2304      	movs	r3, #4
 80020da:	408b      	lsls	r3, r1
 80020dc:	4213      	tst	r3, r2
 80020de:	d035      	beq.n	800214c <HAL_DMA_IRQHandler+0x80>
 80020e0:	f015 0f04 	tst.w	r5, #4
 80020e4:	d032      	beq.n	800214c <HAL_DMA_IRQHandler+0x80>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80020e6:	6823      	ldr	r3, [r4, #0]
 80020e8:	f013 0f20 	tst.w	r3, #32
 80020ec:	d103      	bne.n	80020f6 <HAL_DMA_IRQHandler+0x2a>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80020ee:	6823      	ldr	r3, [r4, #0]
 80020f0:	f023 0304 	bic.w	r3, r3, #4
 80020f4:	6023      	str	r3, [r4, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80020f6:	6803      	ldr	r3, [r0, #0]
 80020f8:	4a43      	ldr	r2, [pc, #268]	@ (8002208 <HAL_DMA_IRQHandler+0x13c>)
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d014      	beq.n	8002128 <HAL_DMA_IRQHandler+0x5c>
 80020fe:	3214      	adds	r2, #20
 8002100:	4293      	cmp	r3, r2
 8002102:	d018      	beq.n	8002136 <HAL_DMA_IRQHandler+0x6a>
 8002104:	3214      	adds	r2, #20
 8002106:	4293      	cmp	r3, r2
 8002108:	d017      	beq.n	800213a <HAL_DMA_IRQHandler+0x6e>
 800210a:	3214      	adds	r2, #20
 800210c:	4293      	cmp	r3, r2
 800210e:	d017      	beq.n	8002140 <HAL_DMA_IRQHandler+0x74>
 8002110:	3214      	adds	r2, #20
 8002112:	4293      	cmp	r3, r2
 8002114:	d017      	beq.n	8002146 <HAL_DMA_IRQHandler+0x7a>
 8002116:	3214      	adds	r2, #20
 8002118:	4293      	cmp	r3, r2
 800211a:	d002      	beq.n	8002122 <HAL_DMA_IRQHandler+0x56>
 800211c:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8002120:	e003      	b.n	800212a <HAL_DMA_IRQHandler+0x5e>
 8002122:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8002126:	e000      	b.n	800212a <HAL_DMA_IRQHandler+0x5e>
 8002128:	2204      	movs	r2, #4
 800212a:	4b38      	ldr	r3, [pc, #224]	@ (800220c <HAL_DMA_IRQHandler+0x140>)
 800212c:	605a      	str	r2, [r3, #4]
    if(hdma->XferHalfCpltCallback != NULL)
 800212e:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8002130:	b103      	cbz	r3, 8002134 <HAL_DMA_IRQHandler+0x68>
      hdma->XferHalfCpltCallback(hdma);
 8002132:	4798      	blx	r3
}
 8002134:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002136:	2240      	movs	r2, #64	@ 0x40
 8002138:	e7f7      	b.n	800212a <HAL_DMA_IRQHandler+0x5e>
 800213a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800213e:	e7f4      	b.n	800212a <HAL_DMA_IRQHandler+0x5e>
 8002140:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002144:	e7f1      	b.n	800212a <HAL_DMA_IRQHandler+0x5e>
 8002146:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800214a:	e7ee      	b.n	800212a <HAL_DMA_IRQHandler+0x5e>
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 800214c:	2302      	movs	r3, #2
 800214e:	408b      	lsls	r3, r1
 8002150:	4213      	tst	r3, r2
 8002152:	d03c      	beq.n	80021ce <HAL_DMA_IRQHandler+0x102>
 8002154:	f015 0f02 	tst.w	r5, #2
 8002158:	d039      	beq.n	80021ce <HAL_DMA_IRQHandler+0x102>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800215a:	6823      	ldr	r3, [r4, #0]
 800215c:	f013 0f20 	tst.w	r3, #32
 8002160:	d106      	bne.n	8002170 <HAL_DMA_IRQHandler+0xa4>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002162:	6823      	ldr	r3, [r4, #0]
 8002164:	f023 030a 	bic.w	r3, r3, #10
 8002168:	6023      	str	r3, [r4, #0]
      hdma->State = HAL_DMA_STATE_READY;
 800216a:	2301      	movs	r3, #1
 800216c:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002170:	6803      	ldr	r3, [r0, #0]
 8002172:	4a25      	ldr	r2, [pc, #148]	@ (8002208 <HAL_DMA_IRQHandler+0x13c>)
 8002174:	4293      	cmp	r3, r2
 8002176:	d014      	beq.n	80021a2 <HAL_DMA_IRQHandler+0xd6>
 8002178:	3214      	adds	r2, #20
 800217a:	4293      	cmp	r3, r2
 800217c:	d01c      	beq.n	80021b8 <HAL_DMA_IRQHandler+0xec>
 800217e:	3214      	adds	r2, #20
 8002180:	4293      	cmp	r3, r2
 8002182:	d01b      	beq.n	80021bc <HAL_DMA_IRQHandler+0xf0>
 8002184:	3214      	adds	r2, #20
 8002186:	4293      	cmp	r3, r2
 8002188:	d01b      	beq.n	80021c2 <HAL_DMA_IRQHandler+0xf6>
 800218a:	3214      	adds	r2, #20
 800218c:	4293      	cmp	r3, r2
 800218e:	d01b      	beq.n	80021c8 <HAL_DMA_IRQHandler+0xfc>
 8002190:	3214      	adds	r2, #20
 8002192:	4293      	cmp	r3, r2
 8002194:	d002      	beq.n	800219c <HAL_DMA_IRQHandler+0xd0>
 8002196:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800219a:	e003      	b.n	80021a4 <HAL_DMA_IRQHandler+0xd8>
 800219c:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 80021a0:	e000      	b.n	80021a4 <HAL_DMA_IRQHandler+0xd8>
 80021a2:	2202      	movs	r2, #2
 80021a4:	4b19      	ldr	r3, [pc, #100]	@ (800220c <HAL_DMA_IRQHandler+0x140>)
 80021a6:	605a      	str	r2, [r3, #4]
    __HAL_UNLOCK(hdma);
 80021a8:	2300      	movs	r3, #0
 80021aa:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferCpltCallback != NULL)
 80021ae:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d0bf      	beq.n	8002134 <HAL_DMA_IRQHandler+0x68>
      hdma->XferCpltCallback(hdma);
 80021b4:	4798      	blx	r3
 80021b6:	e7bd      	b.n	8002134 <HAL_DMA_IRQHandler+0x68>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80021b8:	2220      	movs	r2, #32
 80021ba:	e7f3      	b.n	80021a4 <HAL_DMA_IRQHandler+0xd8>
 80021bc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80021c0:	e7f0      	b.n	80021a4 <HAL_DMA_IRQHandler+0xd8>
 80021c2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80021c6:	e7ed      	b.n	80021a4 <HAL_DMA_IRQHandler+0xd8>
 80021c8:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80021cc:	e7ea      	b.n	80021a4 <HAL_DMA_IRQHandler+0xd8>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80021ce:	2308      	movs	r3, #8
 80021d0:	408b      	lsls	r3, r1
 80021d2:	4213      	tst	r3, r2
 80021d4:	d0ae      	beq.n	8002134 <HAL_DMA_IRQHandler+0x68>
 80021d6:	f015 0f08 	tst.w	r5, #8
 80021da:	d0ab      	beq.n	8002134 <HAL_DMA_IRQHandler+0x68>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80021dc:	6823      	ldr	r3, [r4, #0]
 80021de:	f023 030e 	bic.w	r3, r3, #14
 80021e2:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80021e4:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 80021e6:	6bc1      	ldr	r1, [r0, #60]	@ 0x3c
 80021e8:	2301      	movs	r3, #1
 80021ea:	fa03 f202 	lsl.w	r2, r3, r2
 80021ee:	604a      	str	r2, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80021f0:	6383      	str	r3, [r0, #56]	@ 0x38
    hdma->State = HAL_DMA_STATE_READY;
 80021f2:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
    __HAL_UNLOCK(hdma);
 80021f6:	2300      	movs	r3, #0
 80021f8:	f880 3020 	strb.w	r3, [r0, #32]
    if (hdma->XferErrorCallback != NULL)
 80021fc:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d098      	beq.n	8002134 <HAL_DMA_IRQHandler+0x68>
      hdma->XferErrorCallback(hdma);
 8002202:	4798      	blx	r3
  return;
 8002204:	e796      	b.n	8002134 <HAL_DMA_IRQHandler+0x68>
 8002206:	bf00      	nop
 8002208:	40020008 	.word	0x40020008
 800220c:	40020000 	.word	0x40020000

08002210 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002210:	b570      	push	{r4, r5, r6, lr}
 8002212:	b082      	sub	sp, #8
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002214:	2400      	movs	r4, #0
  uint32_t position = 0x00u;
 8002216:	46a4      	mov	ip, r4
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002218:	e0a1      	b.n	800235e <HAL_GPIO_Init+0x14e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800221a:	4d7e      	ldr	r5, [pc, #504]	@ (8002414 <HAL_GPIO_Init+0x204>)
 800221c:	42ab      	cmp	r3, r5
 800221e:	d014      	beq.n	800224a <HAL_GPIO_Init+0x3a>
 8002220:	d80c      	bhi.n	800223c <HAL_GPIO_Init+0x2c>
 8002222:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 8002226:	42ab      	cmp	r3, r5
 8002228:	d00f      	beq.n	800224a <HAL_GPIO_Init+0x3a>
 800222a:	f505 2570 	add.w	r5, r5, #983040	@ 0xf0000
 800222e:	42ab      	cmp	r3, r5
 8002230:	d00b      	beq.n	800224a <HAL_GPIO_Init+0x3a>
 8002232:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 8002236:	42ab      	cmp	r3, r5
 8002238:	d110      	bne.n	800225c <HAL_GPIO_Init+0x4c>
 800223a:	e006      	b.n	800224a <HAL_GPIO_Init+0x3a>
 800223c:	4d76      	ldr	r5, [pc, #472]	@ (8002418 <HAL_GPIO_Init+0x208>)
 800223e:	42ab      	cmp	r3, r5
 8002240:	d003      	beq.n	800224a <HAL_GPIO_Init+0x3a>
 8002242:	f505 3580 	add.w	r5, r5, #65536	@ 0x10000
 8002246:	42ab      	cmp	r3, r5
 8002248:	d108      	bne.n	800225c <HAL_GPIO_Init+0x4c>
        case GPIO_MODE_EVT_RISING:
        case GPIO_MODE_EVT_FALLING:
        case GPIO_MODE_EVT_RISING_FALLING:
          /* Check the GPIO pull parameter */
          assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800224a:	688b      	ldr	r3, [r1, #8]
 800224c:	2b00      	cmp	r3, #0
 800224e:	d050      	beq.n	80022f2 <HAL_GPIO_Init+0xe2>
          {
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
          }
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002250:	2b01      	cmp	r3, #1
 8002252:	d049      	beq.n	80022e8 <HAL_GPIO_Init+0xd8>
          else /* GPIO_PULLDOWN */
          {
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;

            /* Reset the corresponding ODR bit */
            GPIOx->BRR = ioposition;
 8002254:	6142      	str	r2, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002256:	2408      	movs	r4, #8
 8002258:	e000      	b.n	800225c <HAL_GPIO_Init+0x4c>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800225a:	68cc      	ldr	r4, [r1, #12]
          break;
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800225c:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 8002260:	d849      	bhi.n	80022f6 <HAL_GPIO_Init+0xe6>
 8002262:	4606      	mov	r6, r0
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002264:	ea4f 028c 	mov.w	r2, ip, lsl #2

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002268:	6833      	ldr	r3, [r6, #0]
 800226a:	250f      	movs	r5, #15
 800226c:	4095      	lsls	r5, r2
 800226e:	ea23 0305 	bic.w	r3, r3, r5
 8002272:	fa04 f202 	lsl.w	r2, r4, r2
 8002276:	4313      	orrs	r3, r2
 8002278:	6033      	str	r3, [r6, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800227a:	684b      	ldr	r3, [r1, #4]
 800227c:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 8002280:	d06b      	beq.n	800235a <HAL_GPIO_Init+0x14a>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002282:	4b66      	ldr	r3, [pc, #408]	@ (800241c <HAL_GPIO_Init+0x20c>)
 8002284:	699a      	ldr	r2, [r3, #24]
 8002286:	f042 0201 	orr.w	r2, r2, #1
 800228a:	619a      	str	r2, [r3, #24]
 800228c:	699b      	ldr	r3, [r3, #24]
 800228e:	f003 0301 	and.w	r3, r3, #1
 8002292:	9301      	str	r3, [sp, #4]
 8002294:	9b01      	ldr	r3, [sp, #4]
        temp = AFIO->EXTICR[position >> 2u];
 8002296:	ea4f 029c 	mov.w	r2, ip, lsr #2
 800229a:	1c95      	adds	r5, r2, #2
 800229c:	4b60      	ldr	r3, [pc, #384]	@ (8002420 <HAL_GPIO_Init+0x210>)
 800229e:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80022a2:	f00c 0503 	and.w	r5, ip, #3
 80022a6:	00ad      	lsls	r5, r5, #2
 80022a8:	230f      	movs	r3, #15
 80022aa:	40ab      	lsls	r3, r5
 80022ac:	ea26 0603 	bic.w	r6, r6, r3
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80022b0:	4b5c      	ldr	r3, [pc, #368]	@ (8002424 <HAL_GPIO_Init+0x214>)
 80022b2:	4298      	cmp	r0, r3
 80022b4:	d026      	beq.n	8002304 <HAL_GPIO_Init+0xf4>
 80022b6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80022ba:	4298      	cmp	r0, r3
 80022bc:	f000 808c 	beq.w	80023d8 <HAL_GPIO_Init+0x1c8>
 80022c0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80022c4:	4298      	cmp	r0, r3
 80022c6:	f000 8089 	beq.w	80023dc <HAL_GPIO_Init+0x1cc>
 80022ca:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80022ce:	4298      	cmp	r0, r3
 80022d0:	d016      	beq.n	8002300 <HAL_GPIO_Init+0xf0>
 80022d2:	2304      	movs	r3, #4
 80022d4:	e017      	b.n	8002306 <HAL_GPIO_Init+0xf6>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80022d6:	68cc      	ldr	r4, [r1, #12]
 80022d8:	3404      	adds	r4, #4
          break;
 80022da:	e7bf      	b.n	800225c <HAL_GPIO_Init+0x4c>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80022dc:	68cc      	ldr	r4, [r1, #12]
 80022de:	3408      	adds	r4, #8
          break;
 80022e0:	e7bc      	b.n	800225c <HAL_GPIO_Init+0x4c>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80022e2:	68cc      	ldr	r4, [r1, #12]
 80022e4:	340c      	adds	r4, #12
          break;
 80022e6:	e7b9      	b.n	800225c <HAL_GPIO_Init+0x4c>
            GPIOx->BSRR = ioposition;
 80022e8:	6102      	str	r2, [r0, #16]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80022ea:	2408      	movs	r4, #8
 80022ec:	e7b6      	b.n	800225c <HAL_GPIO_Init+0x4c>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80022ee:	2400      	movs	r4, #0
 80022f0:	e7b4      	b.n	800225c <HAL_GPIO_Init+0x4c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80022f2:	2404      	movs	r4, #4
 80022f4:	e7b2      	b.n	800225c <HAL_GPIO_Init+0x4c>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80022f6:	1d06      	adds	r6, r0, #4
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80022f8:	f1ac 0208 	sub.w	r2, ip, #8
 80022fc:	0092      	lsls	r2, r2, #2
 80022fe:	e7b3      	b.n	8002268 <HAL_GPIO_Init+0x58>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002300:	2303      	movs	r3, #3
 8002302:	e000      	b.n	8002306 <HAL_GPIO_Init+0xf6>
 8002304:	2300      	movs	r3, #0
 8002306:	40ab      	lsls	r3, r5
 8002308:	4333      	orrs	r3, r6
        AFIO->EXTICR[position >> 2u] = temp;
 800230a:	3202      	adds	r2, #2
 800230c:	4d44      	ldr	r5, [pc, #272]	@ (8002420 <HAL_GPIO_Init+0x210>)
 800230e:	f845 3022 	str.w	r3, [r5, r2, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002312:	684b      	ldr	r3, [r1, #4]
 8002314:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8002318:	d062      	beq.n	80023e0 <HAL_GPIO_Init+0x1d0>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800231a:	4a43      	ldr	r2, [pc, #268]	@ (8002428 <HAL_GPIO_Init+0x218>)
 800231c:	6893      	ldr	r3, [r2, #8]
 800231e:	ea43 030e 	orr.w	r3, r3, lr
 8002322:	6093      	str	r3, [r2, #8]
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002324:	684b      	ldr	r3, [r1, #4]
 8002326:	f413 1f00 	tst.w	r3, #2097152	@ 0x200000
 800232a:	d05f      	beq.n	80023ec <HAL_GPIO_Init+0x1dc>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800232c:	4a3e      	ldr	r2, [pc, #248]	@ (8002428 <HAL_GPIO_Init+0x218>)
 800232e:	68d3      	ldr	r3, [r2, #12]
 8002330:	ea43 030e 	orr.w	r3, r3, lr
 8002334:	60d3      	str	r3, [r2, #12]
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002336:	684b      	ldr	r3, [r1, #4]
 8002338:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 800233c:	d05c      	beq.n	80023f8 <HAL_GPIO_Init+0x1e8>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800233e:	4a3a      	ldr	r2, [pc, #232]	@ (8002428 <HAL_GPIO_Init+0x218>)
 8002340:	6853      	ldr	r3, [r2, #4]
 8002342:	ea43 030e 	orr.w	r3, r3, lr
 8002346:	6053      	str	r3, [r2, #4]
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002348:	684b      	ldr	r3, [r1, #4]
 800234a:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 800234e:	d059      	beq.n	8002404 <HAL_GPIO_Init+0x1f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002350:	4a35      	ldr	r2, [pc, #212]	@ (8002428 <HAL_GPIO_Init+0x218>)
 8002352:	6813      	ldr	r3, [r2, #0]
 8002354:	ea43 030e 	orr.w	r3, r3, lr
 8002358:	6013      	str	r3, [r2, #0]
          CLEAR_BIT(EXTI->IMR, iocurrent);
        }
      }
    }

	position++;
 800235a:	f10c 0c01 	add.w	ip, ip, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800235e:	680b      	ldr	r3, [r1, #0]
 8002360:	fa33 f20c 	lsrs.w	r2, r3, ip
 8002364:	d054      	beq.n	8002410 <HAL_GPIO_Init+0x200>
    ioposition = (0x01uL << position);
 8002366:	2201      	movs	r2, #1
 8002368:	fa02 f20c 	lsl.w	r2, r2, ip
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800236c:	ea03 0e02 	and.w	lr, r3, r2
    if (iocurrent == ioposition)
 8002370:	ea32 0303 	bics.w	r3, r2, r3
 8002374:	d1f1      	bne.n	800235a <HAL_GPIO_Init+0x14a>
      switch (GPIO_Init->Mode)
 8002376:	684b      	ldr	r3, [r1, #4]
 8002378:	2b12      	cmp	r3, #18
 800237a:	f63f af4e 	bhi.w	800221a <HAL_GPIO_Init+0xa>
 800237e:	2b12      	cmp	r3, #18
 8002380:	f63f af6c 	bhi.w	800225c <HAL_GPIO_Init+0x4c>
 8002384:	a501      	add	r5, pc, #4	@ (adr r5, 800238c <HAL_GPIO_Init+0x17c>)
 8002386:	f855 f023 	ldr.w	pc, [r5, r3, lsl #2]
 800238a:	bf00      	nop
 800238c:	0800224b 	.word	0x0800224b
 8002390:	0800225b 	.word	0x0800225b
 8002394:	080022dd 	.word	0x080022dd
 8002398:	080022ef 	.word	0x080022ef
 800239c:	0800225d 	.word	0x0800225d
 80023a0:	0800225d 	.word	0x0800225d
 80023a4:	0800225d 	.word	0x0800225d
 80023a8:	0800225d 	.word	0x0800225d
 80023ac:	0800225d 	.word	0x0800225d
 80023b0:	0800225d 	.word	0x0800225d
 80023b4:	0800225d 	.word	0x0800225d
 80023b8:	0800225d 	.word	0x0800225d
 80023bc:	0800225d 	.word	0x0800225d
 80023c0:	0800225d 	.word	0x0800225d
 80023c4:	0800225d 	.word	0x0800225d
 80023c8:	0800225d 	.word	0x0800225d
 80023cc:	0800225d 	.word	0x0800225d
 80023d0:	080022d7 	.word	0x080022d7
 80023d4:	080022e3 	.word	0x080022e3
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80023d8:	2301      	movs	r3, #1
 80023da:	e794      	b.n	8002306 <HAL_GPIO_Init+0xf6>
 80023dc:	2302      	movs	r3, #2
 80023de:	e792      	b.n	8002306 <HAL_GPIO_Init+0xf6>
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80023e0:	4a11      	ldr	r2, [pc, #68]	@ (8002428 <HAL_GPIO_Init+0x218>)
 80023e2:	6893      	ldr	r3, [r2, #8]
 80023e4:	ea23 030e 	bic.w	r3, r3, lr
 80023e8:	6093      	str	r3, [r2, #8]
 80023ea:	e79b      	b.n	8002324 <HAL_GPIO_Init+0x114>
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80023ec:	4a0e      	ldr	r2, [pc, #56]	@ (8002428 <HAL_GPIO_Init+0x218>)
 80023ee:	68d3      	ldr	r3, [r2, #12]
 80023f0:	ea23 030e 	bic.w	r3, r3, lr
 80023f4:	60d3      	str	r3, [r2, #12]
 80023f6:	e79e      	b.n	8002336 <HAL_GPIO_Init+0x126>
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80023f8:	4a0b      	ldr	r2, [pc, #44]	@ (8002428 <HAL_GPIO_Init+0x218>)
 80023fa:	6853      	ldr	r3, [r2, #4]
 80023fc:	ea23 030e 	bic.w	r3, r3, lr
 8002400:	6053      	str	r3, [r2, #4]
 8002402:	e7a1      	b.n	8002348 <HAL_GPIO_Init+0x138>
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002404:	4a08      	ldr	r2, [pc, #32]	@ (8002428 <HAL_GPIO_Init+0x218>)
 8002406:	6813      	ldr	r3, [r2, #0]
 8002408:	ea23 030e 	bic.w	r3, r3, lr
 800240c:	6013      	str	r3, [r2, #0]
 800240e:	e7a4      	b.n	800235a <HAL_GPIO_Init+0x14a>
  }
}
 8002410:	b002      	add	sp, #8
 8002412:	bd70      	pop	{r4, r5, r6, pc}
 8002414:	10220000 	.word	0x10220000
 8002418:	10310000 	.word	0x10310000
 800241c:	40021000 	.word	0x40021000
 8002420:	40010000 	.word	0x40010000
 8002424:	40010800 	.word	0x40010800
 8002428:	40010400 	.word	0x40010400

0800242c <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800242c:	6883      	ldr	r3, [r0, #8]
 800242e:	4219      	tst	r1, r3
 8002430:	d001      	beq.n	8002436 <HAL_GPIO_ReadPin+0xa>
  {
    bitstatus = GPIO_PIN_SET;
 8002432:	2001      	movs	r0, #1
 8002434:	4770      	bx	lr
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002436:	2000      	movs	r0, #0
  }
  return bitstatus;
}
 8002438:	4770      	bx	lr

0800243a <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800243a:	b10a      	cbz	r2, 8002440 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 800243c:	6101      	str	r1, [r0, #16]
 800243e:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002440:	0409      	lsls	r1, r1, #16
 8002442:	6101      	str	r1, [r0, #16]
  }
}
 8002444:	4770      	bx	lr
	...

08002448 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002448:	b082      	sub	sp, #8

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800244a:	4b0e      	ldr	r3, [pc, #56]	@ (8002484 <HAL_MspInit+0x3c>)
 800244c:	699a      	ldr	r2, [r3, #24]
 800244e:	f042 0201 	orr.w	r2, r2, #1
 8002452:	619a      	str	r2, [r3, #24]
 8002454:	699a      	ldr	r2, [r3, #24]
 8002456:	f002 0201 	and.w	r2, r2, #1
 800245a:	9200      	str	r2, [sp, #0]
 800245c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800245e:	69da      	ldr	r2, [r3, #28]
 8002460:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8002464:	61da      	str	r2, [r3, #28]
 8002466:	69db      	ldr	r3, [r3, #28]
 8002468:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800246c:	9301      	str	r3, [sp, #4]
 800246e:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002470:	4a05      	ldr	r2, [pc, #20]	@ (8002488 <HAL_MspInit+0x40>)
 8002472:	6853      	ldr	r3, [r2, #4]
 8002474:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8002478:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800247c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800247e:	b002      	add	sp, #8
 8002480:	4770      	bx	lr
 8002482:	bf00      	nop
 8002484:	40021000 	.word	0x40021000
 8002488:	40010000 	.word	0x40010000

0800248c <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800248c:	b530      	push	{r4, r5, lr}
 800248e:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002490:	2300      	movs	r3, #0
 8002492:	9304      	str	r3, [sp, #16]
 8002494:	9305      	str	r3, [sp, #20]
 8002496:	9306      	str	r3, [sp, #24]
 8002498:	9307      	str	r3, [sp, #28]
  if(hadc->Instance==ADC1)
 800249a:	6802      	ldr	r2, [r0, #0]
 800249c:	4b29      	ldr	r3, [pc, #164]	@ (8002544 <HAL_ADC_MspInit+0xb8>)
 800249e:	429a      	cmp	r2, r3
 80024a0:	d001      	beq.n	80024a6 <HAL_ADC_MspInit+0x1a>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 80024a2:	b009      	add	sp, #36	@ 0x24
 80024a4:	bd30      	pop	{r4, r5, pc}
 80024a6:	4604      	mov	r4, r0
    __HAL_RCC_ADC1_CLK_ENABLE();
 80024a8:	f503 436c 	add.w	r3, r3, #60416	@ 0xec00
 80024ac:	699a      	ldr	r2, [r3, #24]
 80024ae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80024b2:	619a      	str	r2, [r3, #24]
 80024b4:	699a      	ldr	r2, [r3, #24]
 80024b6:	f402 7200 	and.w	r2, r2, #512	@ 0x200
 80024ba:	9201      	str	r2, [sp, #4]
 80024bc:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024be:	699a      	ldr	r2, [r3, #24]
 80024c0:	f042 0204 	orr.w	r2, r2, #4
 80024c4:	619a      	str	r2, [r3, #24]
 80024c6:	699a      	ldr	r2, [r3, #24]
 80024c8:	f002 0204 	and.w	r2, r2, #4
 80024cc:	9202      	str	r2, [sp, #8]
 80024ce:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80024d0:	699a      	ldr	r2, [r3, #24]
 80024d2:	f042 0208 	orr.w	r2, r2, #8
 80024d6:	619a      	str	r2, [r3, #24]
 80024d8:	699b      	ldr	r3, [r3, #24]
 80024da:	f003 0308 	and.w	r3, r3, #8
 80024de:	9303      	str	r3, [sp, #12]
 80024e0:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 80024e2:	23fe      	movs	r3, #254	@ 0xfe
 80024e4:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80024e6:	2503      	movs	r5, #3
 80024e8:	9505      	str	r5, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024ea:	a904      	add	r1, sp, #16
 80024ec:	4816      	ldr	r0, [pc, #88]	@ (8002548 <HAL_ADC_MspInit+0xbc>)
 80024ee:	f7ff fe8f 	bl	8002210 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80024f2:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80024f4:	9505      	str	r5, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024f6:	a904      	add	r1, sp, #16
 80024f8:	4814      	ldr	r0, [pc, #80]	@ (800254c <HAL_ADC_MspInit+0xc0>)
 80024fa:	f7ff fe89 	bl	8002210 <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA1_Channel1;
 80024fe:	4814      	ldr	r0, [pc, #80]	@ (8002550 <HAL_ADC_MspInit+0xc4>)
 8002500:	4b14      	ldr	r3, [pc, #80]	@ (8002554 <HAL_ADC_MspInit+0xc8>)
 8002502:	6003      	str	r3, [r0, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002504:	2300      	movs	r3, #0
 8002506:	6043      	str	r3, [r0, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002508:	6083      	str	r3, [r0, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800250a:	2280      	movs	r2, #128	@ 0x80
 800250c:	60c2      	str	r2, [r0, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800250e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002512:	6102      	str	r2, [r0, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002514:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002518:	6142      	str	r2, [r0, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800251a:	2220      	movs	r2, #32
 800251c:	6182      	str	r2, [r0, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800251e:	61c3      	str	r3, [r0, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002520:	f7ff fd64 	bl	8001fec <HAL_DMA_Init>
 8002524:	b958      	cbnz	r0, 800253e <HAL_ADC_MspInit+0xb2>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002526:	4b0a      	ldr	r3, [pc, #40]	@ (8002550 <HAL_ADC_MspInit+0xc4>)
 8002528:	6223      	str	r3, [r4, #32]
 800252a:	625c      	str	r4, [r3, #36]	@ 0x24
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 800252c:	2200      	movs	r2, #0
 800252e:	4611      	mov	r1, r2
 8002530:	2012      	movs	r0, #18
 8002532:	f7ff fd0f 	bl	8001f54 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 8002536:	2012      	movs	r0, #18
 8002538:	f7ff fd1c 	bl	8001f74 <HAL_NVIC_EnableIRQ>
}
 800253c:	e7b1      	b.n	80024a2 <HAL_ADC_MspInit+0x16>
      Error_Handler();
 800253e:	f7fe fedd 	bl	80012fc <Error_Handler>
 8002542:	e7f0      	b.n	8002526 <HAL_ADC_MspInit+0x9a>
 8002544:	40012400 	.word	0x40012400
 8002548:	40010800 	.word	0x40010800
 800254c:	40010c00 	.word	0x40010c00
 8002550:	20000174 	.word	0x20000174
 8002554:	40020008 	.word	0x40020008

08002558 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002558:	b082      	sub	sp, #8
  if(htim_base->Instance==TIM1)
 800255a:	6803      	ldr	r3, [r0, #0]
 800255c:	4a0f      	ldr	r2, [pc, #60]	@ (800259c <HAL_TIM_Base_MspInit+0x44>)
 800255e:	4293      	cmp	r3, r2
 8002560:	d004      	beq.n	800256c <HAL_TIM_Base_MspInit+0x14>
    __HAL_RCC_TIM1_CLK_ENABLE();
    /* USER CODE BEGIN TIM1_MspInit 1 */

    /* USER CODE END TIM1_MspInit 1 */
  }
  else if(htim_base->Instance==TIM2)
 8002562:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002566:	d00c      	beq.n	8002582 <HAL_TIM_Base_MspInit+0x2a>
    /* USER CODE BEGIN TIM2_MspInit 1 */

    /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002568:	b002      	add	sp, #8
 800256a:	4770      	bx	lr
    __HAL_RCC_TIM1_CLK_ENABLE();
 800256c:	4b0c      	ldr	r3, [pc, #48]	@ (80025a0 <HAL_TIM_Base_MspInit+0x48>)
 800256e:	699a      	ldr	r2, [r3, #24]
 8002570:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002574:	619a      	str	r2, [r3, #24]
 8002576:	699b      	ldr	r3, [r3, #24]
 8002578:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800257c:	9300      	str	r3, [sp, #0]
 800257e:	9b00      	ldr	r3, [sp, #0]
 8002580:	e7f2      	b.n	8002568 <HAL_TIM_Base_MspInit+0x10>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002582:	f503 3304 	add.w	r3, r3, #135168	@ 0x21000
 8002586:	69da      	ldr	r2, [r3, #28]
 8002588:	f042 0201 	orr.w	r2, r2, #1
 800258c:	61da      	str	r2, [r3, #28]
 800258e:	69db      	ldr	r3, [r3, #28]
 8002590:	f003 0301 	and.w	r3, r3, #1
 8002594:	9301      	str	r3, [sp, #4]
 8002596:	9b01      	ldr	r3, [sp, #4]
}
 8002598:	e7e6      	b.n	8002568 <HAL_TIM_Base_MspInit+0x10>
 800259a:	bf00      	nop
 800259c:	40012c00 	.word	0x40012c00
 80025a0:	40021000 	.word	0x40021000

080025a4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80025a4:	b510      	push	{r4, lr}
 80025a6:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025a8:	2300      	movs	r3, #0
 80025aa:	9304      	str	r3, [sp, #16]
 80025ac:	9305      	str	r3, [sp, #20]
 80025ae:	9306      	str	r3, [sp, #24]
 80025b0:	9307      	str	r3, [sp, #28]
  if(htim->Instance==TIM1)
 80025b2:	6803      	ldr	r3, [r0, #0]
 80025b4:	4a26      	ldr	r2, [pc, #152]	@ (8002650 <HAL_TIM_MspPostInit+0xac>)
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d004      	beq.n	80025c4 <HAL_TIM_MspPostInit+0x20>

    /* USER CODE BEGIN TIM1_MspPostInit 1 */

    /* USER CODE END TIM1_MspPostInit 1 */
  }
  else if(htim->Instance==TIM2)
 80025ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80025be:	d016      	beq.n	80025ee <HAL_TIM_MspPostInit+0x4a>
    /* USER CODE BEGIN TIM2_MspPostInit 1 */

    /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80025c0:	b008      	add	sp, #32
 80025c2:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025c4:	4b23      	ldr	r3, [pc, #140]	@ (8002654 <HAL_TIM_MspPostInit+0xb0>)
 80025c6:	699a      	ldr	r2, [r3, #24]
 80025c8:	f042 0204 	orr.w	r2, r2, #4
 80025cc:	619a      	str	r2, [r3, #24]
 80025ce:	699b      	ldr	r3, [r3, #24]
 80025d0:	f003 0304 	and.w	r3, r3, #4
 80025d4:	9301      	str	r3, [sp, #4]
 80025d6:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80025d8:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80025dc:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025de:	2302      	movs	r3, #2
 80025e0:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025e2:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025e4:	a904      	add	r1, sp, #16
 80025e6:	481c      	ldr	r0, [pc, #112]	@ (8002658 <HAL_TIM_MspPostInit+0xb4>)
 80025e8:	f7ff fe12 	bl	8002210 <HAL_GPIO_Init>
 80025ec:	e7e8      	b.n	80025c0 <HAL_TIM_MspPostInit+0x1c>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025ee:	f503 3304 	add.w	r3, r3, #135168	@ 0x21000
 80025f2:	699a      	ldr	r2, [r3, #24]
 80025f4:	f042 0204 	orr.w	r2, r2, #4
 80025f8:	619a      	str	r2, [r3, #24]
 80025fa:	699a      	ldr	r2, [r3, #24]
 80025fc:	f002 0204 	and.w	r2, r2, #4
 8002600:	9202      	str	r2, [sp, #8]
 8002602:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002604:	699a      	ldr	r2, [r3, #24]
 8002606:	f042 0208 	orr.w	r2, r2, #8
 800260a:	619a      	str	r2, [r3, #24]
 800260c:	699b      	ldr	r3, [r3, #24]
 800260e:	f003 0308 	and.w	r3, r3, #8
 8002612:	9303      	str	r3, [sp, #12]
 8002614:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002616:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800261a:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800261c:	2402      	movs	r4, #2
 800261e:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002620:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002622:	a904      	add	r1, sp, #16
 8002624:	480c      	ldr	r0, [pc, #48]	@ (8002658 <HAL_TIM_MspPostInit+0xb4>)
 8002626:	f7ff fdf3 	bl	8002210 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800262a:	2308      	movs	r3, #8
 800262c:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800262e:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002630:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002632:	a904      	add	r1, sp, #16
 8002634:	4809      	ldr	r0, [pc, #36]	@ (800265c <HAL_TIM_MspPostInit+0xb8>)
 8002636:	f7ff fdeb 	bl	8002210 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 800263a:	4a09      	ldr	r2, [pc, #36]	@ (8002660 <HAL_TIM_MspPostInit+0xbc>)
 800263c:	6853      	ldr	r3, [r2, #4]
 800263e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002642:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8002646:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800264a:	6053      	str	r3, [r2, #4]
}
 800264c:	e7b8      	b.n	80025c0 <HAL_TIM_MspPostInit+0x1c>
 800264e:	bf00      	nop
 8002650:	40012c00 	.word	0x40012c00
 8002654:	40021000 	.word	0x40021000
 8002658:	40010800 	.word	0x40010800
 800265c:	40010c00 	.word	0x40010c00
 8002660:	40010000 	.word	0x40010000

08002664 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002664:	b082      	sub	sp, #8
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002666:	4b08      	ldr	r3, [pc, #32]	@ (8002688 <RCC_Delay+0x24>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	4a08      	ldr	r2, [pc, #32]	@ (800268c <RCC_Delay+0x28>)
 800266c:	fba2 2303 	umull	r2, r3, r2, r3
 8002670:	0a5b      	lsrs	r3, r3, #9
 8002672:	fb00 f303 	mul.w	r3, r0, r3
 8002676:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 8002678:	bf00      	nop
  }
  while (Delay --);
 800267a:	9b01      	ldr	r3, [sp, #4]
 800267c:	1e5a      	subs	r2, r3, #1
 800267e:	9201      	str	r2, [sp, #4]
 8002680:	2b00      	cmp	r3, #0
 8002682:	d1f9      	bne.n	8002678 <RCC_Delay+0x14>
}
 8002684:	b002      	add	sp, #8
 8002686:	4770      	bx	lr
 8002688:	20000018 	.word	0x20000018
 800268c:	10624dd3 	.word	0x10624dd3

08002690 <HAL_RCC_OscConfig>:
  if (RCC_OscInitStruct == NULL)
 8002690:	2800      	cmp	r0, #0
 8002692:	f000 81f1 	beq.w	8002a78 <HAL_RCC_OscConfig+0x3e8>
{
 8002696:	b570      	push	{r4, r5, r6, lr}
 8002698:	b082      	sub	sp, #8
 800269a:	4604      	mov	r4, r0
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800269c:	6803      	ldr	r3, [r0, #0]
 800269e:	f013 0f01 	tst.w	r3, #1
 80026a2:	d02c      	beq.n	80026fe <HAL_RCC_OscConfig+0x6e>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80026a4:	4b99      	ldr	r3, [pc, #612]	@ (800290c <HAL_RCC_OscConfig+0x27c>)
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	f003 030c 	and.w	r3, r3, #12
 80026ac:	2b04      	cmp	r3, #4
 80026ae:	d01d      	beq.n	80026ec <HAL_RCC_OscConfig+0x5c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80026b0:	4b96      	ldr	r3, [pc, #600]	@ (800290c <HAL_RCC_OscConfig+0x27c>)
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	f003 030c 	and.w	r3, r3, #12
 80026b8:	2b08      	cmp	r3, #8
 80026ba:	d012      	beq.n	80026e2 <HAL_RCC_OscConfig+0x52>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80026bc:	6863      	ldr	r3, [r4, #4]
 80026be:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80026c2:	d041      	beq.n	8002748 <HAL_RCC_OscConfig+0xb8>
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d155      	bne.n	8002774 <HAL_RCC_OscConfig+0xe4>
 80026c8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80026cc:	f503 3304 	add.w	r3, r3, #135168	@ 0x21000
 80026d0:	681a      	ldr	r2, [r3, #0]
 80026d2:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80026d6:	601a      	str	r2, [r3, #0]
 80026d8:	681a      	ldr	r2, [r3, #0]
 80026da:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80026de:	601a      	str	r2, [r3, #0]
 80026e0:	e037      	b.n	8002752 <HAL_RCC_OscConfig+0xc2>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80026e2:	4b8a      	ldr	r3, [pc, #552]	@ (800290c <HAL_RCC_OscConfig+0x27c>)
 80026e4:	685b      	ldr	r3, [r3, #4]
 80026e6:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 80026ea:	d0e7      	beq.n	80026bc <HAL_RCC_OscConfig+0x2c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026ec:	4b87      	ldr	r3, [pc, #540]	@ (800290c <HAL_RCC_OscConfig+0x27c>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 80026f4:	d003      	beq.n	80026fe <HAL_RCC_OscConfig+0x6e>
 80026f6:	6863      	ldr	r3, [r4, #4]
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	f000 81bf 	beq.w	8002a7c <HAL_RCC_OscConfig+0x3ec>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80026fe:	6823      	ldr	r3, [r4, #0]
 8002700:	f013 0f02 	tst.w	r3, #2
 8002704:	d075      	beq.n	80027f2 <HAL_RCC_OscConfig+0x162>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002706:	4b81      	ldr	r3, [pc, #516]	@ (800290c <HAL_RCC_OscConfig+0x27c>)
 8002708:	685b      	ldr	r3, [r3, #4]
 800270a:	f013 0f0c 	tst.w	r3, #12
 800270e:	d05f      	beq.n	80027d0 <HAL_RCC_OscConfig+0x140>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002710:	4b7e      	ldr	r3, [pc, #504]	@ (800290c <HAL_RCC_OscConfig+0x27c>)
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	f003 030c 	and.w	r3, r3, #12
 8002718:	2b08      	cmp	r3, #8
 800271a:	d054      	beq.n	80027c6 <HAL_RCC_OscConfig+0x136>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800271c:	6923      	ldr	r3, [r4, #16]
 800271e:	2b00      	cmp	r3, #0
 8002720:	f000 808a 	beq.w	8002838 <HAL_RCC_OscConfig+0x1a8>
        __HAL_RCC_HSI_ENABLE();
 8002724:	4b7a      	ldr	r3, [pc, #488]	@ (8002910 <HAL_RCC_OscConfig+0x280>)
 8002726:	2201      	movs	r2, #1
 8002728:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800272a:	f7ff f8df 	bl	80018ec <HAL_GetTick>
 800272e:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002730:	4b76      	ldr	r3, [pc, #472]	@ (800290c <HAL_RCC_OscConfig+0x27c>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f013 0f02 	tst.w	r3, #2
 8002738:	d175      	bne.n	8002826 <HAL_RCC_OscConfig+0x196>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800273a:	f7ff f8d7 	bl	80018ec <HAL_GetTick>
 800273e:	1b40      	subs	r0, r0, r5
 8002740:	2802      	cmp	r0, #2
 8002742:	d9f5      	bls.n	8002730 <HAL_RCC_OscConfig+0xa0>
            return HAL_TIMEOUT;
 8002744:	2003      	movs	r0, #3
 8002746:	e19e      	b.n	8002a86 <HAL_RCC_OscConfig+0x3f6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002748:	4a70      	ldr	r2, [pc, #448]	@ (800290c <HAL_RCC_OscConfig+0x27c>)
 800274a:	6813      	ldr	r3, [r2, #0]
 800274c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002750:	6013      	str	r3, [r2, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002752:	6863      	ldr	r3, [r4, #4]
 8002754:	b343      	cbz	r3, 80027a8 <HAL_RCC_OscConfig+0x118>
        tickstart = HAL_GetTick();
 8002756:	f7ff f8c9 	bl	80018ec <HAL_GetTick>
 800275a:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800275c:	4b6b      	ldr	r3, [pc, #428]	@ (800290c <HAL_RCC_OscConfig+0x27c>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8002764:	d1cb      	bne.n	80026fe <HAL_RCC_OscConfig+0x6e>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002766:	f7ff f8c1 	bl	80018ec <HAL_GetTick>
 800276a:	1b40      	subs	r0, r0, r5
 800276c:	2864      	cmp	r0, #100	@ 0x64
 800276e:	d9f5      	bls.n	800275c <HAL_RCC_OscConfig+0xcc>
            return HAL_TIMEOUT;
 8002770:	2003      	movs	r0, #3
 8002772:	e188      	b.n	8002a86 <HAL_RCC_OscConfig+0x3f6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002774:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002778:	d009      	beq.n	800278e <HAL_RCC_OscConfig+0xfe>
 800277a:	4b64      	ldr	r3, [pc, #400]	@ (800290c <HAL_RCC_OscConfig+0x27c>)
 800277c:	681a      	ldr	r2, [r3, #0]
 800277e:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8002782:	601a      	str	r2, [r3, #0]
 8002784:	681a      	ldr	r2, [r3, #0]
 8002786:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800278a:	601a      	str	r2, [r3, #0]
 800278c:	e7e1      	b.n	8002752 <HAL_RCC_OscConfig+0xc2>
 800278e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002792:	f5a3 333c 	sub.w	r3, r3, #192512	@ 0x2f000
 8002796:	681a      	ldr	r2, [r3, #0]
 8002798:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 800279c:	601a      	str	r2, [r3, #0]
 800279e:	681a      	ldr	r2, [r3, #0]
 80027a0:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80027a4:	601a      	str	r2, [r3, #0]
 80027a6:	e7d4      	b.n	8002752 <HAL_RCC_OscConfig+0xc2>
        tickstart = HAL_GetTick();
 80027a8:	f7ff f8a0 	bl	80018ec <HAL_GetTick>
 80027ac:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027ae:	4b57      	ldr	r3, [pc, #348]	@ (800290c <HAL_RCC_OscConfig+0x27c>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 80027b6:	d0a2      	beq.n	80026fe <HAL_RCC_OscConfig+0x6e>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027b8:	f7ff f898 	bl	80018ec <HAL_GetTick>
 80027bc:	1b40      	subs	r0, r0, r5
 80027be:	2864      	cmp	r0, #100	@ 0x64
 80027c0:	d9f5      	bls.n	80027ae <HAL_RCC_OscConfig+0x11e>
            return HAL_TIMEOUT;
 80027c2:	2003      	movs	r0, #3
 80027c4:	e15f      	b.n	8002a86 <HAL_RCC_OscConfig+0x3f6>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80027c6:	4b51      	ldr	r3, [pc, #324]	@ (800290c <HAL_RCC_OscConfig+0x27c>)
 80027c8:	685b      	ldr	r3, [r3, #4]
 80027ca:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 80027ce:	d1a5      	bne.n	800271c <HAL_RCC_OscConfig+0x8c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027d0:	4b4e      	ldr	r3, [pc, #312]	@ (800290c <HAL_RCC_OscConfig+0x27c>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f013 0f02 	tst.w	r3, #2
 80027d8:	d003      	beq.n	80027e2 <HAL_RCC_OscConfig+0x152>
 80027da:	6923      	ldr	r3, [r4, #16]
 80027dc:	2b01      	cmp	r3, #1
 80027de:	f040 814f 	bne.w	8002a80 <HAL_RCC_OscConfig+0x3f0>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027e2:	4a4a      	ldr	r2, [pc, #296]	@ (800290c <HAL_RCC_OscConfig+0x27c>)
 80027e4:	6813      	ldr	r3, [r2, #0]
 80027e6:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 80027ea:	6961      	ldr	r1, [r4, #20]
 80027ec:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80027f0:	6013      	str	r3, [r2, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027f2:	6823      	ldr	r3, [r4, #0]
 80027f4:	f013 0f08 	tst.w	r3, #8
 80027f8:	d033      	beq.n	8002862 <HAL_RCC_OscConfig+0x1d2>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80027fa:	69a3      	ldr	r3, [r4, #24]
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d05c      	beq.n	80028ba <HAL_RCC_OscConfig+0x22a>
      __HAL_RCC_LSI_ENABLE();
 8002800:	4b43      	ldr	r3, [pc, #268]	@ (8002910 <HAL_RCC_OscConfig+0x280>)
 8002802:	2201      	movs	r2, #1
 8002804:	f8c3 2480 	str.w	r2, [r3, #1152]	@ 0x480
      tickstart = HAL_GetTick();
 8002808:	f7ff f870 	bl	80018ec <HAL_GetTick>
 800280c:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800280e:	4b3f      	ldr	r3, [pc, #252]	@ (800290c <HAL_RCC_OscConfig+0x27c>)
 8002810:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002812:	f013 0f02 	tst.w	r3, #2
 8002816:	d121      	bne.n	800285c <HAL_RCC_OscConfig+0x1cc>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002818:	f7ff f868 	bl	80018ec <HAL_GetTick>
 800281c:	1b40      	subs	r0, r0, r5
 800281e:	2802      	cmp	r0, #2
 8002820:	d9f5      	bls.n	800280e <HAL_RCC_OscConfig+0x17e>
          return HAL_TIMEOUT;
 8002822:	2003      	movs	r0, #3
 8002824:	e12f      	b.n	8002a86 <HAL_RCC_OscConfig+0x3f6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002826:	4a39      	ldr	r2, [pc, #228]	@ (800290c <HAL_RCC_OscConfig+0x27c>)
 8002828:	6813      	ldr	r3, [r2, #0]
 800282a:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800282e:	6961      	ldr	r1, [r4, #20]
 8002830:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002834:	6013      	str	r3, [r2, #0]
 8002836:	e7dc      	b.n	80027f2 <HAL_RCC_OscConfig+0x162>
        __HAL_RCC_HSI_DISABLE();
 8002838:	4b35      	ldr	r3, [pc, #212]	@ (8002910 <HAL_RCC_OscConfig+0x280>)
 800283a:	2200      	movs	r2, #0
 800283c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800283e:	f7ff f855 	bl	80018ec <HAL_GetTick>
 8002842:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002844:	4b31      	ldr	r3, [pc, #196]	@ (800290c <HAL_RCC_OscConfig+0x27c>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f013 0f02 	tst.w	r3, #2
 800284c:	d0d1      	beq.n	80027f2 <HAL_RCC_OscConfig+0x162>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800284e:	f7ff f84d 	bl	80018ec <HAL_GetTick>
 8002852:	1b40      	subs	r0, r0, r5
 8002854:	2802      	cmp	r0, #2
 8002856:	d9f5      	bls.n	8002844 <HAL_RCC_OscConfig+0x1b4>
            return HAL_TIMEOUT;
 8002858:	2003      	movs	r0, #3
 800285a:	e114      	b.n	8002a86 <HAL_RCC_OscConfig+0x3f6>
      RCC_Delay(1);
 800285c:	2001      	movs	r0, #1
 800285e:	f7ff ff01 	bl	8002664 <RCC_Delay>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002862:	6823      	ldr	r3, [r4, #0]
 8002864:	f013 0f04 	tst.w	r3, #4
 8002868:	f000 8096 	beq.w	8002998 <HAL_RCC_OscConfig+0x308>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800286c:	4b27      	ldr	r3, [pc, #156]	@ (800290c <HAL_RCC_OscConfig+0x27c>)
 800286e:	69db      	ldr	r3, [r3, #28]
 8002870:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 8002874:	d134      	bne.n	80028e0 <HAL_RCC_OscConfig+0x250>
      __HAL_RCC_PWR_CLK_ENABLE();
 8002876:	4b25      	ldr	r3, [pc, #148]	@ (800290c <HAL_RCC_OscConfig+0x27c>)
 8002878:	69da      	ldr	r2, [r3, #28]
 800287a:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 800287e:	61da      	str	r2, [r3, #28]
 8002880:	69db      	ldr	r3, [r3, #28]
 8002882:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002886:	9301      	str	r3, [sp, #4]
 8002888:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800288a:	2501      	movs	r5, #1
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800288c:	4b21      	ldr	r3, [pc, #132]	@ (8002914 <HAL_RCC_OscConfig+0x284>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8002894:	d026      	beq.n	80028e4 <HAL_RCC_OscConfig+0x254>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002896:	68e3      	ldr	r3, [r4, #12]
 8002898:	2b01      	cmp	r3, #1
 800289a:	d03d      	beq.n	8002918 <HAL_RCC_OscConfig+0x288>
 800289c:	2b00      	cmp	r3, #0
 800289e:	d153      	bne.n	8002948 <HAL_RCC_OscConfig+0x2b8>
 80028a0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80028a4:	f503 3304 	add.w	r3, r3, #135168	@ 0x21000
 80028a8:	6a1a      	ldr	r2, [r3, #32]
 80028aa:	f022 0201 	bic.w	r2, r2, #1
 80028ae:	621a      	str	r2, [r3, #32]
 80028b0:	6a1a      	ldr	r2, [r3, #32]
 80028b2:	f022 0204 	bic.w	r2, r2, #4
 80028b6:	621a      	str	r2, [r3, #32]
 80028b8:	e033      	b.n	8002922 <HAL_RCC_OscConfig+0x292>
      __HAL_RCC_LSI_DISABLE();
 80028ba:	4b15      	ldr	r3, [pc, #84]	@ (8002910 <HAL_RCC_OscConfig+0x280>)
 80028bc:	2200      	movs	r2, #0
 80028be:	f8c3 2480 	str.w	r2, [r3, #1152]	@ 0x480
      tickstart = HAL_GetTick();
 80028c2:	f7ff f813 	bl	80018ec <HAL_GetTick>
 80028c6:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028c8:	4b10      	ldr	r3, [pc, #64]	@ (800290c <HAL_RCC_OscConfig+0x27c>)
 80028ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028cc:	f013 0f02 	tst.w	r3, #2
 80028d0:	d0c7      	beq.n	8002862 <HAL_RCC_OscConfig+0x1d2>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028d2:	f7ff f80b 	bl	80018ec <HAL_GetTick>
 80028d6:	1b40      	subs	r0, r0, r5
 80028d8:	2802      	cmp	r0, #2
 80028da:	d9f5      	bls.n	80028c8 <HAL_RCC_OscConfig+0x238>
          return HAL_TIMEOUT;
 80028dc:	2003      	movs	r0, #3
 80028de:	e0d2      	b.n	8002a86 <HAL_RCC_OscConfig+0x3f6>
    FlagStatus       pwrclkchanged = RESET;
 80028e0:	2500      	movs	r5, #0
 80028e2:	e7d3      	b.n	800288c <HAL_RCC_OscConfig+0x1fc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80028e4:	4a0b      	ldr	r2, [pc, #44]	@ (8002914 <HAL_RCC_OscConfig+0x284>)
 80028e6:	6813      	ldr	r3, [r2, #0]
 80028e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80028ec:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 80028ee:	f7fe fffd 	bl	80018ec <HAL_GetTick>
 80028f2:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028f4:	4b07      	ldr	r3, [pc, #28]	@ (8002914 <HAL_RCC_OscConfig+0x284>)
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f413 7f80 	tst.w	r3, #256	@ 0x100
 80028fc:	d1cb      	bne.n	8002896 <HAL_RCC_OscConfig+0x206>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028fe:	f7fe fff5 	bl	80018ec <HAL_GetTick>
 8002902:	1b80      	subs	r0, r0, r6
 8002904:	2864      	cmp	r0, #100	@ 0x64
 8002906:	d9f5      	bls.n	80028f4 <HAL_RCC_OscConfig+0x264>
          return HAL_TIMEOUT;
 8002908:	2003      	movs	r0, #3
 800290a:	e0bc      	b.n	8002a86 <HAL_RCC_OscConfig+0x3f6>
 800290c:	40021000 	.word	0x40021000
 8002910:	42420000 	.word	0x42420000
 8002914:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002918:	4a5f      	ldr	r2, [pc, #380]	@ (8002a98 <HAL_RCC_OscConfig+0x408>)
 800291a:	6a13      	ldr	r3, [r2, #32]
 800291c:	f043 0301 	orr.w	r3, r3, #1
 8002920:	6213      	str	r3, [r2, #32]
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002922:	68e3      	ldr	r3, [r4, #12]
 8002924:	b333      	cbz	r3, 8002974 <HAL_RCC_OscConfig+0x2e4>
      tickstart = HAL_GetTick();
 8002926:	f7fe ffe1 	bl	80018ec <HAL_GetTick>
 800292a:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800292c:	4b5a      	ldr	r3, [pc, #360]	@ (8002a98 <HAL_RCC_OscConfig+0x408>)
 800292e:	6a1b      	ldr	r3, [r3, #32]
 8002930:	f013 0f02 	tst.w	r3, #2
 8002934:	d12f      	bne.n	8002996 <HAL_RCC_OscConfig+0x306>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002936:	f7fe ffd9 	bl	80018ec <HAL_GetTick>
 800293a:	1b80      	subs	r0, r0, r6
 800293c:	f241 3388 	movw	r3, #5000	@ 0x1388
 8002940:	4298      	cmp	r0, r3
 8002942:	d9f3      	bls.n	800292c <HAL_RCC_OscConfig+0x29c>
          return HAL_TIMEOUT;
 8002944:	2003      	movs	r0, #3
 8002946:	e09e      	b.n	8002a86 <HAL_RCC_OscConfig+0x3f6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002948:	2b05      	cmp	r3, #5
 800294a:	d009      	beq.n	8002960 <HAL_RCC_OscConfig+0x2d0>
 800294c:	4b52      	ldr	r3, [pc, #328]	@ (8002a98 <HAL_RCC_OscConfig+0x408>)
 800294e:	6a1a      	ldr	r2, [r3, #32]
 8002950:	f022 0201 	bic.w	r2, r2, #1
 8002954:	621a      	str	r2, [r3, #32]
 8002956:	6a1a      	ldr	r2, [r3, #32]
 8002958:	f022 0204 	bic.w	r2, r2, #4
 800295c:	621a      	str	r2, [r3, #32]
 800295e:	e7e0      	b.n	8002922 <HAL_RCC_OscConfig+0x292>
 8002960:	4b4d      	ldr	r3, [pc, #308]	@ (8002a98 <HAL_RCC_OscConfig+0x408>)
 8002962:	6a1a      	ldr	r2, [r3, #32]
 8002964:	f042 0204 	orr.w	r2, r2, #4
 8002968:	621a      	str	r2, [r3, #32]
 800296a:	6a1a      	ldr	r2, [r3, #32]
 800296c:	f042 0201 	orr.w	r2, r2, #1
 8002970:	621a      	str	r2, [r3, #32]
 8002972:	e7d6      	b.n	8002922 <HAL_RCC_OscConfig+0x292>
      tickstart = HAL_GetTick();
 8002974:	f7fe ffba 	bl	80018ec <HAL_GetTick>
 8002978:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800297a:	4b47      	ldr	r3, [pc, #284]	@ (8002a98 <HAL_RCC_OscConfig+0x408>)
 800297c:	6a1b      	ldr	r3, [r3, #32]
 800297e:	f013 0f02 	tst.w	r3, #2
 8002982:	d008      	beq.n	8002996 <HAL_RCC_OscConfig+0x306>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002984:	f7fe ffb2 	bl	80018ec <HAL_GetTick>
 8002988:	1b80      	subs	r0, r0, r6
 800298a:	f241 3388 	movw	r3, #5000	@ 0x1388
 800298e:	4298      	cmp	r0, r3
 8002990:	d9f3      	bls.n	800297a <HAL_RCC_OscConfig+0x2ea>
          return HAL_TIMEOUT;
 8002992:	2003      	movs	r0, #3
 8002994:	e077      	b.n	8002a86 <HAL_RCC_OscConfig+0x3f6>
    if (pwrclkchanged == SET)
 8002996:	b9e5      	cbnz	r5, 80029d2 <HAL_RCC_OscConfig+0x342>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002998:	69e3      	ldr	r3, [r4, #28]
 800299a:	2b00      	cmp	r3, #0
 800299c:	d072      	beq.n	8002a84 <HAL_RCC_OscConfig+0x3f4>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800299e:	4a3e      	ldr	r2, [pc, #248]	@ (8002a98 <HAL_RCC_OscConfig+0x408>)
 80029a0:	6852      	ldr	r2, [r2, #4]
 80029a2:	f002 020c 	and.w	r2, r2, #12
 80029a6:	2a08      	cmp	r2, #8
 80029a8:	d056      	beq.n	8002a58 <HAL_RCC_OscConfig+0x3c8>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80029aa:	2b02      	cmp	r3, #2
 80029ac:	d017      	beq.n	80029de <HAL_RCC_OscConfig+0x34e>
        __HAL_RCC_PLL_DISABLE();
 80029ae:	4b3b      	ldr	r3, [pc, #236]	@ (8002a9c <HAL_RCC_OscConfig+0x40c>)
 80029b0:	2200      	movs	r2, #0
 80029b2:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 80029b4:	f7fe ff9a 	bl	80018ec <HAL_GetTick>
 80029b8:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029ba:	4b37      	ldr	r3, [pc, #220]	@ (8002a98 <HAL_RCC_OscConfig+0x408>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 80029c2:	d047      	beq.n	8002a54 <HAL_RCC_OscConfig+0x3c4>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029c4:	f7fe ff92 	bl	80018ec <HAL_GetTick>
 80029c8:	1b00      	subs	r0, r0, r4
 80029ca:	2802      	cmp	r0, #2
 80029cc:	d9f5      	bls.n	80029ba <HAL_RCC_OscConfig+0x32a>
            return HAL_TIMEOUT;
 80029ce:	2003      	movs	r0, #3
 80029d0:	e059      	b.n	8002a86 <HAL_RCC_OscConfig+0x3f6>
      __HAL_RCC_PWR_CLK_DISABLE();
 80029d2:	4a31      	ldr	r2, [pc, #196]	@ (8002a98 <HAL_RCC_OscConfig+0x408>)
 80029d4:	69d3      	ldr	r3, [r2, #28]
 80029d6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80029da:	61d3      	str	r3, [r2, #28]
 80029dc:	e7dc      	b.n	8002998 <HAL_RCC_OscConfig+0x308>
        __HAL_RCC_PLL_DISABLE();
 80029de:	4b2f      	ldr	r3, [pc, #188]	@ (8002a9c <HAL_RCC_OscConfig+0x40c>)
 80029e0:	2200      	movs	r2, #0
 80029e2:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 80029e4:	f7fe ff82 	bl	80018ec <HAL_GetTick>
 80029e8:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029ea:	4b2b      	ldr	r3, [pc, #172]	@ (8002a98 <HAL_RCC_OscConfig+0x408>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 80029f2:	d006      	beq.n	8002a02 <HAL_RCC_OscConfig+0x372>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029f4:	f7fe ff7a 	bl	80018ec <HAL_GetTick>
 80029f8:	1b40      	subs	r0, r0, r5
 80029fa:	2802      	cmp	r0, #2
 80029fc:	d9f5      	bls.n	80029ea <HAL_RCC_OscConfig+0x35a>
            return HAL_TIMEOUT;
 80029fe:	2003      	movs	r0, #3
 8002a00:	e041      	b.n	8002a86 <HAL_RCC_OscConfig+0x3f6>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002a02:	6a23      	ldr	r3, [r4, #32]
 8002a04:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002a08:	d01a      	beq.n	8002a40 <HAL_RCC_OscConfig+0x3b0>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a0a:	4923      	ldr	r1, [pc, #140]	@ (8002a98 <HAL_RCC_OscConfig+0x408>)
 8002a0c:	684b      	ldr	r3, [r1, #4]
 8002a0e:	f423 1374 	bic.w	r3, r3, #3997696	@ 0x3d0000
 8002a12:	6a22      	ldr	r2, [r4, #32]
 8002a14:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8002a16:	4302      	orrs	r2, r0
 8002a18:	4313      	orrs	r3, r2
 8002a1a:	604b      	str	r3, [r1, #4]
        __HAL_RCC_PLL_ENABLE();
 8002a1c:	4b1f      	ldr	r3, [pc, #124]	@ (8002a9c <HAL_RCC_OscConfig+0x40c>)
 8002a1e:	2201      	movs	r2, #1
 8002a20:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8002a22:	f7fe ff63 	bl	80018ec <HAL_GetTick>
 8002a26:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002a28:	4b1b      	ldr	r3, [pc, #108]	@ (8002a98 <HAL_RCC_OscConfig+0x408>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8002a30:	d10e      	bne.n	8002a50 <HAL_RCC_OscConfig+0x3c0>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a32:	f7fe ff5b 	bl	80018ec <HAL_GetTick>
 8002a36:	1b00      	subs	r0, r0, r4
 8002a38:	2802      	cmp	r0, #2
 8002a3a:	d9f5      	bls.n	8002a28 <HAL_RCC_OscConfig+0x398>
            return HAL_TIMEOUT;
 8002a3c:	2003      	movs	r0, #3
 8002a3e:	e022      	b.n	8002a86 <HAL_RCC_OscConfig+0x3f6>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002a40:	4a15      	ldr	r2, [pc, #84]	@ (8002a98 <HAL_RCC_OscConfig+0x408>)
 8002a42:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8002a44:	f023 030f 	bic.w	r3, r3, #15
 8002a48:	68a1      	ldr	r1, [r4, #8]
 8002a4a:	430b      	orrs	r3, r1
 8002a4c:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8002a4e:	e7dc      	b.n	8002a0a <HAL_RCC_OscConfig+0x37a>
  return HAL_OK;
 8002a50:	2000      	movs	r0, #0
 8002a52:	e018      	b.n	8002a86 <HAL_RCC_OscConfig+0x3f6>
 8002a54:	2000      	movs	r0, #0
 8002a56:	e016      	b.n	8002a86 <HAL_RCC_OscConfig+0x3f6>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a58:	2b01      	cmp	r3, #1
 8002a5a:	d016      	beq.n	8002a8a <HAL_RCC_OscConfig+0x3fa>
        pll_config = RCC->CFGR;
 8002a5c:	4b0e      	ldr	r3, [pc, #56]	@ (8002a98 <HAL_RCC_OscConfig+0x408>)
 8002a5e:	685b      	ldr	r3, [r3, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a60:	f403 3180 	and.w	r1, r3, #65536	@ 0x10000
 8002a64:	6a22      	ldr	r2, [r4, #32]
 8002a66:	4291      	cmp	r1, r2
 8002a68:	d111      	bne.n	8002a8e <HAL_RCC_OscConfig+0x3fe>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002a6a:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 8002a6e:	6a62      	ldr	r2, [r4, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a70:	4293      	cmp	r3, r2
 8002a72:	d10e      	bne.n	8002a92 <HAL_RCC_OscConfig+0x402>
  return HAL_OK;
 8002a74:	2000      	movs	r0, #0
 8002a76:	e006      	b.n	8002a86 <HAL_RCC_OscConfig+0x3f6>
    return HAL_ERROR;
 8002a78:	2001      	movs	r0, #1
}
 8002a7a:	4770      	bx	lr
        return HAL_ERROR;
 8002a7c:	2001      	movs	r0, #1
 8002a7e:	e002      	b.n	8002a86 <HAL_RCC_OscConfig+0x3f6>
        return HAL_ERROR;
 8002a80:	2001      	movs	r0, #1
 8002a82:	e000      	b.n	8002a86 <HAL_RCC_OscConfig+0x3f6>
  return HAL_OK;
 8002a84:	2000      	movs	r0, #0
}
 8002a86:	b002      	add	sp, #8
 8002a88:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8002a8a:	2001      	movs	r0, #1
 8002a8c:	e7fb      	b.n	8002a86 <HAL_RCC_OscConfig+0x3f6>
          return HAL_ERROR;
 8002a8e:	2001      	movs	r0, #1
 8002a90:	e7f9      	b.n	8002a86 <HAL_RCC_OscConfig+0x3f6>
 8002a92:	2001      	movs	r0, #1
 8002a94:	e7f7      	b.n	8002a86 <HAL_RCC_OscConfig+0x3f6>
 8002a96:	bf00      	nop
 8002a98:	40021000 	.word	0x40021000
 8002a9c:	42420000 	.word	0x42420000

08002aa0 <HAL_RCC_GetSysClockFreq>:
  tmpreg = RCC->CFGR;
 8002aa0:	4b0f      	ldr	r3, [pc, #60]	@ (8002ae0 <HAL_RCC_GetSysClockFreq+0x40>)
 8002aa2:	685b      	ldr	r3, [r3, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8002aa4:	f003 020c 	and.w	r2, r3, #12
 8002aa8:	2a08      	cmp	r2, #8
 8002aaa:	d001      	beq.n	8002ab0 <HAL_RCC_GetSysClockFreq+0x10>
      sysclockfreq = HSE_VALUE;
 8002aac:	480d      	ldr	r0, [pc, #52]	@ (8002ae4 <HAL_RCC_GetSysClockFreq+0x44>)
}
 8002aae:	4770      	bx	lr
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002ab0:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8002ab4:	490c      	ldr	r1, [pc, #48]	@ (8002ae8 <HAL_RCC_GetSysClockFreq+0x48>)
 8002ab6:	5c88      	ldrb	r0, [r1, r2]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002ab8:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 8002abc:	d00b      	beq.n	8002ad6 <HAL_RCC_GetSysClockFreq+0x36>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
 8002abe:	4b08      	ldr	r3, [pc, #32]	@ (8002ae0 <HAL_RCC_GetSysClockFreq+0x40>)
 8002ac0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ac2:	f003 030f 	and.w	r3, r3, #15
 8002ac6:	4a09      	ldr	r2, [pc, #36]	@ (8002aec <HAL_RCC_GetSysClockFreq+0x4c>)
 8002ac8:	5cd3      	ldrb	r3, [r2, r3]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002aca:	4a06      	ldr	r2, [pc, #24]	@ (8002ae4 <HAL_RCC_GetSysClockFreq+0x44>)
 8002acc:	fb02 f000 	mul.w	r0, r2, r0
 8002ad0:	fbb0 f0f3 	udiv	r0, r0, r3
 8002ad4:	4770      	bx	lr
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002ad6:	4b06      	ldr	r3, [pc, #24]	@ (8002af0 <HAL_RCC_GetSysClockFreq+0x50>)
 8002ad8:	fb03 f000 	mul.w	r0, r3, r0
 8002adc:	4770      	bx	lr
 8002ade:	bf00      	nop
 8002ae0:	40021000 	.word	0x40021000
 8002ae4:	007a1200 	.word	0x007a1200
 8002ae8:	08004518 	.word	0x08004518
 8002aec:	08004508 	.word	0x08004508
 8002af0:	003d0900 	.word	0x003d0900

08002af4 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8002af4:	2800      	cmp	r0, #0
 8002af6:	d07b      	beq.n	8002bf0 <HAL_RCC_ClockConfig+0xfc>
{
 8002af8:	b538      	push	{r3, r4, r5, lr}
 8002afa:	4604      	mov	r4, r0
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002afc:	6803      	ldr	r3, [r0, #0]
 8002afe:	f013 0f02 	tst.w	r3, #2
 8002b02:	d017      	beq.n	8002b34 <HAL_RCC_ClockConfig+0x40>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b04:	f013 0f04 	tst.w	r3, #4
 8002b08:	d004      	beq.n	8002b14 <HAL_RCC_ClockConfig+0x20>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b0a:	4a3b      	ldr	r2, [pc, #236]	@ (8002bf8 <HAL_RCC_ClockConfig+0x104>)
 8002b0c:	6853      	ldr	r3, [r2, #4]
 8002b0e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002b12:	6053      	str	r3, [r2, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b14:	6823      	ldr	r3, [r4, #0]
 8002b16:	f013 0f08 	tst.w	r3, #8
 8002b1a:	d004      	beq.n	8002b26 <HAL_RCC_ClockConfig+0x32>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002b1c:	4a36      	ldr	r2, [pc, #216]	@ (8002bf8 <HAL_RCC_ClockConfig+0x104>)
 8002b1e:	6853      	ldr	r3, [r2, #4]
 8002b20:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002b24:	6053      	str	r3, [r2, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b26:	4a34      	ldr	r2, [pc, #208]	@ (8002bf8 <HAL_RCC_ClockConfig+0x104>)
 8002b28:	6853      	ldr	r3, [r2, #4]
 8002b2a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002b2e:	68a1      	ldr	r1, [r4, #8]
 8002b30:	430b      	orrs	r3, r1
 8002b32:	6053      	str	r3, [r2, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b34:	6823      	ldr	r3, [r4, #0]
 8002b36:	f013 0f01 	tst.w	r3, #1
 8002b3a:	d031      	beq.n	8002ba0 <HAL_RCC_ClockConfig+0xac>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b3c:	6863      	ldr	r3, [r4, #4]
 8002b3e:	2b01      	cmp	r3, #1
 8002b40:	d020      	beq.n	8002b84 <HAL_RCC_ClockConfig+0x90>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b42:	2b02      	cmp	r3, #2
 8002b44:	d025      	beq.n	8002b92 <HAL_RCC_ClockConfig+0x9e>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b46:	4a2c      	ldr	r2, [pc, #176]	@ (8002bf8 <HAL_RCC_ClockConfig+0x104>)
 8002b48:	6812      	ldr	r2, [r2, #0]
 8002b4a:	f012 0f02 	tst.w	r2, #2
 8002b4e:	d051      	beq.n	8002bf4 <HAL_RCC_ClockConfig+0x100>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b50:	4929      	ldr	r1, [pc, #164]	@ (8002bf8 <HAL_RCC_ClockConfig+0x104>)
 8002b52:	684a      	ldr	r2, [r1, #4]
 8002b54:	f022 0203 	bic.w	r2, r2, #3
 8002b58:	4313      	orrs	r3, r2
 8002b5a:	604b      	str	r3, [r1, #4]
    tickstart = HAL_GetTick();
 8002b5c:	f7fe fec6 	bl	80018ec <HAL_GetTick>
 8002b60:	4605      	mov	r5, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b62:	4b25      	ldr	r3, [pc, #148]	@ (8002bf8 <HAL_RCC_ClockConfig+0x104>)
 8002b64:	685b      	ldr	r3, [r3, #4]
 8002b66:	f003 030c 	and.w	r3, r3, #12
 8002b6a:	6862      	ldr	r2, [r4, #4]
 8002b6c:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8002b70:	d016      	beq.n	8002ba0 <HAL_RCC_ClockConfig+0xac>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b72:	f7fe febb 	bl	80018ec <HAL_GetTick>
 8002b76:	1b40      	subs	r0, r0, r5
 8002b78:	f241 3388 	movw	r3, #5000	@ 0x1388
 8002b7c:	4298      	cmp	r0, r3
 8002b7e:	d9f0      	bls.n	8002b62 <HAL_RCC_ClockConfig+0x6e>
        return HAL_TIMEOUT;
 8002b80:	2003      	movs	r0, #3
 8002b82:	e034      	b.n	8002bee <HAL_RCC_ClockConfig+0xfa>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b84:	4a1c      	ldr	r2, [pc, #112]	@ (8002bf8 <HAL_RCC_ClockConfig+0x104>)
 8002b86:	6812      	ldr	r2, [r2, #0]
 8002b88:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
 8002b8c:	d1e0      	bne.n	8002b50 <HAL_RCC_ClockConfig+0x5c>
        return HAL_ERROR;
 8002b8e:	2001      	movs	r0, #1
 8002b90:	e02d      	b.n	8002bee <HAL_RCC_ClockConfig+0xfa>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b92:	4a19      	ldr	r2, [pc, #100]	@ (8002bf8 <HAL_RCC_ClockConfig+0x104>)
 8002b94:	6812      	ldr	r2, [r2, #0]
 8002b96:	f012 7f00 	tst.w	r2, #33554432	@ 0x2000000
 8002b9a:	d1d9      	bne.n	8002b50 <HAL_RCC_ClockConfig+0x5c>
        return HAL_ERROR;
 8002b9c:	2001      	movs	r0, #1
 8002b9e:	e026      	b.n	8002bee <HAL_RCC_ClockConfig+0xfa>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ba0:	6823      	ldr	r3, [r4, #0]
 8002ba2:	f013 0f04 	tst.w	r3, #4
 8002ba6:	d006      	beq.n	8002bb6 <HAL_RCC_ClockConfig+0xc2>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ba8:	4a13      	ldr	r2, [pc, #76]	@ (8002bf8 <HAL_RCC_ClockConfig+0x104>)
 8002baa:	6853      	ldr	r3, [r2, #4]
 8002bac:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8002bb0:	68e1      	ldr	r1, [r4, #12]
 8002bb2:	430b      	orrs	r3, r1
 8002bb4:	6053      	str	r3, [r2, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bb6:	6823      	ldr	r3, [r4, #0]
 8002bb8:	f013 0f08 	tst.w	r3, #8
 8002bbc:	d007      	beq.n	8002bce <HAL_RCC_ClockConfig+0xda>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002bbe:	4a0e      	ldr	r2, [pc, #56]	@ (8002bf8 <HAL_RCC_ClockConfig+0x104>)
 8002bc0:	6853      	ldr	r3, [r2, #4]
 8002bc2:	f423 5360 	bic.w	r3, r3, #14336	@ 0x3800
 8002bc6:	6921      	ldr	r1, [r4, #16]
 8002bc8:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002bcc:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002bce:	f7ff ff67 	bl	8002aa0 <HAL_RCC_GetSysClockFreq>
 8002bd2:	4b09      	ldr	r3, [pc, #36]	@ (8002bf8 <HAL_RCC_ClockConfig+0x104>)
 8002bd4:	685b      	ldr	r3, [r3, #4]
 8002bd6:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002bda:	4a08      	ldr	r2, [pc, #32]	@ (8002bfc <HAL_RCC_ClockConfig+0x108>)
 8002bdc:	5cd3      	ldrb	r3, [r2, r3]
 8002bde:	40d8      	lsrs	r0, r3
 8002be0:	4b07      	ldr	r3, [pc, #28]	@ (8002c00 <HAL_RCC_ClockConfig+0x10c>)
 8002be2:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8002be4:	4b07      	ldr	r3, [pc, #28]	@ (8002c04 <HAL_RCC_ClockConfig+0x110>)
 8002be6:	6818      	ldr	r0, [r3, #0]
 8002be8:	f7fe fe42 	bl	8001870 <HAL_InitTick>
  return HAL_OK;
 8002bec:	2000      	movs	r0, #0
}
 8002bee:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8002bf0:	2001      	movs	r0, #1
}
 8002bf2:	4770      	bx	lr
        return HAL_ERROR;
 8002bf4:	2001      	movs	r0, #1
 8002bf6:	e7fa      	b.n	8002bee <HAL_RCC_ClockConfig+0xfa>
 8002bf8:	40021000 	.word	0x40021000
 8002bfc:	08004528 	.word	0x08004528
 8002c00:	20000018 	.word	0x20000018
 8002c04:	20000014 	.word	0x20000014

08002c08 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002c08:	b570      	push	{r4, r5, r6, lr}
 8002c0a:	b082      	sub	sp, #8
 8002c0c:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002c0e:	6803      	ldr	r3, [r0, #0]
 8002c10:	f013 0f01 	tst.w	r3, #1
 8002c14:	d035      	beq.n	8002c82 <HAL_RCCEx_PeriphCLKConfig+0x7a>
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c16:	4b39      	ldr	r3, [pc, #228]	@ (8002cfc <HAL_RCCEx_PeriphCLKConfig+0xf4>)
 8002c18:	69db      	ldr	r3, [r3, #28]
 8002c1a:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 8002c1e:	d13d      	bne.n	8002c9c <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c20:	4b36      	ldr	r3, [pc, #216]	@ (8002cfc <HAL_RCCEx_PeriphCLKConfig+0xf4>)
 8002c22:	69da      	ldr	r2, [r3, #28]
 8002c24:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8002c28:	61da      	str	r2, [r3, #28]
 8002c2a:	69db      	ldr	r3, [r3, #28]
 8002c2c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c30:	9301      	str	r3, [sp, #4]
 8002c32:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002c34:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c36:	4b32      	ldr	r3, [pc, #200]	@ (8002d00 <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8002c3e:	d02f      	beq.n	8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x98>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002c40:	4b2e      	ldr	r3, [pc, #184]	@ (8002cfc <HAL_RCCEx_PeriphCLKConfig+0xf4>)
 8002c42:	6a1b      	ldr	r3, [r3, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002c44:	f413 7340 	ands.w	r3, r3, #768	@ 0x300
 8002c48:	d013      	beq.n	8002c72 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8002c4a:	6862      	ldr	r2, [r4, #4]
 8002c4c:	f402 7240 	and.w	r2, r2, #768	@ 0x300
 8002c50:	429a      	cmp	r2, r3
 8002c52:	d00e      	beq.n	8002c72 <HAL_RCCEx_PeriphCLKConfig+0x6a>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002c54:	4a29      	ldr	r2, [pc, #164]	@ (8002cfc <HAL_RCCEx_PeriphCLKConfig+0xf4>)
 8002c56:	6a13      	ldr	r3, [r2, #32]
 8002c58:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002c5c:	4929      	ldr	r1, [pc, #164]	@ (8002d04 <HAL_RCCEx_PeriphCLKConfig+0xfc>)
 8002c5e:	2601      	movs	r6, #1
 8002c60:	f8c1 6440 	str.w	r6, [r1, #1088]	@ 0x440
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002c64:	2600      	movs	r6, #0
 8002c66:	f8c1 6440 	str.w	r6, [r1, #1088]	@ 0x440
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002c6a:	6210      	str	r0, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002c6c:	f013 0f01 	tst.w	r3, #1
 8002c70:	d12a      	bne.n	8002cc8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002c72:	4a22      	ldr	r2, [pc, #136]	@ (8002cfc <HAL_RCCEx_PeriphCLKConfig+0xf4>)
 8002c74:	6a13      	ldr	r3, [r2, #32]
 8002c76:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002c7a:	6861      	ldr	r1, [r4, #4]
 8002c7c:	430b      	orrs	r3, r1
 8002c7e:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002c80:	bb9d      	cbnz	r5, 8002cea <HAL_RCCEx_PeriphCLKConfig+0xe2>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002c82:	6823      	ldr	r3, [r4, #0]
 8002c84:	f013 0f02 	tst.w	r3, #2
 8002c88:	d034      	beq.n	8002cf4 <HAL_RCCEx_PeriphCLKConfig+0xec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002c8a:	4a1c      	ldr	r2, [pc, #112]	@ (8002cfc <HAL_RCCEx_PeriphCLKConfig+0xf4>)
 8002c8c:	6853      	ldr	r3, [r2, #4]
 8002c8e:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8002c92:	68a1      	ldr	r1, [r4, #8]
 8002c94:	430b      	orrs	r3, r1
 8002c96:	6053      	str	r3, [r2, #4]
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002c98:	2000      	movs	r0, #0
 8002c9a:	e02c      	b.n	8002cf6 <HAL_RCCEx_PeriphCLKConfig+0xee>
    FlagStatus pwrclkchanged = RESET;
 8002c9c:	2500      	movs	r5, #0
 8002c9e:	e7ca      	b.n	8002c36 <HAL_RCCEx_PeriphCLKConfig+0x2e>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ca0:	4a17      	ldr	r2, [pc, #92]	@ (8002d00 <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 8002ca2:	6813      	ldr	r3, [r2, #0]
 8002ca4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002ca8:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8002caa:	f7fe fe1f 	bl	80018ec <HAL_GetTick>
 8002cae:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cb0:	4b13      	ldr	r3, [pc, #76]	@ (8002d00 <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8002cb8:	d1c2      	bne.n	8002c40 <HAL_RCCEx_PeriphCLKConfig+0x38>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002cba:	f7fe fe17 	bl	80018ec <HAL_GetTick>
 8002cbe:	1b80      	subs	r0, r0, r6
 8002cc0:	2864      	cmp	r0, #100	@ 0x64
 8002cc2:	d9f5      	bls.n	8002cb0 <HAL_RCCEx_PeriphCLKConfig+0xa8>
          return HAL_TIMEOUT;
 8002cc4:	2003      	movs	r0, #3
 8002cc6:	e016      	b.n	8002cf6 <HAL_RCCEx_PeriphCLKConfig+0xee>
        tickstart = HAL_GetTick();
 8002cc8:	f7fe fe10 	bl	80018ec <HAL_GetTick>
 8002ccc:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cce:	4b0b      	ldr	r3, [pc, #44]	@ (8002cfc <HAL_RCCEx_PeriphCLKConfig+0xf4>)
 8002cd0:	6a1b      	ldr	r3, [r3, #32]
 8002cd2:	f013 0f02 	tst.w	r3, #2
 8002cd6:	d1cc      	bne.n	8002c72 <HAL_RCCEx_PeriphCLKConfig+0x6a>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cd8:	f7fe fe08 	bl	80018ec <HAL_GetTick>
 8002cdc:	1b80      	subs	r0, r0, r6
 8002cde:	f241 3388 	movw	r3, #5000	@ 0x1388
 8002ce2:	4298      	cmp	r0, r3
 8002ce4:	d9f3      	bls.n	8002cce <HAL_RCCEx_PeriphCLKConfig+0xc6>
            return HAL_TIMEOUT;
 8002ce6:	2003      	movs	r0, #3
 8002ce8:	e005      	b.n	8002cf6 <HAL_RCCEx_PeriphCLKConfig+0xee>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002cea:	69d3      	ldr	r3, [r2, #28]
 8002cec:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002cf0:	61d3      	str	r3, [r2, #28]
 8002cf2:	e7c6      	b.n	8002c82 <HAL_RCCEx_PeriphCLKConfig+0x7a>
  return HAL_OK;
 8002cf4:	2000      	movs	r0, #0
}
 8002cf6:	b002      	add	sp, #8
 8002cf8:	bd70      	pop	{r4, r5, r6, pc}
 8002cfa:	bf00      	nop
 8002cfc:	40021000 	.word	0x40021000
 8002d00:	40007000 	.word	0x40007000
 8002d04:	42420000 	.word	0x42420000

08002d08 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002d08:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002d0a:	6a02      	ldr	r2, [r0, #32]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002d0c:	6a03      	ldr	r3, [r0, #32]
 8002d0e:	f023 0301 	bic.w	r3, r3, #1
 8002d12:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002d14:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002d16:	6983      	ldr	r3, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002d18:	f023 0373 	bic.w	r3, r3, #115	@ 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002d1c:	680d      	ldr	r5, [r1, #0]
 8002d1e:	431d      	orrs	r5, r3

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002d20:	f022 0202 	bic.w	r2, r2, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002d24:	688b      	ldr	r3, [r1, #8]
 8002d26:	4313      	orrs	r3, r2

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002d28:	4a18      	ldr	r2, [pc, #96]	@ (8002d8c <TIM_OC1_SetConfig+0x84>)
 8002d2a:	4290      	cmp	r0, r2
 8002d2c:	d00b      	beq.n	8002d46 <TIM_OC1_SetConfig+0x3e>
 8002d2e:	f502 52a0 	add.w	r2, r2, #5120	@ 0x1400
 8002d32:	4290      	cmp	r0, r2
 8002d34:	d007      	beq.n	8002d46 <TIM_OC1_SetConfig+0x3e>
 8002d36:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002d3a:	4290      	cmp	r0, r2
 8002d3c:	d003      	beq.n	8002d46 <TIM_OC1_SetConfig+0x3e>
 8002d3e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002d42:	4290      	cmp	r0, r2
 8002d44:	d105      	bne.n	8002d52 <TIM_OC1_SetConfig+0x4a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002d46:	f023 0308 	bic.w	r3, r3, #8
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002d4a:	68ca      	ldr	r2, [r1, #12]
 8002d4c:	431a      	orrs	r2, r3
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002d4e:	f022 0304 	bic.w	r3, r2, #4
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002d52:	4a0e      	ldr	r2, [pc, #56]	@ (8002d8c <TIM_OC1_SetConfig+0x84>)
 8002d54:	4290      	cmp	r0, r2
 8002d56:	d00b      	beq.n	8002d70 <TIM_OC1_SetConfig+0x68>
 8002d58:	f502 52a0 	add.w	r2, r2, #5120	@ 0x1400
 8002d5c:	4290      	cmp	r0, r2
 8002d5e:	d007      	beq.n	8002d70 <TIM_OC1_SetConfig+0x68>
 8002d60:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002d64:	4290      	cmp	r0, r2
 8002d66:	d003      	beq.n	8002d70 <TIM_OC1_SetConfig+0x68>
 8002d68:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002d6c:	4290      	cmp	r0, r2
 8002d6e:	d105      	bne.n	8002d7c <TIM_OC1_SetConfig+0x74>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002d70:	f424 7440 	bic.w	r4, r4, #768	@ 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002d74:	694a      	ldr	r2, [r1, #20]
 8002d76:	4322      	orrs	r2, r4
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002d78:	698c      	ldr	r4, [r1, #24]
 8002d7a:	4314      	orrs	r4, r2
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002d7c:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002d7e:	6185      	str	r5, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002d80:	684a      	ldr	r2, [r1, #4]
 8002d82:	6342      	str	r2, [r0, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d84:	6203      	str	r3, [r0, #32]
}
 8002d86:	bc30      	pop	{r4, r5}
 8002d88:	4770      	bx	lr
 8002d8a:	bf00      	nop
 8002d8c:	40012c00 	.word	0x40012c00

08002d90 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002d90:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002d92:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002d94:	6a02      	ldr	r2, [r0, #32]
 8002d96:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002d9a:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002d9c:	6842      	ldr	r2, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002d9e:	69c4      	ldr	r4, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002da0:	f024 0c73 	bic.w	ip, r4, #115	@ 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002da4:	680c      	ldr	r4, [r1, #0]
 8002da6:	ea44 050c 	orr.w	r5, r4, ip

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002daa:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002dae:	688c      	ldr	r4, [r1, #8]
 8002db0:	ea43 2304 	orr.w	r3, r3, r4, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002db4:	4c12      	ldr	r4, [pc, #72]	@ (8002e00 <TIM_OC3_SetConfig+0x70>)
 8002db6:	42a0      	cmp	r0, r4
 8002db8:	d00b      	beq.n	8002dd2 <TIM_OC3_SetConfig+0x42>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002dba:	4c12      	ldr	r4, [pc, #72]	@ (8002e04 <TIM_OC3_SetConfig+0x74>)
 8002dbc:	42a0      	cmp	r0, r4
 8002dbe:	d00f      	beq.n	8002de0 <TIM_OC3_SetConfig+0x50>
 8002dc0:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8002dc4:	42a0      	cmp	r0, r4
 8002dc6:	d00b      	beq.n	8002de0 <TIM_OC3_SetConfig+0x50>
 8002dc8:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8002dcc:	42a0      	cmp	r0, r4
 8002dce:	d10f      	bne.n	8002df0 <TIM_OC3_SetConfig+0x60>
 8002dd0:	e006      	b.n	8002de0 <TIM_OC3_SetConfig+0x50>
    tmpccer &= ~TIM_CCER_CC3NP;
 8002dd2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002dd6:	68cc      	ldr	r4, [r1, #12]
 8002dd8:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 8002ddc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002de0:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002de4:	694c      	ldr	r4, [r1, #20]
 8002de6:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002dea:	698c      	ldr	r4, [r1, #24]
 8002dec:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002df0:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002df2:	61c5      	str	r5, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002df4:	684a      	ldr	r2, [r1, #4]
 8002df6:	63c2      	str	r2, [r0, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002df8:	6203      	str	r3, [r0, #32]
}
 8002dfa:	bc30      	pop	{r4, r5}
 8002dfc:	4770      	bx	lr
 8002dfe:	bf00      	nop
 8002e00:	40012c00 	.word	0x40012c00
 8002e04:	40014000 	.word	0x40014000

08002e08 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002e08:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002e0a:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002e0c:	6a02      	ldr	r2, [r0, #32]
 8002e0e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002e12:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002e14:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002e16:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002e18:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002e1c:	680d      	ldr	r5, [r1, #0]
 8002e1e:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002e22:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002e26:	688d      	ldr	r5, [r1, #8]
 8002e28:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002e2c:	4d0d      	ldr	r5, [pc, #52]	@ (8002e64 <TIM_OC4_SetConfig+0x5c>)
 8002e2e:	42a8      	cmp	r0, r5
 8002e30:	d00b      	beq.n	8002e4a <TIM_OC4_SetConfig+0x42>
 8002e32:	f505 55a0 	add.w	r5, r5, #5120	@ 0x1400
 8002e36:	42a8      	cmp	r0, r5
 8002e38:	d007      	beq.n	8002e4a <TIM_OC4_SetConfig+0x42>
 8002e3a:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8002e3e:	42a8      	cmp	r0, r5
 8002e40:	d003      	beq.n	8002e4a <TIM_OC4_SetConfig+0x42>
 8002e42:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8002e46:	42a8      	cmp	r0, r5
 8002e48:	d104      	bne.n	8002e54 <TIM_OC4_SetConfig+0x4c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002e4a:	f424 4480 	bic.w	r4, r4, #16384	@ 0x4000

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002e4e:	694d      	ldr	r5, [r1, #20]
 8002e50:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002e54:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002e56:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002e58:	684a      	ldr	r2, [r1, #4]
 8002e5a:	6402      	str	r2, [r0, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002e5c:	6203      	str	r3, [r0, #32]
}
 8002e5e:	bc30      	pop	{r4, r5}
 8002e60:	4770      	bx	lr
 8002e62:	bf00      	nop
 8002e64:	40012c00 	.word	0x40012c00

08002e68 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002e68:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002e6a:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002e6c:	6a04      	ldr	r4, [r0, #32]
 8002e6e:	f024 0401 	bic.w	r4, r4, #1
 8002e72:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002e74:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002e76:	f024 0cf0 	bic.w	ip, r4, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002e7a:	ea4c 1202 	orr.w	r2, ip, r2, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002e7e:	f023 030a 	bic.w	r3, r3, #10
  tmpccer |= TIM_ICPolarity;
 8002e82:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002e84:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8002e86:	6203      	str	r3, [r0, #32]
}
 8002e88:	bc10      	pop	{r4}
 8002e8a:	4770      	bx	lr

08002e8c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002e8c:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002e8e:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002e90:	6a04      	ldr	r4, [r0, #32]
 8002e92:	f024 0410 	bic.w	r4, r4, #16
 8002e96:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002e98:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002e9a:	f424 4c70 	bic.w	ip, r4, #61440	@ 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002e9e:	ea4c 3202 	orr.w	r2, ip, r2, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002ea2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8002ea6:	ea43 1301 	orr.w	r3, r3, r1, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002eaa:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8002eac:	6203      	str	r3, [r0, #32]
}
 8002eae:	bc10      	pop	{r4}
 8002eb0:	4770      	bx	lr

08002eb2 <TIM_ITRx_SetConfig>:
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002eb2:	6883      	ldr	r3, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002eb4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002eb8:	430b      	orrs	r3, r1
 8002eba:	f043 0307 	orr.w	r3, r3, #7
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002ebe:	6083      	str	r3, [r0, #8]
}
 8002ec0:	4770      	bx	lr

08002ec2 <HAL_TIM_PWM_MspInit>:
}
 8002ec2:	4770      	bx	lr

08002ec4 <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 8002ec4:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002ec6:	4a2a      	ldr	r2, [pc, #168]	@ (8002f70 <TIM_Base_SetConfig+0xac>)
 8002ec8:	4290      	cmp	r0, r2
 8002eca:	d00a      	beq.n	8002ee2 <TIM_Base_SetConfig+0x1e>
 8002ecc:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8002ed0:	d007      	beq.n	8002ee2 <TIM_Base_SetConfig+0x1e>
 8002ed2:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 8002ed6:	4290      	cmp	r0, r2
 8002ed8:	d003      	beq.n	8002ee2 <TIM_Base_SetConfig+0x1e>
 8002eda:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002ede:	4290      	cmp	r0, r2
 8002ee0:	d103      	bne.n	8002eea <TIM_Base_SetConfig+0x26>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002ee2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8002ee6:	684a      	ldr	r2, [r1, #4]
 8002ee8:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002eea:	4a21      	ldr	r2, [pc, #132]	@ (8002f70 <TIM_Base_SetConfig+0xac>)
 8002eec:	4290      	cmp	r0, r2
 8002eee:	d016      	beq.n	8002f1e <TIM_Base_SetConfig+0x5a>
 8002ef0:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8002ef4:	d013      	beq.n	8002f1e <TIM_Base_SetConfig+0x5a>
 8002ef6:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 8002efa:	4290      	cmp	r0, r2
 8002efc:	d00f      	beq.n	8002f1e <TIM_Base_SetConfig+0x5a>
 8002efe:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002f02:	4290      	cmp	r0, r2
 8002f04:	d00b      	beq.n	8002f1e <TIM_Base_SetConfig+0x5a>
 8002f06:	f502 329c 	add.w	r2, r2, #79872	@ 0x13800
 8002f0a:	4290      	cmp	r0, r2
 8002f0c:	d007      	beq.n	8002f1e <TIM_Base_SetConfig+0x5a>
 8002f0e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002f12:	4290      	cmp	r0, r2
 8002f14:	d003      	beq.n	8002f1e <TIM_Base_SetConfig+0x5a>
 8002f16:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002f1a:	4290      	cmp	r0, r2
 8002f1c:	d103      	bne.n	8002f26 <TIM_Base_SetConfig+0x62>
    tmpcr1 &= ~TIM_CR1_CKD;
 8002f1e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002f22:	68ca      	ldr	r2, [r1, #12]
 8002f24:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002f26:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002f2a:	694a      	ldr	r2, [r1, #20]
 8002f2c:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8002f2e:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002f30:	688b      	ldr	r3, [r1, #8]
 8002f32:	62c3      	str	r3, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8002f34:	680b      	ldr	r3, [r1, #0]
 8002f36:	6283      	str	r3, [r0, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002f38:	4b0d      	ldr	r3, [pc, #52]	@ (8002f70 <TIM_Base_SetConfig+0xac>)
 8002f3a:	4298      	cmp	r0, r3
 8002f3c:	d00b      	beq.n	8002f56 <TIM_Base_SetConfig+0x92>
 8002f3e:	f503 53a0 	add.w	r3, r3, #5120	@ 0x1400
 8002f42:	4298      	cmp	r0, r3
 8002f44:	d007      	beq.n	8002f56 <TIM_Base_SetConfig+0x92>
 8002f46:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002f4a:	4298      	cmp	r0, r3
 8002f4c:	d003      	beq.n	8002f56 <TIM_Base_SetConfig+0x92>
 8002f4e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002f52:	4298      	cmp	r0, r3
 8002f54:	d101      	bne.n	8002f5a <TIM_Base_SetConfig+0x96>
    TIMx->RCR = Structure->RepetitionCounter;
 8002f56:	690b      	ldr	r3, [r1, #16]
 8002f58:	6303      	str	r3, [r0, #48]	@ 0x30
  TIMx->EGR = TIM_EGR_UG;
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	6143      	str	r3, [r0, #20]
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002f5e:	6903      	ldr	r3, [r0, #16]
 8002f60:	f013 0f01 	tst.w	r3, #1
 8002f64:	d003      	beq.n	8002f6e <TIM_Base_SetConfig+0xaa>
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002f66:	6903      	ldr	r3, [r0, #16]
 8002f68:	f023 0301 	bic.w	r3, r3, #1
 8002f6c:	6103      	str	r3, [r0, #16]
}
 8002f6e:	4770      	bx	lr
 8002f70:	40012c00 	.word	0x40012c00

08002f74 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8002f74:	b340      	cbz	r0, 8002fc8 <HAL_TIM_Base_Init+0x54>
{
 8002f76:	b510      	push	{r4, lr}
 8002f78:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8002f7a:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8002f7e:	b1f3      	cbz	r3, 8002fbe <HAL_TIM_Base_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 8002f80:	2302      	movs	r3, #2
 8002f82:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f86:	4621      	mov	r1, r4
 8002f88:	f851 0b04 	ldr.w	r0, [r1], #4
 8002f8c:	f7ff ff9a 	bl	8002ec4 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002f90:	2301      	movs	r3, #1
 8002f92:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f96:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 8002f9a:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8002f9e:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8002fa2:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002fa6:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8002faa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002fae:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8002fb2:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 8002fb6:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 8002fba:	2000      	movs	r0, #0
}
 8002fbc:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8002fbe:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 8002fc2:	f7ff fac9 	bl	8002558 <HAL_TIM_Base_MspInit>
 8002fc6:	e7db      	b.n	8002f80 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 8002fc8:	2001      	movs	r0, #1
}
 8002fca:	4770      	bx	lr

08002fcc <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 8002fcc:	b340      	cbz	r0, 8003020 <HAL_TIM_PWM_Init+0x54>
{
 8002fce:	b510      	push	{r4, lr}
 8002fd0:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8002fd2:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8002fd6:	b1f3      	cbz	r3, 8003016 <HAL_TIM_PWM_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 8002fd8:	2302      	movs	r3, #2
 8002fda:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002fde:	4621      	mov	r1, r4
 8002fe0:	f851 0b04 	ldr.w	r0, [r1], #4
 8002fe4:	f7ff ff6e 	bl	8002ec4 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002fe8:	2301      	movs	r3, #1
 8002fea:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002fee:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 8002ff2:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8002ff6:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8002ffa:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ffe:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003002:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003006:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 800300a:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 800300e:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 8003012:	2000      	movs	r0, #0
}
 8003014:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8003016:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_TIM_PWM_MspInit(htim);
 800301a:	f7ff ff52 	bl	8002ec2 <HAL_TIM_PWM_MspInit>
 800301e:	e7db      	b.n	8002fd8 <HAL_TIM_PWM_Init+0xc>
    return HAL_ERROR;
 8003020:	2001      	movs	r0, #1
}
 8003022:	4770      	bx	lr

08003024 <TIM_OC2_SetConfig>:
{
 8003024:	b430      	push	{r4, r5}
  tmpccer = TIMx->CCER;
 8003026:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003028:	6a02      	ldr	r2, [r0, #32]
 800302a:	f022 0210 	bic.w	r2, r2, #16
 800302e:	6202      	str	r2, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8003030:	6842      	ldr	r2, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8003032:	6984      	ldr	r4, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003034:	f424 4ce6 	bic.w	ip, r4, #29440	@ 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003038:	680c      	ldr	r4, [r1, #0]
 800303a:	ea4c 2404 	orr.w	r4, ip, r4, lsl #8
  tmpccer &= ~TIM_CCER_CC2P;
 800303e:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003042:	688d      	ldr	r5, [r1, #8]
 8003044:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003048:	4d12      	ldr	r5, [pc, #72]	@ (8003094 <TIM_OC2_SetConfig+0x70>)
 800304a:	42a8      	cmp	r0, r5
 800304c:	d00b      	beq.n	8003066 <TIM_OC2_SetConfig+0x42>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800304e:	4d12      	ldr	r5, [pc, #72]	@ (8003098 <TIM_OC2_SetConfig+0x74>)
 8003050:	42a8      	cmp	r0, r5
 8003052:	d00f      	beq.n	8003074 <TIM_OC2_SetConfig+0x50>
 8003054:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8003058:	42a8      	cmp	r0, r5
 800305a:	d00b      	beq.n	8003074 <TIM_OC2_SetConfig+0x50>
 800305c:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8003060:	42a8      	cmp	r0, r5
 8003062:	d10f      	bne.n	8003084 <TIM_OC2_SetConfig+0x60>
 8003064:	e006      	b.n	8003074 <TIM_OC2_SetConfig+0x50>
    tmpccer &= ~TIM_CCER_CC2NP;
 8003066:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800306a:	68cd      	ldr	r5, [r1, #12]
 800306c:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 8003070:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003074:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003078:	694d      	ldr	r5, [r1, #20]
 800307a:	ea42 0285 	orr.w	r2, r2, r5, lsl #2
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800307e:	698d      	ldr	r5, [r1, #24]
 8003080:	ea42 0285 	orr.w	r2, r2, r5, lsl #2
  TIMx->CR2 = tmpcr2;
 8003084:	6042      	str	r2, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8003086:	6184      	str	r4, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8003088:	684a      	ldr	r2, [r1, #4]
 800308a:	6382      	str	r2, [r0, #56]	@ 0x38
  TIMx->CCER = tmpccer;
 800308c:	6203      	str	r3, [r0, #32]
}
 800308e:	bc30      	pop	{r4, r5}
 8003090:	4770      	bx	lr
 8003092:	bf00      	nop
 8003094:	40012c00 	.word	0x40012c00
 8003098:	40014000 	.word	0x40014000

0800309c <HAL_TIM_PWM_ConfigChannel>:
{
 800309c:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 800309e:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 80030a2:	2b01      	cmp	r3, #1
 80030a4:	d066      	beq.n	8003174 <HAL_TIM_PWM_ConfigChannel+0xd8>
 80030a6:	4604      	mov	r4, r0
 80030a8:	460d      	mov	r5, r1
 80030aa:	2301      	movs	r3, #1
 80030ac:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  switch (Channel)
 80030b0:	2a0c      	cmp	r2, #12
 80030b2:	d85a      	bhi.n	800316a <HAL_TIM_PWM_ConfigChannel+0xce>
 80030b4:	e8df f002 	tbb	[pc, r2]
 80030b8:	59595907 	.word	0x59595907
 80030bc:	5959591b 	.word	0x5959591b
 80030c0:	59595930 	.word	0x59595930
 80030c4:	44          	.byte	0x44
 80030c5:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80030c6:	6800      	ldr	r0, [r0, #0]
 80030c8:	f7ff fe1e 	bl	8002d08 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80030cc:	6822      	ldr	r2, [r4, #0]
 80030ce:	6993      	ldr	r3, [r2, #24]
 80030d0:	f043 0308 	orr.w	r3, r3, #8
 80030d4:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80030d6:	6822      	ldr	r2, [r4, #0]
 80030d8:	6993      	ldr	r3, [r2, #24]
 80030da:	f023 0304 	bic.w	r3, r3, #4
 80030de:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80030e0:	6822      	ldr	r2, [r4, #0]
 80030e2:	6993      	ldr	r3, [r2, #24]
 80030e4:	6929      	ldr	r1, [r5, #16]
 80030e6:	430b      	orrs	r3, r1
 80030e8:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 80030ea:	2000      	movs	r0, #0
      break;
 80030ec:	e03e      	b.n	800316c <HAL_TIM_PWM_ConfigChannel+0xd0>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80030ee:	6800      	ldr	r0, [r0, #0]
 80030f0:	f7ff ff98 	bl	8003024 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80030f4:	6822      	ldr	r2, [r4, #0]
 80030f6:	6993      	ldr	r3, [r2, #24]
 80030f8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80030fc:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80030fe:	6822      	ldr	r2, [r4, #0]
 8003100:	6993      	ldr	r3, [r2, #24]
 8003102:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003106:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003108:	6822      	ldr	r2, [r4, #0]
 800310a:	6993      	ldr	r3, [r2, #24]
 800310c:	6929      	ldr	r1, [r5, #16]
 800310e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8003112:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8003114:	2000      	movs	r0, #0
      break;
 8003116:	e029      	b.n	800316c <HAL_TIM_PWM_ConfigChannel+0xd0>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003118:	6800      	ldr	r0, [r0, #0]
 800311a:	f7ff fe39 	bl	8002d90 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800311e:	6822      	ldr	r2, [r4, #0]
 8003120:	69d3      	ldr	r3, [r2, #28]
 8003122:	f043 0308 	orr.w	r3, r3, #8
 8003126:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003128:	6822      	ldr	r2, [r4, #0]
 800312a:	69d3      	ldr	r3, [r2, #28]
 800312c:	f023 0304 	bic.w	r3, r3, #4
 8003130:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003132:	6822      	ldr	r2, [r4, #0]
 8003134:	69d3      	ldr	r3, [r2, #28]
 8003136:	6929      	ldr	r1, [r5, #16]
 8003138:	430b      	orrs	r3, r1
 800313a:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 800313c:	2000      	movs	r0, #0
      break;
 800313e:	e015      	b.n	800316c <HAL_TIM_PWM_ConfigChannel+0xd0>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003140:	6800      	ldr	r0, [r0, #0]
 8003142:	f7ff fe61 	bl	8002e08 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003146:	6822      	ldr	r2, [r4, #0]
 8003148:	69d3      	ldr	r3, [r2, #28]
 800314a:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800314e:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003150:	6822      	ldr	r2, [r4, #0]
 8003152:	69d3      	ldr	r3, [r2, #28]
 8003154:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003158:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800315a:	6822      	ldr	r2, [r4, #0]
 800315c:	69d3      	ldr	r3, [r2, #28]
 800315e:	6929      	ldr	r1, [r5, #16]
 8003160:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8003164:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8003166:	2000      	movs	r0, #0
      break;
 8003168:	e000      	b.n	800316c <HAL_TIM_PWM_ConfigChannel+0xd0>
  switch (Channel)
 800316a:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 800316c:	2300      	movs	r3, #0
 800316e:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 8003172:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(htim);
 8003174:	2002      	movs	r0, #2
 8003176:	e7fc      	b.n	8003172 <HAL_TIM_PWM_ConfigChannel+0xd6>

08003178 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003178:	b410      	push	{r4}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800317a:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800317c:	f424 4c7f 	bic.w	ip, r4, #65280	@ 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003180:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8003184:	430a      	orrs	r2, r1
 8003186:	ea42 020c 	orr.w	r2, r2, ip

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800318a:	6082      	str	r2, [r0, #8]
}
 800318c:	bc10      	pop	{r4}
 800318e:	4770      	bx	lr

08003190 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8003190:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8003194:	2b01      	cmp	r3, #1
 8003196:	d078      	beq.n	800328a <HAL_TIM_ConfigClockSource+0xfa>
{
 8003198:	b510      	push	{r4, lr}
 800319a:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 800319c:	2301      	movs	r3, #1
 800319e:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 80031a2:	2302      	movs	r3, #2
 80031a4:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  tmpsmcr = htim->Instance->SMCR;
 80031a8:	6802      	ldr	r2, [r0, #0]
 80031aa:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80031ac:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80031b0:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
  htim->Instance->SMCR = tmpsmcr;
 80031b4:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 80031b6:	680b      	ldr	r3, [r1, #0]
 80031b8:	2b60      	cmp	r3, #96	@ 0x60
 80031ba:	d04c      	beq.n	8003256 <HAL_TIM_ConfigClockSource+0xc6>
 80031bc:	d823      	bhi.n	8003206 <HAL_TIM_ConfigClockSource+0x76>
 80031be:	2b40      	cmp	r3, #64	@ 0x40
 80031c0:	d054      	beq.n	800326c <HAL_TIM_ConfigClockSource+0xdc>
 80031c2:	d811      	bhi.n	80031e8 <HAL_TIM_ConfigClockSource+0x58>
 80031c4:	2b20      	cmp	r3, #32
 80031c6:	d003      	beq.n	80031d0 <HAL_TIM_ConfigClockSource+0x40>
 80031c8:	d80a      	bhi.n	80031e0 <HAL_TIM_ConfigClockSource+0x50>
 80031ca:	b10b      	cbz	r3, 80031d0 <HAL_TIM_ConfigClockSource+0x40>
 80031cc:	2b10      	cmp	r3, #16
 80031ce:	d105      	bne.n	80031dc <HAL_TIM_ConfigClockSource+0x4c>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80031d0:	4619      	mov	r1, r3
 80031d2:	6820      	ldr	r0, [r4, #0]
 80031d4:	f7ff fe6d 	bl	8002eb2 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 80031d8:	2000      	movs	r0, #0
      break;
 80031da:	e028      	b.n	800322e <HAL_TIM_ConfigClockSource+0x9e>
      status = HAL_ERROR;
 80031dc:	2001      	movs	r0, #1
 80031de:	e026      	b.n	800322e <HAL_TIM_ConfigClockSource+0x9e>
  switch (sClockSourceConfig->ClockSource)
 80031e0:	2b30      	cmp	r3, #48	@ 0x30
 80031e2:	d0f5      	beq.n	80031d0 <HAL_TIM_ConfigClockSource+0x40>
      status = HAL_ERROR;
 80031e4:	2001      	movs	r0, #1
 80031e6:	e022      	b.n	800322e <HAL_TIM_ConfigClockSource+0x9e>
  switch (sClockSourceConfig->ClockSource)
 80031e8:	2b50      	cmp	r3, #80	@ 0x50
 80031ea:	d10a      	bne.n	8003202 <HAL_TIM_ConfigClockSource+0x72>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80031ec:	68ca      	ldr	r2, [r1, #12]
 80031ee:	6849      	ldr	r1, [r1, #4]
 80031f0:	6800      	ldr	r0, [r0, #0]
 80031f2:	f7ff fe39 	bl	8002e68 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80031f6:	2150      	movs	r1, #80	@ 0x50
 80031f8:	6820      	ldr	r0, [r4, #0]
 80031fa:	f7ff fe5a 	bl	8002eb2 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 80031fe:	2000      	movs	r0, #0
      break;
 8003200:	e015      	b.n	800322e <HAL_TIM_ConfigClockSource+0x9e>
      status = HAL_ERROR;
 8003202:	2001      	movs	r0, #1
 8003204:	e013      	b.n	800322e <HAL_TIM_ConfigClockSource+0x9e>
  switch (sClockSourceConfig->ClockSource)
 8003206:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800320a:	d03a      	beq.n	8003282 <HAL_TIM_ConfigClockSource+0xf2>
 800320c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003210:	d014      	beq.n	800323c <HAL_TIM_ConfigClockSource+0xac>
 8003212:	2b70      	cmp	r3, #112	@ 0x70
 8003214:	d137      	bne.n	8003286 <HAL_TIM_ConfigClockSource+0xf6>
      TIM_ETR_SetConfig(htim->Instance,
 8003216:	68cb      	ldr	r3, [r1, #12]
 8003218:	684a      	ldr	r2, [r1, #4]
 800321a:	6889      	ldr	r1, [r1, #8]
 800321c:	6800      	ldr	r0, [r0, #0]
 800321e:	f7ff ffab 	bl	8003178 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003222:	6822      	ldr	r2, [r4, #0]
 8003224:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003226:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
      htim->Instance->SMCR = tmpsmcr;
 800322a:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800322c:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800322e:	2301      	movs	r3, #1
 8003230:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 8003234:	2300      	movs	r3, #0
 8003236:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 800323a:	bd10      	pop	{r4, pc}
      TIM_ETR_SetConfig(htim->Instance,
 800323c:	68cb      	ldr	r3, [r1, #12]
 800323e:	684a      	ldr	r2, [r1, #4]
 8003240:	6889      	ldr	r1, [r1, #8]
 8003242:	6800      	ldr	r0, [r0, #0]
 8003244:	f7ff ff98 	bl	8003178 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003248:	6822      	ldr	r2, [r4, #0]
 800324a:	6893      	ldr	r3, [r2, #8]
 800324c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003250:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8003252:	2000      	movs	r0, #0
      break;
 8003254:	e7eb      	b.n	800322e <HAL_TIM_ConfigClockSource+0x9e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003256:	68ca      	ldr	r2, [r1, #12]
 8003258:	6849      	ldr	r1, [r1, #4]
 800325a:	6800      	ldr	r0, [r0, #0]
 800325c:	f7ff fe16 	bl	8002e8c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003260:	2160      	movs	r1, #96	@ 0x60
 8003262:	6820      	ldr	r0, [r4, #0]
 8003264:	f7ff fe25 	bl	8002eb2 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8003268:	2000      	movs	r0, #0
      break;
 800326a:	e7e0      	b.n	800322e <HAL_TIM_ConfigClockSource+0x9e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800326c:	68ca      	ldr	r2, [r1, #12]
 800326e:	6849      	ldr	r1, [r1, #4]
 8003270:	6800      	ldr	r0, [r0, #0]
 8003272:	f7ff fdf9 	bl	8002e68 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003276:	2140      	movs	r1, #64	@ 0x40
 8003278:	6820      	ldr	r0, [r4, #0]
 800327a:	f7ff fe1a 	bl	8002eb2 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 800327e:	2000      	movs	r0, #0
      break;
 8003280:	e7d5      	b.n	800322e <HAL_TIM_ConfigClockSource+0x9e>
  switch (sClockSourceConfig->ClockSource)
 8003282:	2000      	movs	r0, #0
 8003284:	e7d3      	b.n	800322e <HAL_TIM_ConfigClockSource+0x9e>
      status = HAL_ERROR;
 8003286:	2001      	movs	r0, #1
 8003288:	e7d1      	b.n	800322e <HAL_TIM_ConfigClockSource+0x9e>
  __HAL_LOCK(htim);
 800328a:	2002      	movs	r0, #2
}
 800328c:	4770      	bx	lr

0800328e <TIM_CCxChannelCmd>:

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800328e:	f001 011f 	and.w	r1, r1, #31
 8003292:	f04f 0c01 	mov.w	ip, #1
 8003296:	fa0c fc01 	lsl.w	ip, ip, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800329a:	6a03      	ldr	r3, [r0, #32]
 800329c:	ea23 030c 	bic.w	r3, r3, ip
 80032a0:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80032a2:	6a03      	ldr	r3, [r0, #32]
 80032a4:	408a      	lsls	r2, r1
 80032a6:	4313      	orrs	r3, r2
 80032a8:	6203      	str	r3, [r0, #32]
}
 80032aa:	4770      	bx	lr

080032ac <HAL_TIM_PWM_Start>:
{
 80032ac:	b510      	push	{r4, lr}
 80032ae:	4604      	mov	r4, r0
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80032b0:	4608      	mov	r0, r1
 80032b2:	2900      	cmp	r1, #0
 80032b4:	d13e      	bne.n	8003334 <HAL_TIM_PWM_Start+0x88>
 80032b6:	f894 303e 	ldrb.w	r3, [r4, #62]	@ 0x3e
 80032ba:	b2db      	uxtb	r3, r3
 80032bc:	3b01      	subs	r3, #1
 80032be:	bf18      	it	ne
 80032c0:	2301      	movne	r3, #1
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d16a      	bne.n	800339c <HAL_TIM_PWM_Start+0xf0>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80032c6:	2800      	cmp	r0, #0
 80032c8:	d14d      	bne.n	8003366 <HAL_TIM_PWM_Start+0xba>
 80032ca:	2302      	movs	r3, #2
 80032cc:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80032d0:	2201      	movs	r2, #1
 80032d2:	4601      	mov	r1, r0
 80032d4:	6820      	ldr	r0, [r4, #0]
 80032d6:	f7ff ffda 	bl	800328e <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80032da:	6823      	ldr	r3, [r4, #0]
 80032dc:	4a31      	ldr	r2, [pc, #196]	@ (80033a4 <HAL_TIM_PWM_Start+0xf8>)
 80032de:	4293      	cmp	r3, r2
 80032e0:	d00b      	beq.n	80032fa <HAL_TIM_PWM_Start+0x4e>
 80032e2:	f502 52a0 	add.w	r2, r2, #5120	@ 0x1400
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d007      	beq.n	80032fa <HAL_TIM_PWM_Start+0x4e>
 80032ea:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d003      	beq.n	80032fa <HAL_TIM_PWM_Start+0x4e>
 80032f2:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d103      	bne.n	8003302 <HAL_TIM_PWM_Start+0x56>
    __HAL_TIM_MOE_ENABLE(htim);
 80032fa:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80032fc:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003300:	645a      	str	r2, [r3, #68]	@ 0x44
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003302:	6823      	ldr	r3, [r4, #0]
 8003304:	4a27      	ldr	r2, [pc, #156]	@ (80033a4 <HAL_TIM_PWM_Start+0xf8>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d03d      	beq.n	8003386 <HAL_TIM_PWM_Start+0xda>
 800330a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800330e:	d03a      	beq.n	8003386 <HAL_TIM_PWM_Start+0xda>
 8003310:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 8003314:	4293      	cmp	r3, r2
 8003316:	d036      	beq.n	8003386 <HAL_TIM_PWM_Start+0xda>
 8003318:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800331c:	4293      	cmp	r3, r2
 800331e:	d032      	beq.n	8003386 <HAL_TIM_PWM_Start+0xda>
 8003320:	f502 329c 	add.w	r2, r2, #79872	@ 0x13800
 8003324:	4293      	cmp	r3, r2
 8003326:	d02e      	beq.n	8003386 <HAL_TIM_PWM_Start+0xda>
    __HAL_TIM_ENABLE(htim);
 8003328:	681a      	ldr	r2, [r3, #0]
 800332a:	f042 0201 	orr.w	r2, r2, #1
 800332e:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8003330:	2000      	movs	r0, #0
 8003332:	e032      	b.n	800339a <HAL_TIM_PWM_Start+0xee>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003334:	2904      	cmp	r1, #4
 8003336:	d008      	beq.n	800334a <HAL_TIM_PWM_Start+0x9e>
 8003338:	2908      	cmp	r1, #8
 800333a:	d00d      	beq.n	8003358 <HAL_TIM_PWM_Start+0xac>
 800333c:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 8003340:	b2db      	uxtb	r3, r3
 8003342:	3b01      	subs	r3, #1
 8003344:	bf18      	it	ne
 8003346:	2301      	movne	r3, #1
 8003348:	e7bb      	b.n	80032c2 <HAL_TIM_PWM_Start+0x16>
 800334a:	f894 303f 	ldrb.w	r3, [r4, #63]	@ 0x3f
 800334e:	b2db      	uxtb	r3, r3
 8003350:	3b01      	subs	r3, #1
 8003352:	bf18      	it	ne
 8003354:	2301      	movne	r3, #1
 8003356:	e7b4      	b.n	80032c2 <HAL_TIM_PWM_Start+0x16>
 8003358:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 800335c:	b2db      	uxtb	r3, r3
 800335e:	3b01      	subs	r3, #1
 8003360:	bf18      	it	ne
 8003362:	2301      	movne	r3, #1
 8003364:	e7ad      	b.n	80032c2 <HAL_TIM_PWM_Start+0x16>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003366:	2804      	cmp	r0, #4
 8003368:	d005      	beq.n	8003376 <HAL_TIM_PWM_Start+0xca>
 800336a:	2808      	cmp	r0, #8
 800336c:	d007      	beq.n	800337e <HAL_TIM_PWM_Start+0xd2>
 800336e:	2302      	movs	r3, #2
 8003370:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 8003374:	e7ac      	b.n	80032d0 <HAL_TIM_PWM_Start+0x24>
 8003376:	2302      	movs	r3, #2
 8003378:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 800337c:	e7a8      	b.n	80032d0 <HAL_TIM_PWM_Start+0x24>
 800337e:	2302      	movs	r3, #2
 8003380:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8003384:	e7a4      	b.n	80032d0 <HAL_TIM_PWM_Start+0x24>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003386:	689a      	ldr	r2, [r3, #8]
 8003388:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800338c:	2a06      	cmp	r2, #6
 800338e:	d007      	beq.n	80033a0 <HAL_TIM_PWM_Start+0xf4>
      __HAL_TIM_ENABLE(htim);
 8003390:	681a      	ldr	r2, [r3, #0]
 8003392:	f042 0201 	orr.w	r2, r2, #1
 8003396:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8003398:	2000      	movs	r0, #0
}
 800339a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800339c:	2001      	movs	r0, #1
 800339e:	e7fc      	b.n	800339a <HAL_TIM_PWM_Start+0xee>
  return HAL_OK;
 80033a0:	2000      	movs	r0, #0
 80033a2:	e7fa      	b.n	800339a <HAL_TIM_PWM_Start+0xee>
 80033a4:	40012c00 	.word	0x40012c00

080033a8 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80033a8:	f890 203c 	ldrb.w	r2, [r0, #60]	@ 0x3c
 80033ac:	2a01      	cmp	r2, #1
 80033ae:	d030      	beq.n	8003412 <HAL_TIMEx_MasterConfigSynchronization+0x6a>
{
 80033b0:	b410      	push	{r4}
 80033b2:	4603      	mov	r3, r0
  __HAL_LOCK(htim);
 80033b4:	2201      	movs	r2, #1
 80033b6:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033ba:	2202      	movs	r2, #2
 80033bc:	f880 203d 	strb.w	r2, [r0, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80033c0:	6802      	ldr	r2, [r0, #0]
 80033c2:	6850      	ldr	r0, [r2, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80033c4:	6894      	ldr	r4, [r2, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80033c6:	f020 0c70 	bic.w	ip, r0, #112	@ 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80033ca:	6808      	ldr	r0, [r1, #0]
 80033cc:	ea40 000c 	orr.w	r0, r0, ip

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80033d0:	6050      	str	r0, [r2, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80033d2:	681a      	ldr	r2, [r3, #0]
 80033d4:	4810      	ldr	r0, [pc, #64]	@ (8003418 <HAL_TIMEx_MasterConfigSynchronization+0x70>)
 80033d6:	4282      	cmp	r2, r0
 80033d8:	d00e      	beq.n	80033f8 <HAL_TIMEx_MasterConfigSynchronization+0x50>
 80033da:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 80033de:	d00b      	beq.n	80033f8 <HAL_TIMEx_MasterConfigSynchronization+0x50>
 80033e0:	f5a0 3094 	sub.w	r0, r0, #75776	@ 0x12800
 80033e4:	4282      	cmp	r2, r0
 80033e6:	d007      	beq.n	80033f8 <HAL_TIMEx_MasterConfigSynchronization+0x50>
 80033e8:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
 80033ec:	4282      	cmp	r2, r0
 80033ee:	d003      	beq.n	80033f8 <HAL_TIMEx_MasterConfigSynchronization+0x50>
 80033f0:	f500 309c 	add.w	r0, r0, #79872	@ 0x13800
 80033f4:	4282      	cmp	r2, r0
 80033f6:	d104      	bne.n	8003402 <HAL_TIMEx_MasterConfigSynchronization+0x5a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80033f8:	f024 0480 	bic.w	r4, r4, #128	@ 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80033fc:	6849      	ldr	r1, [r1, #4]
 80033fe:	4321      	orrs	r1, r4

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003400:	6091      	str	r1, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003402:	2201      	movs	r2, #1
 8003404:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003408:	2000      	movs	r0, #0
 800340a:	f883 003c 	strb.w	r0, [r3, #60]	@ 0x3c

  return HAL_OK;
}
 800340e:	bc10      	pop	{r4}
 8003410:	4770      	bx	lr
  __HAL_LOCK(htim);
 8003412:	2002      	movs	r0, #2
}
 8003414:	4770      	bx	lr
 8003416:	bf00      	nop
 8003418:	40012c00 	.word	0x40012c00

0800341c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800341c:	4602      	mov	r2, r0
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800341e:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8003422:	2b01      	cmp	r3, #1
 8003424:	d021      	beq.n	800346a <HAL_TIMEx_ConfigBreakDeadTime+0x4e>
 8003426:	2301      	movs	r3, #1
 8003428:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800342c:	68cb      	ldr	r3, [r1, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800342e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003432:	6888      	ldr	r0, [r1, #8]
 8003434:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003436:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800343a:	6848      	ldr	r0, [r1, #4]
 800343c:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800343e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003442:	6808      	ldr	r0, [r1, #0]
 8003444:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003446:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800344a:	6908      	ldr	r0, [r1, #16]
 800344c:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800344e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003452:	6948      	ldr	r0, [r1, #20]
 8003454:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003456:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800345a:	69c9      	ldr	r1, [r1, #28]
 800345c:	430b      	orrs	r3, r1


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800345e:	6811      	ldr	r1, [r2, #0]
 8003460:	644b      	str	r3, [r1, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8003462:	2000      	movs	r0, #0
 8003464:	f882 003c 	strb.w	r0, [r2, #60]	@ 0x3c

  return HAL_OK;
 8003468:	4770      	bx	lr
  __HAL_LOCK(htim);
 800346a:	2002      	movs	r0, #2
}
 800346c:	4770      	bx	lr

0800346e <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800346e:	e7fe      	b.n	800346e <NMI_Handler>

08003470 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003470:	e7fe      	b.n	8003470 <HardFault_Handler>

08003472 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003472:	e7fe      	b.n	8003472 <MemManage_Handler>

08003474 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003474:	e7fe      	b.n	8003474 <BusFault_Handler>

08003476 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003476:	e7fe      	b.n	8003476 <UsageFault_Handler>

08003478 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003478:	4770      	bx	lr

0800347a <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800347a:	4770      	bx	lr

0800347c <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800347c:	4770      	bx	lr

0800347e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800347e:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003480:	f7fe fa28 	bl	80018d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003484:	bd08      	pop	{r3, pc}
	...

08003488 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8003488:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800348a:	4802      	ldr	r0, [pc, #8]	@ (8003494 <DMA1_Channel1_IRQHandler+0xc>)
 800348c:	f7fe fe1e 	bl	80020cc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8003490:	bd08      	pop	{r3, pc}
 8003492:	bf00      	nop
 8003494:	20000174 	.word	0x20000174

08003498 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC1_IRQHandler(void)
{
 8003498:	b508      	push	{r3, lr}
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800349a:	4802      	ldr	r0, [pc, #8]	@ (80034a4 <ADC1_IRQHandler+0xc>)
 800349c:	f7fe fa70 	bl	8001980 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 80034a0:	bd08      	pop	{r3, pc}
 80034a2:	bf00      	nop
 80034a4:	200001b8 	.word	0x200001b8

080034a8 <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80034a8:	4770      	bx	lr
	...

080034ac <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80034ac:	f7ff fffc 	bl	80034a8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80034b0:	480b      	ldr	r0, [pc, #44]	@ (80034e0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80034b2:	490c      	ldr	r1, [pc, #48]	@ (80034e4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80034b4:	4a0c      	ldr	r2, [pc, #48]	@ (80034e8 <LoopFillZerobss+0x16>)
  movs r3, #0
 80034b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80034b8:	e002      	b.n	80034c0 <LoopCopyDataInit>

080034ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80034ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80034bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80034be:	3304      	adds	r3, #4

080034c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80034c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80034c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80034c4:	d3f9      	bcc.n	80034ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80034c6:	4a09      	ldr	r2, [pc, #36]	@ (80034ec <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80034c8:	4c09      	ldr	r4, [pc, #36]	@ (80034f0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80034ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80034cc:	e001      	b.n	80034d2 <LoopFillZerobss>

080034ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80034ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80034d0:	3204      	adds	r2, #4

080034d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80034d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80034d4:	d3fb      	bcc.n	80034ce <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80034d6:	f000 f81d 	bl	8003514 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80034da:	f7fe f89d 	bl	8001618 <main>
  bx lr
 80034de:	4770      	bx	lr
  ldr r0, =_sdata
 80034e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80034e4:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 80034e8:	08004550 	.word	0x08004550
  ldr r2, =_sbss
 80034ec:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 80034f0:	20000324 	.word	0x20000324

080034f4 <CEC_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80034f4:	e7fe      	b.n	80034f4 <CEC_IRQHandler>

080034f6 <memset>:
 80034f6:	4603      	mov	r3, r0
 80034f8:	4402      	add	r2, r0
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d100      	bne.n	8003500 <memset+0xa>
 80034fe:	4770      	bx	lr
 8003500:	f803 1b01 	strb.w	r1, [r3], #1
 8003504:	e7f9      	b.n	80034fa <memset+0x4>
	...

08003508 <__errno>:
 8003508:	4b01      	ldr	r3, [pc, #4]	@ (8003510 <__errno+0x8>)
 800350a:	6818      	ldr	r0, [r3, #0]
 800350c:	4770      	bx	lr
 800350e:	bf00      	nop
 8003510:	2000001c 	.word	0x2000001c

08003514 <__libc_init_array>:
 8003514:	b570      	push	{r4, r5, r6, lr}
 8003516:	2600      	movs	r6, #0
 8003518:	4d0c      	ldr	r5, [pc, #48]	@ (800354c <__libc_init_array+0x38>)
 800351a:	4c0d      	ldr	r4, [pc, #52]	@ (8003550 <__libc_init_array+0x3c>)
 800351c:	1b64      	subs	r4, r4, r5
 800351e:	10a4      	asrs	r4, r4, #2
 8003520:	42a6      	cmp	r6, r4
 8003522:	d109      	bne.n	8003538 <__libc_init_array+0x24>
 8003524:	f000 ffd2 	bl	80044cc <_init>
 8003528:	2600      	movs	r6, #0
 800352a:	4d0a      	ldr	r5, [pc, #40]	@ (8003554 <__libc_init_array+0x40>)
 800352c:	4c0a      	ldr	r4, [pc, #40]	@ (8003558 <__libc_init_array+0x44>)
 800352e:	1b64      	subs	r4, r4, r5
 8003530:	10a4      	asrs	r4, r4, #2
 8003532:	42a6      	cmp	r6, r4
 8003534:	d105      	bne.n	8003542 <__libc_init_array+0x2e>
 8003536:	bd70      	pop	{r4, r5, r6, pc}
 8003538:	f855 3b04 	ldr.w	r3, [r5], #4
 800353c:	4798      	blx	r3
 800353e:	3601      	adds	r6, #1
 8003540:	e7ee      	b.n	8003520 <__libc_init_array+0xc>
 8003542:	f855 3b04 	ldr.w	r3, [r5], #4
 8003546:	4798      	blx	r3
 8003548:	3601      	adds	r6, #1
 800354a:	e7f2      	b.n	8003532 <__libc_init_array+0x1e>
 800354c:	08004548 	.word	0x08004548
 8003550:	08004548 	.word	0x08004548
 8003554:	08004548 	.word	0x08004548
 8003558:	0800454c 	.word	0x0800454c

0800355c <pow>:
 800355c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003560:	4614      	mov	r4, r2
 8003562:	461d      	mov	r5, r3
 8003564:	4680      	mov	r8, r0
 8003566:	4689      	mov	r9, r1
 8003568:	f000 f86e 	bl	8003648 <__ieee754_pow>
 800356c:	4622      	mov	r2, r4
 800356e:	4606      	mov	r6, r0
 8003570:	460f      	mov	r7, r1
 8003572:	462b      	mov	r3, r5
 8003574:	4620      	mov	r0, r4
 8003576:	4629      	mov	r1, r5
 8003578:	f7fd fa80 	bl	8000a7c <__aeabi_dcmpun>
 800357c:	b978      	cbnz	r0, 800359e <pow+0x42>
 800357e:	2200      	movs	r2, #0
 8003580:	2300      	movs	r3, #0
 8003582:	4640      	mov	r0, r8
 8003584:	4649      	mov	r1, r9
 8003586:	f7fd fa47 	bl	8000a18 <__aeabi_dcmpeq>
 800358a:	b1d8      	cbz	r0, 80035c4 <pow+0x68>
 800358c:	2200      	movs	r2, #0
 800358e:	2300      	movs	r3, #0
 8003590:	4620      	mov	r0, r4
 8003592:	4629      	mov	r1, r5
 8003594:	f7fd fa40 	bl	8000a18 <__aeabi_dcmpeq>
 8003598:	b128      	cbz	r0, 80035a6 <pow+0x4a>
 800359a:	2600      	movs	r6, #0
 800359c:	4f25      	ldr	r7, [pc, #148]	@ (8003634 <pow+0xd8>)
 800359e:	4630      	mov	r0, r6
 80035a0:	4639      	mov	r1, r7
 80035a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80035a6:	4620      	mov	r0, r4
 80035a8:	4629      	mov	r1, r5
 80035aa:	f000 f845 	bl	8003638 <finite>
 80035ae:	2800      	cmp	r0, #0
 80035b0:	d0f5      	beq.n	800359e <pow+0x42>
 80035b2:	4620      	mov	r0, r4
 80035b4:	4629      	mov	r1, r5
 80035b6:	2200      	movs	r2, #0
 80035b8:	2300      	movs	r3, #0
 80035ba:	f7fd fa37 	bl	8000a2c <__aeabi_dcmplt>
 80035be:	2800      	cmp	r0, #0
 80035c0:	d0ed      	beq.n	800359e <pow+0x42>
 80035c2:	e02c      	b.n	800361e <pow+0xc2>
 80035c4:	4630      	mov	r0, r6
 80035c6:	4639      	mov	r1, r7
 80035c8:	f000 f836 	bl	8003638 <finite>
 80035cc:	b1a0      	cbz	r0, 80035f8 <pow+0x9c>
 80035ce:	2200      	movs	r2, #0
 80035d0:	2300      	movs	r3, #0
 80035d2:	4630      	mov	r0, r6
 80035d4:	4639      	mov	r1, r7
 80035d6:	f7fd fa1f 	bl	8000a18 <__aeabi_dcmpeq>
 80035da:	2800      	cmp	r0, #0
 80035dc:	d0df      	beq.n	800359e <pow+0x42>
 80035de:	4640      	mov	r0, r8
 80035e0:	4649      	mov	r1, r9
 80035e2:	f000 f829 	bl	8003638 <finite>
 80035e6:	2800      	cmp	r0, #0
 80035e8:	d0d9      	beq.n	800359e <pow+0x42>
 80035ea:	4620      	mov	r0, r4
 80035ec:	4629      	mov	r1, r5
 80035ee:	f000 f823 	bl	8003638 <finite>
 80035f2:	2800      	cmp	r0, #0
 80035f4:	d0d3      	beq.n	800359e <pow+0x42>
 80035f6:	e012      	b.n	800361e <pow+0xc2>
 80035f8:	4640      	mov	r0, r8
 80035fa:	4649      	mov	r1, r9
 80035fc:	f000 f81c 	bl	8003638 <finite>
 8003600:	2800      	cmp	r0, #0
 8003602:	d0e4      	beq.n	80035ce <pow+0x72>
 8003604:	4620      	mov	r0, r4
 8003606:	4629      	mov	r1, r5
 8003608:	f000 f816 	bl	8003638 <finite>
 800360c:	2800      	cmp	r0, #0
 800360e:	d0de      	beq.n	80035ce <pow+0x72>
 8003610:	4632      	mov	r2, r6
 8003612:	463b      	mov	r3, r7
 8003614:	4630      	mov	r0, r6
 8003616:	4639      	mov	r1, r7
 8003618:	f7fd fa30 	bl	8000a7c <__aeabi_dcmpun>
 800361c:	b920      	cbnz	r0, 8003628 <pow+0xcc>
 800361e:	f7ff ff73 	bl	8003508 <__errno>
 8003622:	2322      	movs	r3, #34	@ 0x22
 8003624:	6003      	str	r3, [r0, #0]
 8003626:	e7ba      	b.n	800359e <pow+0x42>
 8003628:	f7ff ff6e 	bl	8003508 <__errno>
 800362c:	2321      	movs	r3, #33	@ 0x21
 800362e:	6003      	str	r3, [r0, #0]
 8003630:	e7b5      	b.n	800359e <pow+0x42>
 8003632:	bf00      	nop
 8003634:	3ff00000 	.word	0x3ff00000

08003638 <finite>:
 8003638:	f041 4000 	orr.w	r0, r1, #2147483648	@ 0x80000000
 800363c:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 8003640:	0fc0      	lsrs	r0, r0, #31
 8003642:	4770      	bx	lr
 8003644:	0000      	movs	r0, r0
	...

08003648 <__ieee754_pow>:
 8003648:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800364c:	f023 4700 	bic.w	r7, r3, #2147483648	@ 0x80000000
 8003650:	460d      	mov	r5, r1
 8003652:	ea57 0102 	orrs.w	r1, r7, r2
 8003656:	4692      	mov	sl, r2
 8003658:	469b      	mov	fp, r3
 800365a:	4604      	mov	r4, r0
 800365c:	b093      	sub	sp, #76	@ 0x4c
 800365e:	d110      	bne.n	8003682 <__ieee754_pow+0x3a>
 8003660:	1923      	adds	r3, r4, r4
 8003662:	4881      	ldr	r0, [pc, #516]	@ (8003868 <__ieee754_pow+0x220>)
 8003664:	f485 2200 	eor.w	r2, r5, #524288	@ 0x80000
 8003668:	4152      	adcs	r2, r2
 800366a:	4299      	cmp	r1, r3
 800366c:	4190      	sbcs	r0, r2
 800366e:	d221      	bcs.n	80036b4 <__ieee754_pow+0x6c>
 8003670:	4652      	mov	r2, sl
 8003672:	465b      	mov	r3, fp
 8003674:	4620      	mov	r0, r4
 8003676:	4629      	mov	r1, r5
 8003678:	f7fc fdb0 	bl	80001dc <__adddf3>
 800367c:	b013      	add	sp, #76	@ 0x4c
 800367e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003682:	4699      	mov	r9, r3
 8003684:	4b79      	ldr	r3, [pc, #484]	@ (800386c <__ieee754_pow+0x224>)
 8003686:	f025 4100 	bic.w	r1, r5, #2147483648	@ 0x80000000
 800368a:	4299      	cmp	r1, r3
 800368c:	462e      	mov	r6, r5
 800368e:	9000      	str	r0, [sp, #0]
 8003690:	9102      	str	r1, [sp, #8]
 8003692:	d914      	bls.n	80036be <__ieee754_pow+0x76>
 8003694:	9b00      	ldr	r3, [sp, #0]
 8003696:	f106 4640 	add.w	r6, r6, #3221225472	@ 0xc0000000
 800369a:	f506 1680 	add.w	r6, r6, #1048576	@ 0x100000
 800369e:	431e      	orrs	r6, r3
 80036a0:	d1e6      	bne.n	8003670 <__ieee754_pow+0x28>
 80036a2:	4653      	mov	r3, sl
 80036a4:	4970      	ldr	r1, [pc, #448]	@ (8003868 <__ieee754_pow+0x220>)
 80036a6:	18db      	adds	r3, r3, r3
 80036a8:	f48b 2200 	eor.w	r2, fp, #524288	@ 0x80000
 80036ac:	4152      	adcs	r2, r2
 80036ae:	429e      	cmp	r6, r3
 80036b0:	4191      	sbcs	r1, r2
 80036b2:	d3dd      	bcc.n	8003670 <__ieee754_pow+0x28>
 80036b4:	2000      	movs	r0, #0
 80036b6:	496e      	ldr	r1, [pc, #440]	@ (8003870 <__ieee754_pow+0x228>)
 80036b8:	b013      	add	sp, #76	@ 0x4c
 80036ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80036be:	d014      	beq.n	80036ea <__ieee754_pow+0xa2>
 80036c0:	429f      	cmp	r7, r3
 80036c2:	d8e7      	bhi.n	8003694 <__ieee754_pow+0x4c>
 80036c4:	9b02      	ldr	r3, [sp, #8]
 80036c6:	f000 80a5 	beq.w	8003814 <__ieee754_pow+0x1cc>
 80036ca:	2e00      	cmp	r6, #0
 80036cc:	db15      	blt.n	80036fa <__ieee754_pow+0xb2>
 80036ce:	2a00      	cmp	r2, #0
 80036d0:	f040 80b8 	bne.w	8003844 <__ieee754_pow+0x1fc>
 80036d4:	4966      	ldr	r1, [pc, #408]	@ (8003870 <__ieee754_pow+0x228>)
 80036d6:	428f      	cmp	r7, r1
 80036d8:	f040 83ce 	bne.w	8003e78 <__ieee754_pow+0x830>
 80036dc:	f1b9 0f00 	cmp.w	r9, #0
 80036e0:	f2c0 84b5 	blt.w	800404e <__ieee754_pow+0xa06>
 80036e4:	4620      	mov	r0, r4
 80036e6:	4629      	mov	r1, r5
 80036e8:	e7c8      	b.n	800367c <__ieee754_pow+0x34>
 80036ea:	2800      	cmp	r0, #0
 80036ec:	d1c0      	bne.n	8003670 <__ieee754_pow+0x28>
 80036ee:	428f      	cmp	r7, r1
 80036f0:	d8be      	bhi.n	8003670 <__ieee754_pow+0x28>
 80036f2:	f000 83f2 	beq.w	8003eda <__ieee754_pow+0x892>
 80036f6:	9b02      	ldr	r3, [sp, #8]
 80036f8:	e7e7      	b.n	80036ca <__ieee754_pow+0x82>
 80036fa:	495e      	ldr	r1, [pc, #376]	@ (8003874 <__ieee754_pow+0x22c>)
 80036fc:	428f      	cmp	r7, r1
 80036fe:	f200 83b5 	bhi.w	8003e6c <__ieee754_pow+0x824>
 8003702:	495d      	ldr	r1, [pc, #372]	@ (8003878 <__ieee754_pow+0x230>)
 8003704:	428f      	cmp	r7, r1
 8003706:	d83d      	bhi.n	8003784 <__ieee754_pow+0x13c>
 8003708:	2a00      	cmp	r2, #0
 800370a:	f040 83c4 	bne.w	8003e96 <__ieee754_pow+0x84e>
 800370e:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 8003712:	d030      	beq.n	8003776 <__ieee754_pow+0x12e>
 8003714:	4690      	mov	r8, r2
 8003716:	4620      	mov	r0, r4
 8003718:	4629      	mov	r1, r5
 800371a:	9304      	str	r3, [sp, #16]
 800371c:	f000 fd68 	bl	80041f0 <fabs>
 8003720:	9a00      	ldr	r2, [sp, #0]
 8003722:	9b04      	ldr	r3, [sp, #16]
 8003724:	2a00      	cmp	r2, #0
 8003726:	d04d      	beq.n	80037c4 <__ieee754_pow+0x17c>
 8003728:	0ff2      	lsrs	r2, r6, #31
 800372a:	3a01      	subs	r2, #1
 800372c:	ea52 0c08 	orrs.w	ip, r2, r8
 8003730:	f000 8096 	beq.w	8003860 <__ieee754_pow+0x218>
 8003734:	2400      	movs	r4, #0
 8003736:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800373a:	ea58 0802 	orrs.w	r8, r8, r2
 800373e:	bf14      	ite	ne
 8003740:	4d4b      	ldrne	r5, [pc, #300]	@ (8003870 <__ieee754_pow+0x228>)
 8003742:	4d4e      	ldreq	r5, [pc, #312]	@ (800387c <__ieee754_pow+0x234>)
 8003744:	f1b7 4f84 	cmp.w	r7, #1107296256	@ 0x42000000
 8003748:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800374c:	f240 809a 	bls.w	8003884 <__ieee754_pow+0x23c>
 8003750:	4b4b      	ldr	r3, [pc, #300]	@ (8003880 <__ieee754_pow+0x238>)
 8003752:	9a02      	ldr	r2, [sp, #8]
 8003754:	429f      	cmp	r7, r3
 8003756:	4b48      	ldr	r3, [pc, #288]	@ (8003878 <__ieee754_pow+0x230>)
 8003758:	f240 83f6 	bls.w	8003f48 <__ieee754_pow+0x900>
 800375c:	429a      	cmp	r2, r3
 800375e:	f200 8487 	bhi.w	8004070 <__ieee754_pow+0xa28>
 8003762:	f1b9 0f00 	cmp.w	r9, #0
 8003766:	f2c0 8487 	blt.w	8004078 <__ieee754_pow+0xa30>
 800376a:	2000      	movs	r0, #0
 800376c:	b013      	add	sp, #76	@ 0x4c
 800376e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003772:	f000 bd31 	b.w	80041d8 <__math_uflow>
 8003776:	4622      	mov	r2, r4
 8003778:	462b      	mov	r3, r5
 800377a:	4620      	mov	r0, r4
 800377c:	4629      	mov	r1, r5
 800377e:	f7fc fee3 	bl	8000548 <__aeabi_dmul>
 8003782:	e77b      	b.n	800367c <__ieee754_pow+0x34>
 8003784:	1539      	asrs	r1, r7, #20
 8003786:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 800378a:	2914      	cmp	r1, #20
 800378c:	f340 8446 	ble.w	800401c <__ieee754_pow+0x9d4>
 8003790:	f1c1 0134 	rsb	r1, r1, #52	@ 0x34
 8003794:	fa22 f001 	lsr.w	r0, r2, r1
 8003798:	fa00 f101 	lsl.w	r1, r0, r1
 800379c:	4291      	cmp	r1, r2
 800379e:	f000 84af 	beq.w	8004100 <__ieee754_pow+0xab8>
 80037a2:	2a00      	cmp	r2, #0
 80037a4:	f040 8377 	bne.w	8003e96 <__ieee754_pow+0x84e>
 80037a8:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 80037ac:	9304      	str	r3, [sp, #16]
 80037ae:	d0e2      	beq.n	8003776 <__ieee754_pow+0x12e>
 80037b0:	4620      	mov	r0, r4
 80037b2:	4629      	mov	r1, r5
 80037b4:	f000 fd1c 	bl	80041f0 <fabs>
 80037b8:	9a00      	ldr	r2, [sp, #0]
 80037ba:	9b04      	ldr	r3, [sp, #16]
 80037bc:	2a00      	cmp	r2, #0
 80037be:	d14f      	bne.n	8003860 <__ieee754_pow+0x218>
 80037c0:	f8dd 8000 	ldr.w	r8, [sp]
 80037c4:	4a2a      	ldr	r2, [pc, #168]	@ (8003870 <__ieee754_pow+0x228>)
 80037c6:	f026 4c40 	bic.w	ip, r6, #3221225472	@ 0xc0000000
 80037ca:	4594      	cmp	ip, r2
 80037cc:	d002      	beq.n	80037d4 <__ieee754_pow+0x18c>
 80037ce:	9a02      	ldr	r2, [sp, #8]
 80037d0:	2a00      	cmp	r2, #0
 80037d2:	d1a9      	bne.n	8003728 <__ieee754_pow+0xe0>
 80037d4:	f1b9 0f00 	cmp.w	r9, #0
 80037d8:	da05      	bge.n	80037e6 <__ieee754_pow+0x19e>
 80037da:	4602      	mov	r2, r0
 80037dc:	460b      	mov	r3, r1
 80037de:	2000      	movs	r0, #0
 80037e0:	4923      	ldr	r1, [pc, #140]	@ (8003870 <__ieee754_pow+0x228>)
 80037e2:	f7fc ffdb 	bl	800079c <__aeabi_ddiv>
 80037e6:	2e00      	cmp	r6, #0
 80037e8:	f6bf af48 	bge.w	800367c <__ieee754_pow+0x34>
 80037ec:	9b02      	ldr	r3, [sp, #8]
 80037ee:	f103 4b40 	add.w	fp, r3, #3221225472	@ 0xc0000000
 80037f2:	f50b 1b80 	add.w	fp, fp, #1048576	@ 0x100000
 80037f6:	ea5b 0b08 	orrs.w	fp, fp, r8
 80037fa:	f040 8430 	bne.w	800405e <__ieee754_pow+0xa16>
 80037fe:	4602      	mov	r2, r0
 8003800:	460b      	mov	r3, r1
 8003802:	4610      	mov	r0, r2
 8003804:	4619      	mov	r1, r3
 8003806:	f7fc fce7 	bl	80001d8 <__aeabi_dsub>
 800380a:	4602      	mov	r2, r0
 800380c:	460b      	mov	r3, r1
 800380e:	f7fc ffc5 	bl	800079c <__aeabi_ddiv>
 8003812:	e733      	b.n	800367c <__ieee754_pow+0x34>
 8003814:	2a00      	cmp	r2, #0
 8003816:	f47f af3d 	bne.w	8003694 <__ieee754_pow+0x4c>
 800381a:	9b02      	ldr	r3, [sp, #8]
 800381c:	9a00      	ldr	r2, [sp, #0]
 800381e:	f103 4340 	add.w	r3, r3, #3221225472	@ 0xc0000000
 8003822:	f503 1380 	add.w	r3, r3, #1048576	@ 0x100000
 8003826:	4313      	orrs	r3, r2
 8003828:	f43f af44 	beq.w	80036b4 <__ieee754_pow+0x6c>
 800382c:	4b12      	ldr	r3, [pc, #72]	@ (8003878 <__ieee754_pow+0x230>)
 800382e:	9a02      	ldr	r2, [sp, #8]
 8003830:	429a      	cmp	r2, r3
 8003832:	f240 83e6 	bls.w	8004002 <__ieee754_pow+0x9ba>
 8003836:	f1b9 0f00 	cmp.w	r9, #0
 800383a:	f2c0 8450 	blt.w	80040de <__ieee754_pow+0xa96>
 800383e:	4650      	mov	r0, sl
 8003840:	4659      	mov	r1, fp
 8003842:	e71b      	b.n	800367c <__ieee754_pow+0x34>
 8003844:	f04f 0800 	mov.w	r8, #0
 8003848:	4620      	mov	r0, r4
 800384a:	4629      	mov	r1, r5
 800384c:	9304      	str	r3, [sp, #16]
 800384e:	f000 fccf 	bl	80041f0 <fabs>
 8003852:	9a00      	ldr	r2, [sp, #0]
 8003854:	9b04      	ldr	r3, [sp, #16]
 8003856:	2a00      	cmp	r2, #0
 8003858:	d0b4      	beq.n	80037c4 <__ieee754_pow+0x17c>
 800385a:	0ff2      	lsrs	r2, r6, #31
 800385c:	3a01      	subs	r2, #1
 800385e:	e769      	b.n	8003734 <__ieee754_pow+0xec>
 8003860:	4622      	mov	r2, r4
 8003862:	462b      	mov	r3, r5
 8003864:	e7cd      	b.n	8003802 <__ieee754_pow+0x1ba>
 8003866:	bf00      	nop
 8003868:	fff00000 	.word	0xfff00000
 800386c:	7ff00000 	.word	0x7ff00000
 8003870:	3ff00000 	.word	0x3ff00000
 8003874:	433fffff 	.word	0x433fffff
 8003878:	3fefffff 	.word	0x3fefffff
 800387c:	bff00000 	.word	0xbff00000
 8003880:	43f00000 	.word	0x43f00000
 8003884:	4ad0      	ldr	r2, [pc, #832]	@ (8003bc8 <__ieee754_pow+0x580>)
 8003886:	4032      	ands	r2, r6
 8003888:	2a00      	cmp	r2, #0
 800388a:	f040 832a 	bne.w	8003ee2 <__ieee754_pow+0x89a>
 800388e:	4bcf      	ldr	r3, [pc, #828]	@ (8003bcc <__ieee754_pow+0x584>)
 8003890:	2200      	movs	r2, #0
 8003892:	f7fc fe59 	bl	8000548 <__aeabi_dmul>
 8003896:	f06f 0434 	mvn.w	r4, #52	@ 0x34
 800389a:	460b      	mov	r3, r1
 800389c:	151a      	asrs	r2, r3, #20
 800389e:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 80038a2:	1915      	adds	r5, r2, r4
 80038a4:	4aca      	ldr	r2, [pc, #808]	@ (8003bd0 <__ieee754_pow+0x588>)
 80038a6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80038aa:	f043 547f 	orr.w	r4, r3, #1069547520	@ 0x3fc00000
 80038ae:	4293      	cmp	r3, r2
 80038b0:	950b      	str	r5, [sp, #44]	@ 0x2c
 80038b2:	f444 1440 	orr.w	r4, r4, #3145728	@ 0x300000
 80038b6:	dd07      	ble.n	80038c8 <__ieee754_pow+0x280>
 80038b8:	4ac6      	ldr	r2, [pc, #792]	@ (8003bd4 <__ieee754_pow+0x58c>)
 80038ba:	4293      	cmp	r3, r2
 80038bc:	f340 83e2 	ble.w	8004084 <__ieee754_pow+0xa3c>
 80038c0:	3501      	adds	r5, #1
 80038c2:	950b      	str	r5, [sp, #44]	@ 0x2c
 80038c4:	f5a4 1480 	sub.w	r4, r4, #1048576	@ 0x100000
 80038c8:	2200      	movs	r2, #0
 80038ca:	2300      	movs	r3, #0
 80038cc:	2600      	movs	r6, #0
 80038ce:	2500      	movs	r5, #0
 80038d0:	4fc1      	ldr	r7, [pc, #772]	@ (8003bd8 <__ieee754_pow+0x590>)
 80038d2:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80038d6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80038da:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80038de:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80038e2:	4621      	mov	r1, r4
 80038e4:	4680      	mov	r8, r0
 80038e6:	f7fc fc77 	bl	80001d8 <__aeabi_dsub>
 80038ea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80038ee:	46a1      	mov	r9, r4
 80038f0:	4606      	mov	r6, r0
 80038f2:	460f      	mov	r7, r1
 80038f4:	4640      	mov	r0, r8
 80038f6:	4621      	mov	r1, r4
 80038f8:	e9cd 890c 	strd	r8, r9, [sp, #48]	@ 0x30
 80038fc:	f7fc fc6e 	bl	80001dc <__adddf3>
 8003900:	4602      	mov	r2, r0
 8003902:	460b      	mov	r3, r1
 8003904:	2000      	movs	r0, #0
 8003906:	49b4      	ldr	r1, [pc, #720]	@ (8003bd8 <__ieee754_pow+0x590>)
 8003908:	f7fc ff48 	bl	800079c <__aeabi_ddiv>
 800390c:	4602      	mov	r2, r0
 800390e:	460b      	mov	r3, r1
 8003910:	4630      	mov	r0, r6
 8003912:	4639      	mov	r1, r7
 8003914:	e9cd 230e 	strd	r2, r3, [sp, #56]	@ 0x38
 8003918:	f7fc fe16 	bl	8000548 <__aeabi_dmul>
 800391c:	4680      	mov	r8, r0
 800391e:	4689      	mov	r9, r1
 8003920:	1064      	asrs	r4, r4, #1
 8003922:	f044 5400 	orr.w	r4, r4, #536870912	@ 0x20000000
 8003926:	f504 2300 	add.w	r3, r4, #524288	@ 0x80000
 800392a:	1959      	adds	r1, r3, r5
 800392c:	460d      	mov	r5, r1
 800392e:	464a      	mov	r2, r9
 8003930:	4641      	mov	r1, r8
 8003932:	2300      	movs	r3, #0
 8003934:	2000      	movs	r0, #0
 8003936:	e9cd 1200 	strd	r1, r2, [sp]
 800393a:	9300      	str	r3, [sp, #0]
 800393c:	4604      	mov	r4, r0
 800393e:	4602      	mov	r2, r0
 8003940:	462b      	mov	r3, r5
 8003942:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8003946:	e9dd 8900 	ldrd	r8, r9, [sp]
 800394a:	4640      	mov	r0, r8
 800394c:	4649      	mov	r1, r9
 800394e:	f7fc fdfb 	bl	8000548 <__aeabi_dmul>
 8003952:	4602      	mov	r2, r0
 8003954:	460b      	mov	r3, r1
 8003956:	4630      	mov	r0, r6
 8003958:	4639      	mov	r1, r7
 800395a:	f7fc fc3d 	bl	80001d8 <__aeabi_dsub>
 800395e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003962:	4606      	mov	r6, r0
 8003964:	460f      	mov	r7, r1
 8003966:	4620      	mov	r0, r4
 8003968:	4629      	mov	r1, r5
 800396a:	f7fc fc35 	bl	80001d8 <__aeabi_dsub>
 800396e:	4602      	mov	r2, r0
 8003970:	460b      	mov	r3, r1
 8003972:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8003976:	f7fc fc2f 	bl	80001d8 <__aeabi_dsub>
 800397a:	4642      	mov	r2, r8
 800397c:	464b      	mov	r3, r9
 800397e:	f7fc fde3 	bl	8000548 <__aeabi_dmul>
 8003982:	4602      	mov	r2, r0
 8003984:	460b      	mov	r3, r1
 8003986:	4630      	mov	r0, r6
 8003988:	4639      	mov	r1, r7
 800398a:	f7fc fc25 	bl	80001d8 <__aeabi_dsub>
 800398e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8003992:	f7fc fdd9 	bl	8000548 <__aeabi_dmul>
 8003996:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800399a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800399e:	4622      	mov	r2, r4
 80039a0:	462b      	mov	r3, r5
 80039a2:	4620      	mov	r0, r4
 80039a4:	4629      	mov	r1, r5
 80039a6:	f7fc fdcf 	bl	8000548 <__aeabi_dmul>
 80039aa:	a375      	add	r3, pc, #468	@ (adr r3, 8003b80 <__ieee754_pow+0x538>)
 80039ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039b0:	4604      	mov	r4, r0
 80039b2:	460d      	mov	r5, r1
 80039b4:	f7fc fdc8 	bl	8000548 <__aeabi_dmul>
 80039b8:	a373      	add	r3, pc, #460	@ (adr r3, 8003b88 <__ieee754_pow+0x540>)
 80039ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039be:	f7fc fc0d 	bl	80001dc <__adddf3>
 80039c2:	4622      	mov	r2, r4
 80039c4:	462b      	mov	r3, r5
 80039c6:	f7fc fdbf 	bl	8000548 <__aeabi_dmul>
 80039ca:	a371      	add	r3, pc, #452	@ (adr r3, 8003b90 <__ieee754_pow+0x548>)
 80039cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039d0:	f7fc fc04 	bl	80001dc <__adddf3>
 80039d4:	4622      	mov	r2, r4
 80039d6:	462b      	mov	r3, r5
 80039d8:	f7fc fdb6 	bl	8000548 <__aeabi_dmul>
 80039dc:	a36e      	add	r3, pc, #440	@ (adr r3, 8003b98 <__ieee754_pow+0x550>)
 80039de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039e2:	f7fc fbfb 	bl	80001dc <__adddf3>
 80039e6:	4622      	mov	r2, r4
 80039e8:	462b      	mov	r3, r5
 80039ea:	f7fc fdad 	bl	8000548 <__aeabi_dmul>
 80039ee:	a36c      	add	r3, pc, #432	@ (adr r3, 8003ba0 <__ieee754_pow+0x558>)
 80039f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039f4:	f7fc fbf2 	bl	80001dc <__adddf3>
 80039f8:	4622      	mov	r2, r4
 80039fa:	462b      	mov	r3, r5
 80039fc:	f7fc fda4 	bl	8000548 <__aeabi_dmul>
 8003a00:	a369      	add	r3, pc, #420	@ (adr r3, 8003ba8 <__ieee754_pow+0x560>)
 8003a02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a06:	f7fc fbe9 	bl	80001dc <__adddf3>
 8003a0a:	4622      	mov	r2, r4
 8003a0c:	4606      	mov	r6, r0
 8003a0e:	460f      	mov	r7, r1
 8003a10:	462b      	mov	r3, r5
 8003a12:	4620      	mov	r0, r4
 8003a14:	4629      	mov	r1, r5
 8003a16:	f7fc fd97 	bl	8000548 <__aeabi_dmul>
 8003a1a:	4602      	mov	r2, r0
 8003a1c:	460b      	mov	r3, r1
 8003a1e:	4630      	mov	r0, r6
 8003a20:	4639      	mov	r1, r7
 8003a22:	f7fc fd91 	bl	8000548 <__aeabi_dmul>
 8003a26:	4604      	mov	r4, r0
 8003a28:	460d      	mov	r5, r1
 8003a2a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003a2e:	4642      	mov	r2, r8
 8003a30:	464b      	mov	r3, r9
 8003a32:	f7fc fbd3 	bl	80001dc <__adddf3>
 8003a36:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003a3a:	f7fc fd85 	bl	8000548 <__aeabi_dmul>
 8003a3e:	4622      	mov	r2, r4
 8003a40:	462b      	mov	r3, r5
 8003a42:	f7fc fbcb 	bl	80001dc <__adddf3>
 8003a46:	4642      	mov	r2, r8
 8003a48:	4606      	mov	r6, r0
 8003a4a:	460f      	mov	r7, r1
 8003a4c:	464b      	mov	r3, r9
 8003a4e:	4640      	mov	r0, r8
 8003a50:	4649      	mov	r1, r9
 8003a52:	f7fc fd79 	bl	8000548 <__aeabi_dmul>
 8003a56:	2200      	movs	r2, #0
 8003a58:	4b60      	ldr	r3, [pc, #384]	@ (8003bdc <__ieee754_pow+0x594>)
 8003a5a:	4604      	mov	r4, r0
 8003a5c:	460d      	mov	r5, r1
 8003a5e:	f7fc fbbd 	bl	80001dc <__adddf3>
 8003a62:	4632      	mov	r2, r6
 8003a64:	463b      	mov	r3, r7
 8003a66:	e9cd 670c 	strd	r6, r7, [sp, #48]	@ 0x30
 8003a6a:	f7fc fbb7 	bl	80001dc <__adddf3>
 8003a6e:	2600      	movs	r6, #0
 8003a70:	460f      	mov	r7, r1
 8003a72:	4632      	mov	r2, r6
 8003a74:	463b      	mov	r3, r7
 8003a76:	4640      	mov	r0, r8
 8003a78:	4649      	mov	r1, r9
 8003a7a:	f7fc fd65 	bl	8000548 <__aeabi_dmul>
 8003a7e:	2200      	movs	r2, #0
 8003a80:	4680      	mov	r8, r0
 8003a82:	4689      	mov	r9, r1
 8003a84:	4630      	mov	r0, r6
 8003a86:	4639      	mov	r1, r7
 8003a88:	4b54      	ldr	r3, [pc, #336]	@ (8003bdc <__ieee754_pow+0x594>)
 8003a8a:	f7fc fba5 	bl	80001d8 <__aeabi_dsub>
 8003a8e:	4622      	mov	r2, r4
 8003a90:	462b      	mov	r3, r5
 8003a92:	f7fc fba1 	bl	80001d8 <__aeabi_dsub>
 8003a96:	4602      	mov	r2, r0
 8003a98:	460b      	mov	r3, r1
 8003a9a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8003a9e:	f7fc fb9b 	bl	80001d8 <__aeabi_dsub>
 8003aa2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003aa6:	f7fc fd4f 	bl	8000548 <__aeabi_dmul>
 8003aaa:	4632      	mov	r2, r6
 8003aac:	4604      	mov	r4, r0
 8003aae:	460d      	mov	r5, r1
 8003ab0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003ab4:	463b      	mov	r3, r7
 8003ab6:	f7fc fd47 	bl	8000548 <__aeabi_dmul>
 8003aba:	4602      	mov	r2, r0
 8003abc:	460b      	mov	r3, r1
 8003abe:	4620      	mov	r0, r4
 8003ac0:	4629      	mov	r1, r5
 8003ac2:	f7fc fb8b 	bl	80001dc <__adddf3>
 8003ac6:	4606      	mov	r6, r0
 8003ac8:	460f      	mov	r7, r1
 8003aca:	2400      	movs	r4, #0
 8003acc:	4632      	mov	r2, r6
 8003ace:	463b      	mov	r3, r7
 8003ad0:	4640      	mov	r0, r8
 8003ad2:	4649      	mov	r1, r9
 8003ad4:	f7fc fb82 	bl	80001dc <__adddf3>
 8003ad8:	a335      	add	r3, pc, #212	@ (adr r3, 8003bb0 <__ieee754_pow+0x568>)
 8003ada:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ade:	4620      	mov	r0, r4
 8003ae0:	460d      	mov	r5, r1
 8003ae2:	f7fc fd31 	bl	8000548 <__aeabi_dmul>
 8003ae6:	4642      	mov	r2, r8
 8003ae8:	464b      	mov	r3, r9
 8003aea:	4680      	mov	r8, r0
 8003aec:	4689      	mov	r9, r1
 8003aee:	4620      	mov	r0, r4
 8003af0:	4629      	mov	r1, r5
 8003af2:	f7fc fb71 	bl	80001d8 <__aeabi_dsub>
 8003af6:	4602      	mov	r2, r0
 8003af8:	460b      	mov	r3, r1
 8003afa:	4630      	mov	r0, r6
 8003afc:	4639      	mov	r1, r7
 8003afe:	f7fc fb6b 	bl	80001d8 <__aeabi_dsub>
 8003b02:	a32d      	add	r3, pc, #180	@ (adr r3, 8003bb8 <__ieee754_pow+0x570>)
 8003b04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b08:	f7fc fd1e 	bl	8000548 <__aeabi_dmul>
 8003b0c:	4602      	mov	r2, r0
 8003b0e:	460b      	mov	r3, r1
 8003b10:	4620      	mov	r0, r4
 8003b12:	4629      	mov	r1, r5
 8003b14:	4614      	mov	r4, r2
 8003b16:	461d      	mov	r5, r3
 8003b18:	a329      	add	r3, pc, #164	@ (adr r3, 8003bc0 <__ieee754_pow+0x578>)
 8003b1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b1e:	f7fc fd13 	bl	8000548 <__aeabi_dmul>
 8003b22:	4602      	mov	r2, r0
 8003b24:	460b      	mov	r3, r1
 8003b26:	4620      	mov	r0, r4
 8003b28:	4629      	mov	r1, r5
 8003b2a:	f7fc fb57 	bl	80001dc <__adddf3>
 8003b2e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8003b32:	f7fc fb53 	bl	80001dc <__adddf3>
 8003b36:	4604      	mov	r4, r0
 8003b38:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8003b3a:	460d      	mov	r5, r1
 8003b3c:	f7fc fc9a 	bl	8000474 <__aeabi_i2d>
 8003b40:	4606      	mov	r6, r0
 8003b42:	460f      	mov	r7, r1
 8003b44:	4622      	mov	r2, r4
 8003b46:	462b      	mov	r3, r5
 8003b48:	4640      	mov	r0, r8
 8003b4a:	4649      	mov	r1, r9
 8003b4c:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8003b50:	f7fc fb44 	bl	80001dc <__adddf3>
 8003b54:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8003b58:	f7fc fb40 	bl	80001dc <__adddf3>
 8003b5c:	4632      	mov	r2, r6
 8003b5e:	463b      	mov	r3, r7
 8003b60:	f7fc fb3c 	bl	80001dc <__adddf3>
 8003b64:	2000      	movs	r0, #0
 8003b66:	4632      	mov	r2, r6
 8003b68:	463b      	mov	r3, r7
 8003b6a:	4680      	mov	r8, r0
 8003b6c:	4689      	mov	r9, r1
 8003b6e:	f7fc fb33 	bl	80001d8 <__aeabi_dsub>
 8003b72:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8003b76:	f7fc fb2f 	bl	80001d8 <__aeabi_dsub>
 8003b7a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003b7e:	e02f      	b.n	8003be0 <__ieee754_pow+0x598>
 8003b80:	4a454eef 	.word	0x4a454eef
 8003b84:	3fca7e28 	.word	0x3fca7e28
 8003b88:	93c9db65 	.word	0x93c9db65
 8003b8c:	3fcd864a 	.word	0x3fcd864a
 8003b90:	a91d4101 	.word	0xa91d4101
 8003b94:	3fd17460 	.word	0x3fd17460
 8003b98:	518f264d 	.word	0x518f264d
 8003b9c:	3fd55555 	.word	0x3fd55555
 8003ba0:	db6fabff 	.word	0xdb6fabff
 8003ba4:	3fdb6db6 	.word	0x3fdb6db6
 8003ba8:	33333303 	.word	0x33333303
 8003bac:	3fe33333 	.word	0x3fe33333
 8003bb0:	e0000000 	.word	0xe0000000
 8003bb4:	3feec709 	.word	0x3feec709
 8003bb8:	dc3a03fd 	.word	0xdc3a03fd
 8003bbc:	3feec709 	.word	0x3feec709
 8003bc0:	145b01f5 	.word	0x145b01f5
 8003bc4:	be3e2fe0 	.word	0xbe3e2fe0
 8003bc8:	7ff00000 	.word	0x7ff00000
 8003bcc:	43400000 	.word	0x43400000
 8003bd0:	0003988e 	.word	0x0003988e
 8003bd4:	000bb679 	.word	0x000bb679
 8003bd8:	3ff00000 	.word	0x3ff00000
 8003bdc:	40080000 	.word	0x40080000
 8003be0:	f7fc fafa 	bl	80001d8 <__aeabi_dsub>
 8003be4:	4602      	mov	r2, r0
 8003be6:	460b      	mov	r3, r1
 8003be8:	4620      	mov	r0, r4
 8003bea:	4629      	mov	r1, r5
 8003bec:	f7fc faf4 	bl	80001d8 <__aeabi_dsub>
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	e9cd ab00 	strd	sl, fp, [sp]
 8003bf6:	9300      	str	r3, [sp, #0]
 8003bf8:	e9dd 6700 	ldrd	r6, r7, [sp]
 8003bfc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003c00:	4632      	mov	r2, r6
 8003c02:	463b      	mov	r3, r7
 8003c04:	4650      	mov	r0, sl
 8003c06:	4659      	mov	r1, fp
 8003c08:	f7fc fae6 	bl	80001d8 <__aeabi_dsub>
 8003c0c:	4642      	mov	r2, r8
 8003c0e:	464b      	mov	r3, r9
 8003c10:	f7fc fc9a 	bl	8000548 <__aeabi_dmul>
 8003c14:	4652      	mov	r2, sl
 8003c16:	4604      	mov	r4, r0
 8003c18:	460d      	mov	r5, r1
 8003c1a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003c1e:	465b      	mov	r3, fp
 8003c20:	f7fc fc92 	bl	8000548 <__aeabi_dmul>
 8003c24:	4602      	mov	r2, r0
 8003c26:	460b      	mov	r3, r1
 8003c28:	4620      	mov	r0, r4
 8003c2a:	4629      	mov	r1, r5
 8003c2c:	f7fc fad6 	bl	80001dc <__adddf3>
 8003c30:	4604      	mov	r4, r0
 8003c32:	460d      	mov	r5, r1
 8003c34:	4632      	mov	r2, r6
 8003c36:	463b      	mov	r3, r7
 8003c38:	4640      	mov	r0, r8
 8003c3a:	4649      	mov	r1, r9
 8003c3c:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8003c40:	f7fc fc82 	bl	8000548 <__aeabi_dmul>
 8003c44:	4606      	mov	r6, r0
 8003c46:	460f      	mov	r7, r1
 8003c48:	4620      	mov	r0, r4
 8003c4a:	4629      	mov	r1, r5
 8003c4c:	463b      	mov	r3, r7
 8003c4e:	4632      	mov	r2, r6
 8003c50:	f7fc fac4 	bl	80001dc <__adddf3>
 8003c54:	4bb6      	ldr	r3, [pc, #728]	@ (8003f30 <__ieee754_pow+0x8e8>)
 8003c56:	4604      	mov	r4, r0
 8003c58:	4299      	cmp	r1, r3
 8003c5a:	460d      	mov	r5, r1
 8003c5c:	4688      	mov	r8, r1
 8003c5e:	f340 811c 	ble.w	8003e9a <__ieee754_pow+0x852>
 8003c62:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 8003c66:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 8003c6a:	4303      	orrs	r3, r0
 8003c6c:	f040 821b 	bne.w	80040a6 <__ieee754_pow+0xa5e>
 8003c70:	a39d      	add	r3, pc, #628	@ (adr r3, 8003ee8 <__ieee754_pow+0x8a0>)
 8003c72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c76:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003c7a:	f7fc faaf 	bl	80001dc <__adddf3>
 8003c7e:	4602      	mov	r2, r0
 8003c80:	460b      	mov	r3, r1
 8003c82:	4620      	mov	r0, r4
 8003c84:	4629      	mov	r1, r5
 8003c86:	4614      	mov	r4, r2
 8003c88:	461d      	mov	r5, r3
 8003c8a:	4632      	mov	r2, r6
 8003c8c:	463b      	mov	r3, r7
 8003c8e:	f7fc faa3 	bl	80001d8 <__aeabi_dsub>
 8003c92:	4602      	mov	r2, r0
 8003c94:	460b      	mov	r3, r1
 8003c96:	4620      	mov	r0, r4
 8003c98:	4629      	mov	r1, r5
 8003c9a:	f7fc fee5 	bl	8000a68 <__aeabi_dcmpgt>
 8003c9e:	2800      	cmp	r0, #0
 8003ca0:	f040 8201 	bne.w	80040a6 <__ieee754_pow+0xa5e>
 8003ca4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003ca8:	2000      	movs	r0, #0
 8003caa:	4443      	add	r3, r8
 8003cac:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8003cb0:	4ca0      	ldr	r4, [pc, #640]	@ (8003f34 <__ieee754_pow+0x8ec>)
 8003cb2:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 8003cb6:	4114      	asrs	r4, r2
 8003cb8:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8003cbc:	f1c2 0214 	rsb	r2, r2, #20
 8003cc0:	ea04 0103 	and.w	r1, r4, r3
 8003cc4:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 8003cc8:	460b      	mov	r3, r1
 8003cca:	fa4a fa02 	asr.w	sl, sl, r2
 8003cce:	f1b8 0f00 	cmp.w	r8, #0
 8003cd2:	4602      	mov	r2, r0
 8003cd4:	4639      	mov	r1, r7
 8003cd6:	4630      	mov	r0, r6
 8003cd8:	bfb8      	it	lt
 8003cda:	f1ca 0a00 	rsblt	sl, sl, #0
 8003cde:	f7fc fa7b 	bl	80001d8 <__aeabi_dsub>
 8003ce2:	4606      	mov	r6, r0
 8003ce4:	460f      	mov	r7, r1
 8003ce6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003cea:	4632      	mov	r2, r6
 8003cec:	463b      	mov	r3, r7
 8003cee:	f7fc fa75 	bl	80001dc <__adddf3>
 8003cf2:	460d      	mov	r5, r1
 8003cf4:	ea4f 5b0a 	mov.w	fp, sl, lsl #20
 8003cf8:	2400      	movs	r4, #0
 8003cfa:	a37d      	add	r3, pc, #500	@ (adr r3, 8003ef0 <__ieee754_pow+0x8a8>)
 8003cfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d00:	4620      	mov	r0, r4
 8003d02:	4629      	mov	r1, r5
 8003d04:	f7fc fc20 	bl	8000548 <__aeabi_dmul>
 8003d08:	4632      	mov	r2, r6
 8003d0a:	4680      	mov	r8, r0
 8003d0c:	4689      	mov	r9, r1
 8003d0e:	463b      	mov	r3, r7
 8003d10:	4620      	mov	r0, r4
 8003d12:	4629      	mov	r1, r5
 8003d14:	f7fc fa60 	bl	80001d8 <__aeabi_dsub>
 8003d18:	4602      	mov	r2, r0
 8003d1a:	460b      	mov	r3, r1
 8003d1c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003d20:	f7fc fa5a 	bl	80001d8 <__aeabi_dsub>
 8003d24:	a374      	add	r3, pc, #464	@ (adr r3, 8003ef8 <__ieee754_pow+0x8b0>)
 8003d26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d2a:	f7fc fc0d 	bl	8000548 <__aeabi_dmul>
 8003d2e:	4602      	mov	r2, r0
 8003d30:	460b      	mov	r3, r1
 8003d32:	4620      	mov	r0, r4
 8003d34:	4629      	mov	r1, r5
 8003d36:	4614      	mov	r4, r2
 8003d38:	461d      	mov	r5, r3
 8003d3a:	a371      	add	r3, pc, #452	@ (adr r3, 8003f00 <__ieee754_pow+0x8b8>)
 8003d3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d40:	f7fc fc02 	bl	8000548 <__aeabi_dmul>
 8003d44:	4602      	mov	r2, r0
 8003d46:	460b      	mov	r3, r1
 8003d48:	4620      	mov	r0, r4
 8003d4a:	4629      	mov	r1, r5
 8003d4c:	f7fc fa46 	bl	80001dc <__adddf3>
 8003d50:	4606      	mov	r6, r0
 8003d52:	460f      	mov	r7, r1
 8003d54:	4632      	mov	r2, r6
 8003d56:	463b      	mov	r3, r7
 8003d58:	4640      	mov	r0, r8
 8003d5a:	4649      	mov	r1, r9
 8003d5c:	f7fc fa3e 	bl	80001dc <__adddf3>
 8003d60:	4642      	mov	r2, r8
 8003d62:	464b      	mov	r3, r9
 8003d64:	4604      	mov	r4, r0
 8003d66:	460d      	mov	r5, r1
 8003d68:	f7fc fa36 	bl	80001d8 <__aeabi_dsub>
 8003d6c:	4602      	mov	r2, r0
 8003d6e:	460b      	mov	r3, r1
 8003d70:	4630      	mov	r0, r6
 8003d72:	4639      	mov	r1, r7
 8003d74:	f7fc fa30 	bl	80001d8 <__aeabi_dsub>
 8003d78:	4622      	mov	r2, r4
 8003d7a:	4680      	mov	r8, r0
 8003d7c:	4689      	mov	r9, r1
 8003d7e:	462b      	mov	r3, r5
 8003d80:	4620      	mov	r0, r4
 8003d82:	4629      	mov	r1, r5
 8003d84:	f7fc fbe0 	bl	8000548 <__aeabi_dmul>
 8003d88:	a35f      	add	r3, pc, #380	@ (adr r3, 8003f08 <__ieee754_pow+0x8c0>)
 8003d8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d8e:	4606      	mov	r6, r0
 8003d90:	460f      	mov	r7, r1
 8003d92:	f7fc fbd9 	bl	8000548 <__aeabi_dmul>
 8003d96:	a35e      	add	r3, pc, #376	@ (adr r3, 8003f10 <__ieee754_pow+0x8c8>)
 8003d98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d9c:	f7fc fa1c 	bl	80001d8 <__aeabi_dsub>
 8003da0:	4632      	mov	r2, r6
 8003da2:	463b      	mov	r3, r7
 8003da4:	f7fc fbd0 	bl	8000548 <__aeabi_dmul>
 8003da8:	a35b      	add	r3, pc, #364	@ (adr r3, 8003f18 <__ieee754_pow+0x8d0>)
 8003daa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dae:	f7fc fa15 	bl	80001dc <__adddf3>
 8003db2:	4632      	mov	r2, r6
 8003db4:	463b      	mov	r3, r7
 8003db6:	f7fc fbc7 	bl	8000548 <__aeabi_dmul>
 8003dba:	a359      	add	r3, pc, #356	@ (adr r3, 8003f20 <__ieee754_pow+0x8d8>)
 8003dbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dc0:	f7fc fa0a 	bl	80001d8 <__aeabi_dsub>
 8003dc4:	4632      	mov	r2, r6
 8003dc6:	463b      	mov	r3, r7
 8003dc8:	f7fc fbbe 	bl	8000548 <__aeabi_dmul>
 8003dcc:	a356      	add	r3, pc, #344	@ (adr r3, 8003f28 <__ieee754_pow+0x8e0>)
 8003dce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dd2:	f7fc fa03 	bl	80001dc <__adddf3>
 8003dd6:	4632      	mov	r2, r6
 8003dd8:	463b      	mov	r3, r7
 8003dda:	f7fc fbb5 	bl	8000548 <__aeabi_dmul>
 8003dde:	4602      	mov	r2, r0
 8003de0:	460b      	mov	r3, r1
 8003de2:	4620      	mov	r0, r4
 8003de4:	4629      	mov	r1, r5
 8003de6:	f7fc f9f7 	bl	80001d8 <__aeabi_dsub>
 8003dea:	4606      	mov	r6, r0
 8003dec:	460f      	mov	r7, r1
 8003dee:	4632      	mov	r2, r6
 8003df0:	463b      	mov	r3, r7
 8003df2:	4620      	mov	r0, r4
 8003df4:	4629      	mov	r1, r5
 8003df6:	f7fc fba7 	bl	8000548 <__aeabi_dmul>
 8003dfa:	4602      	mov	r2, r0
 8003dfc:	460b      	mov	r3, r1
 8003dfe:	4630      	mov	r0, r6
 8003e00:	4639      	mov	r1, r7
 8003e02:	4616      	mov	r6, r2
 8003e04:	461f      	mov	r7, r3
 8003e06:	2200      	movs	r2, #0
 8003e08:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8003e0c:	f7fc f9e4 	bl	80001d8 <__aeabi_dsub>
 8003e10:	4602      	mov	r2, r0
 8003e12:	460b      	mov	r3, r1
 8003e14:	4630      	mov	r0, r6
 8003e16:	4639      	mov	r1, r7
 8003e18:	f7fc fcc0 	bl	800079c <__aeabi_ddiv>
 8003e1c:	4642      	mov	r2, r8
 8003e1e:	4606      	mov	r6, r0
 8003e20:	460f      	mov	r7, r1
 8003e22:	464b      	mov	r3, r9
 8003e24:	4620      	mov	r0, r4
 8003e26:	4629      	mov	r1, r5
 8003e28:	f7fc fb8e 	bl	8000548 <__aeabi_dmul>
 8003e2c:	4642      	mov	r2, r8
 8003e2e:	464b      	mov	r3, r9
 8003e30:	f7fc f9d4 	bl	80001dc <__adddf3>
 8003e34:	4602      	mov	r2, r0
 8003e36:	460b      	mov	r3, r1
 8003e38:	4630      	mov	r0, r6
 8003e3a:	4639      	mov	r1, r7
 8003e3c:	f7fc f9cc 	bl	80001d8 <__aeabi_dsub>
 8003e40:	4622      	mov	r2, r4
 8003e42:	462b      	mov	r3, r5
 8003e44:	f7fc f9c8 	bl	80001d8 <__aeabi_dsub>
 8003e48:	4602      	mov	r2, r0
 8003e4a:	460b      	mov	r3, r1
 8003e4c:	2000      	movs	r0, #0
 8003e4e:	493a      	ldr	r1, [pc, #232]	@ (8003f38 <__ieee754_pow+0x8f0>)
 8003e50:	f7fc f9c2 	bl	80001d8 <__aeabi_dsub>
 8003e54:	460c      	mov	r4, r1
 8003e56:	445c      	add	r4, fp
 8003e58:	f5b4 1f80 	cmp.w	r4, #1048576	@ 0x100000
 8003e5c:	f2c0 812d 	blt.w	80040ba <__ieee754_pow+0xa72>
 8003e60:	4621      	mov	r1, r4
 8003e62:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8003e66:	f7fc fb6f 	bl	8000548 <__aeabi_dmul>
 8003e6a:	e407      	b.n	800367c <__ieee754_pow+0x34>
 8003e6c:	f04f 0802 	mov.w	r8, #2
 8003e70:	2a00      	cmp	r2, #0
 8003e72:	f47f ace9 	bne.w	8003848 <__ieee754_pow+0x200>
 8003e76:	e44e      	b.n	8003716 <__ieee754_pow+0xce>
 8003e78:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 8003e7c:	f43f ac7b 	beq.w	8003776 <__ieee754_pow+0x12e>
 8003e80:	492e      	ldr	r1, [pc, #184]	@ (8003f3c <__ieee754_pow+0x8f4>)
 8003e82:	4589      	cmp	r9, r1
 8003e84:	f47f ac46 	bne.w	8003714 <__ieee754_pow+0xcc>
 8003e88:	4620      	mov	r0, r4
 8003e8a:	4629      	mov	r1, r5
 8003e8c:	b013      	add	sp, #76	@ 0x4c
 8003e8e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e92:	f000 ba2f 	b.w	80042f4 <__ieee754_sqrt>
 8003e96:	9304      	str	r3, [sp, #16]
 8003e98:	e48a      	b.n	80037b0 <__ieee754_pow+0x168>
 8003e9a:	f8df c0a4 	ldr.w	ip, [pc, #164]	@ 8003f40 <__ieee754_pow+0x8f8>
 8003e9e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8003ea2:	4563      	cmp	r3, ip
 8003ea4:	f240 80cb 	bls.w	800403e <__ieee754_pow+0x9f6>
 8003ea8:	4b26      	ldr	r3, [pc, #152]	@ (8003f44 <__ieee754_pow+0x8fc>)
 8003eaa:	440b      	add	r3, r1
 8003eac:	4303      	orrs	r3, r0
 8003eae:	d10a      	bne.n	8003ec6 <__ieee754_pow+0x87e>
 8003eb0:	4632      	mov	r2, r6
 8003eb2:	463b      	mov	r3, r7
 8003eb4:	f7fc f990 	bl	80001d8 <__aeabi_dsub>
 8003eb8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003ebc:	f7fc fdca 	bl	8000a54 <__aeabi_dcmpge>
 8003ec0:	2800      	cmp	r0, #0
 8003ec2:	f43f aeef 	beq.w	8003ca4 <__ieee754_pow+0x65c>
 8003ec6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003eca:	2200      	movs	r2, #0
 8003ecc:	2300      	movs	r3, #0
 8003ece:	f7fc fdad 	bl	8000a2c <__aeabi_dcmplt>
 8003ed2:	3800      	subs	r0, #0
 8003ed4:	bf18      	it	ne
 8003ed6:	2001      	movne	r0, #1
 8003ed8:	e448      	b.n	800376c <__ieee754_pow+0x124>
 8003eda:	2a00      	cmp	r2, #0
 8003edc:	f47f abc8 	bne.w	8003670 <__ieee754_pow+0x28>
 8003ee0:	e4a4      	b.n	800382c <__ieee754_pow+0x1e4>
 8003ee2:	2400      	movs	r4, #0
 8003ee4:	e4da      	b.n	800389c <__ieee754_pow+0x254>
 8003ee6:	bf00      	nop
 8003ee8:	652b82fe 	.word	0x652b82fe
 8003eec:	3c971547 	.word	0x3c971547
 8003ef0:	00000000 	.word	0x00000000
 8003ef4:	3fe62e43 	.word	0x3fe62e43
 8003ef8:	fefa39ef 	.word	0xfefa39ef
 8003efc:	3fe62e42 	.word	0x3fe62e42
 8003f00:	0ca86c39 	.word	0x0ca86c39
 8003f04:	be205c61 	.word	0xbe205c61
 8003f08:	72bea4d0 	.word	0x72bea4d0
 8003f0c:	3e663769 	.word	0x3e663769
 8003f10:	c5d26bf1 	.word	0xc5d26bf1
 8003f14:	3ebbbd41 	.word	0x3ebbbd41
 8003f18:	af25de2c 	.word	0xaf25de2c
 8003f1c:	3f11566a 	.word	0x3f11566a
 8003f20:	16bebd93 	.word	0x16bebd93
 8003f24:	3f66c16c 	.word	0x3f66c16c
 8003f28:	5555553e 	.word	0x5555553e
 8003f2c:	3fc55555 	.word	0x3fc55555
 8003f30:	408fffff 	.word	0x408fffff
 8003f34:	fff00000 	.word	0xfff00000
 8003f38:	3ff00000 	.word	0x3ff00000
 8003f3c:	3fe00000 	.word	0x3fe00000
 8003f40:	4090cbff 	.word	0x4090cbff
 8003f44:	3f6f3400 	.word	0x3f6f3400
 8003f48:	429a      	cmp	r2, r3
 8003f4a:	f0c0 80ba 	bcc.w	80040c2 <__ieee754_pow+0xa7a>
 8003f4e:	9a02      	ldr	r2, [sp, #8]
 8003f50:	4b8b      	ldr	r3, [pc, #556]	@ (8004180 <__ieee754_pow+0xb38>)
 8003f52:	429a      	cmp	r2, r3
 8003f54:	f04f 0200 	mov.w	r2, #0
 8003f58:	f200 80c5 	bhi.w	80040e6 <__ieee754_pow+0xa9e>
 8003f5c:	4b88      	ldr	r3, [pc, #544]	@ (8004180 <__ieee754_pow+0xb38>)
 8003f5e:	f7fc f93b 	bl	80001d8 <__aeabi_dsub>
 8003f62:	a37b      	add	r3, pc, #492	@ (adr r3, 8004150 <__ieee754_pow+0xb08>)
 8003f64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f68:	4604      	mov	r4, r0
 8003f6a:	460d      	mov	r5, r1
 8003f6c:	f7fc faec 	bl	8000548 <__aeabi_dmul>
 8003f70:	a379      	add	r3, pc, #484	@ (adr r3, 8004158 <__ieee754_pow+0xb10>)
 8003f72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f76:	4680      	mov	r8, r0
 8003f78:	4689      	mov	r9, r1
 8003f7a:	4620      	mov	r0, r4
 8003f7c:	4629      	mov	r1, r5
 8003f7e:	f7fc fae3 	bl	8000548 <__aeabi_dmul>
 8003f82:	2200      	movs	r2, #0
 8003f84:	e9cd 0100 	strd	r0, r1, [sp]
 8003f88:	4b7e      	ldr	r3, [pc, #504]	@ (8004184 <__ieee754_pow+0xb3c>)
 8003f8a:	4620      	mov	r0, r4
 8003f8c:	4629      	mov	r1, r5
 8003f8e:	f7fc fadb 	bl	8000548 <__aeabi_dmul>
 8003f92:	4602      	mov	r2, r0
 8003f94:	460b      	mov	r3, r1
 8003f96:	a172      	add	r1, pc, #456	@ (adr r1, 8004160 <__ieee754_pow+0xb18>)
 8003f98:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003f9c:	f7fc f91c 	bl	80001d8 <__aeabi_dsub>
 8003fa0:	4622      	mov	r2, r4
 8003fa2:	462b      	mov	r3, r5
 8003fa4:	f7fc fad0 	bl	8000548 <__aeabi_dmul>
 8003fa8:	4602      	mov	r2, r0
 8003faa:	460b      	mov	r3, r1
 8003fac:	2000      	movs	r0, #0
 8003fae:	4976      	ldr	r1, [pc, #472]	@ (8004188 <__ieee754_pow+0xb40>)
 8003fb0:	f7fc f912 	bl	80001d8 <__aeabi_dsub>
 8003fb4:	4622      	mov	r2, r4
 8003fb6:	462b      	mov	r3, r5
 8003fb8:	4606      	mov	r6, r0
 8003fba:	460f      	mov	r7, r1
 8003fbc:	4620      	mov	r0, r4
 8003fbe:	4629      	mov	r1, r5
 8003fc0:	f7fc fac2 	bl	8000548 <__aeabi_dmul>
 8003fc4:	4602      	mov	r2, r0
 8003fc6:	460b      	mov	r3, r1
 8003fc8:	4630      	mov	r0, r6
 8003fca:	4639      	mov	r1, r7
 8003fcc:	f7fc fabc 	bl	8000548 <__aeabi_dmul>
 8003fd0:	a365      	add	r3, pc, #404	@ (adr r3, 8004168 <__ieee754_pow+0xb20>)
 8003fd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fd6:	f7fc fab7 	bl	8000548 <__aeabi_dmul>
 8003fda:	4602      	mov	r2, r0
 8003fdc:	460b      	mov	r3, r1
 8003fde:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003fe2:	f7fc f8f9 	bl	80001d8 <__aeabi_dsub>
 8003fe6:	4604      	mov	r4, r0
 8003fe8:	460d      	mov	r5, r1
 8003fea:	4640      	mov	r0, r8
 8003fec:	4649      	mov	r1, r9
 8003fee:	4622      	mov	r2, r4
 8003ff0:	462b      	mov	r3, r5
 8003ff2:	f7fc f8f3 	bl	80001dc <__adddf3>
 8003ff6:	2000      	movs	r0, #0
 8003ff8:	4642      	mov	r2, r8
 8003ffa:	464b      	mov	r3, r9
 8003ffc:	4680      	mov	r8, r0
 8003ffe:	4689      	mov	r9, r1
 8004000:	e5ee      	b.n	8003be0 <__ieee754_pow+0x598>
 8004002:	f1b9 0f00 	cmp.w	r9, #0
 8004006:	f04f 0000 	mov.w	r0, #0
 800400a:	f04f 0100 	mov.w	r1, #0
 800400e:	f6bf ab35 	bge.w	800367c <__ieee754_pow+0x34>
 8004012:	4650      	mov	r0, sl
 8004014:	f10b 4100 	add.w	r1, fp, #2147483648	@ 0x80000000
 8004018:	f7ff bb30 	b.w	800367c <__ieee754_pow+0x34>
 800401c:	2a00      	cmp	r2, #0
 800401e:	f47f af3a 	bne.w	8003e96 <__ieee754_pow+0x84e>
 8004022:	f1c1 0114 	rsb	r1, r1, #20
 8004026:	fa47 f001 	asr.w	r0, r7, r1
 800402a:	fa00 f101 	lsl.w	r1, r0, r1
 800402e:	42b9      	cmp	r1, r7
 8004030:	d06d      	beq.n	800410e <__ieee754_pow+0xac6>
 8004032:	4953      	ldr	r1, [pc, #332]	@ (8004180 <__ieee754_pow+0xb38>)
 8004034:	428f      	cmp	r7, r1
 8004036:	f43f ab51 	beq.w	80036dc <__ieee754_pow+0x94>
 800403a:	f7ff bb68 	b.w	800370e <__ieee754_pow+0xc6>
 800403e:	4a52      	ldr	r2, [pc, #328]	@ (8004188 <__ieee754_pow+0xb40>)
 8004040:	4293      	cmp	r3, r2
 8004042:	d87a      	bhi.n	800413a <__ieee754_pow+0xaf2>
 8004044:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004048:	4693      	mov	fp, r2
 800404a:	4692      	mov	sl, r2
 800404c:	e654      	b.n	8003cf8 <__ieee754_pow+0x6b0>
 800404e:	4622      	mov	r2, r4
 8004050:	462b      	mov	r3, r5
 8004052:	2000      	movs	r0, #0
 8004054:	494a      	ldr	r1, [pc, #296]	@ (8004180 <__ieee754_pow+0xb38>)
 8004056:	f7fc fba1 	bl	800079c <__aeabi_ddiv>
 800405a:	f7ff bb0f 	b.w	800367c <__ieee754_pow+0x34>
 800405e:	f1b8 0f01 	cmp.w	r8, #1
 8004062:	f47f ab0b 	bne.w	800367c <__ieee754_pow+0x34>
 8004066:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800406a:	4619      	mov	r1, r3
 800406c:	f7ff bb06 	b.w	800367c <__ieee754_pow+0x34>
 8004070:	f1b9 0f00 	cmp.w	r9, #0
 8004074:	f77f ab79 	ble.w	800376a <__ieee754_pow+0x122>
 8004078:	2000      	movs	r0, #0
 800407a:	b013      	add	sp, #76	@ 0x4c
 800407c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004080:	f000 b8b0 	b.w	80041e4 <__math_oflow>
 8004084:	2200      	movs	r2, #0
 8004086:	4b41      	ldr	r3, [pc, #260]	@ (800418c <__ieee754_pow+0xb44>)
 8004088:	f44f 2580 	mov.w	r5, #262144	@ 0x40000
 800408c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004090:	a337      	add	r3, pc, #220	@ (adr r3, 8004170 <__ieee754_pow+0xb28>)
 8004092:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004096:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800409a:	a337      	add	r3, pc, #220	@ (adr r3, 8004178 <__ieee754_pow+0xb30>)
 800409c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040a0:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80040a4:	e41b      	b.n	80038de <__ieee754_pow+0x296>
 80040a6:	2200      	movs	r2, #0
 80040a8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80040ac:	2300      	movs	r3, #0
 80040ae:	f7fc fcbd 	bl	8000a2c <__aeabi_dcmplt>
 80040b2:	3800      	subs	r0, #0
 80040b4:	bf18      	it	ne
 80040b6:	2001      	movne	r0, #1
 80040b8:	e7df      	b.n	800407a <__ieee754_pow+0xa32>
 80040ba:	4652      	mov	r2, sl
 80040bc:	f000 f89c 	bl	80041f8 <scalbn>
 80040c0:	e6cf      	b.n	8003e62 <__ieee754_pow+0x81a>
 80040c2:	2200      	movs	r2, #0
 80040c4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80040c8:	2300      	movs	r3, #0
 80040ca:	f7fc fcaf 	bl	8000a2c <__aeabi_dcmplt>
 80040ce:	3800      	subs	r0, #0
 80040d0:	bf18      	it	ne
 80040d2:	2001      	movne	r0, #1
 80040d4:	f1b9 0f00 	cmp.w	r9, #0
 80040d8:	f6bf ab48 	bge.w	800376c <__ieee754_pow+0x124>
 80040dc:	e7cd      	b.n	800407a <__ieee754_pow+0xa32>
 80040de:	2000      	movs	r0, #0
 80040e0:	2100      	movs	r1, #0
 80040e2:	f7ff bacb 	b.w	800367c <__ieee754_pow+0x34>
 80040e6:	2300      	movs	r3, #0
 80040e8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80040ec:	f7fc fc9e 	bl	8000a2c <__aeabi_dcmplt>
 80040f0:	3800      	subs	r0, #0
 80040f2:	bf18      	it	ne
 80040f4:	2001      	movne	r0, #1
 80040f6:	f1b9 0f00 	cmp.w	r9, #0
 80040fa:	dcbe      	bgt.n	800407a <__ieee754_pow+0xa32>
 80040fc:	f7ff bb36 	b.w	800376c <__ieee754_pow+0x124>
 8004100:	b19a      	cbz	r2, 800412a <__ieee754_pow+0xae2>
 8004102:	f000 0001 	and.w	r0, r0, #1
 8004106:	f1c0 0802 	rsb	r8, r0, #2
 800410a:	f7ff bb9d 	b.w	8003848 <__ieee754_pow+0x200>
 800410e:	4a1c      	ldr	r2, [pc, #112]	@ (8004180 <__ieee754_pow+0xb38>)
 8004110:	4297      	cmp	r7, r2
 8004112:	f43f aae3 	beq.w	80036dc <__ieee754_pow+0x94>
 8004116:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 800411a:	f43f ab2c 	beq.w	8003776 <__ieee754_pow+0x12e>
 800411e:	f000 0001 	and.w	r0, r0, #1
 8004122:	f1c0 0802 	rsb	r8, r0, #2
 8004126:	f7ff baf6 	b.w	8003716 <__ieee754_pow+0xce>
 800412a:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 800412e:	f43f ab22 	beq.w	8003776 <__ieee754_pow+0x12e>
 8004132:	f04f 0802 	mov.w	r8, #2
 8004136:	f7ff baee 	b.w	8003716 <__ieee754_pow+0xce>
 800413a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800413e:	151b      	asrs	r3, r3, #20
 8004140:	f2a3 33fe 	subw	r3, r3, #1022	@ 0x3fe
 8004144:	fa42 f303 	asr.w	r3, r2, r3
 8004148:	e5ae      	b.n	8003ca8 <__ieee754_pow+0x660>
 800414a:	bf00      	nop
 800414c:	f3af 8000 	nop.w
 8004150:	60000000 	.word	0x60000000
 8004154:	3ff71547 	.word	0x3ff71547
 8004158:	f85ddf44 	.word	0xf85ddf44
 800415c:	3e54ae0b 	.word	0x3e54ae0b
 8004160:	55555555 	.word	0x55555555
 8004164:	3fd55555 	.word	0x3fd55555
 8004168:	652b82fe 	.word	0x652b82fe
 800416c:	3ff71547 	.word	0x3ff71547
 8004170:	40000000 	.word	0x40000000
 8004174:	3fe2b803 	.word	0x3fe2b803
 8004178:	43cfd006 	.word	0x43cfd006
 800417c:	3e4cfdeb 	.word	0x3e4cfdeb
 8004180:	3ff00000 	.word	0x3ff00000
 8004184:	3fd00000 	.word	0x3fd00000
 8004188:	3fe00000 	.word	0x3fe00000
 800418c:	3ff80000 	.word	0x3ff80000

08004190 <with_errno>:
 8004190:	b5d0      	push	{r4, r6, r7, lr}
 8004192:	4606      	mov	r6, r0
 8004194:	460f      	mov	r7, r1
 8004196:	4614      	mov	r4, r2
 8004198:	f7ff f9b6 	bl	8003508 <__errno>
 800419c:	4603      	mov	r3, r0
 800419e:	4639      	mov	r1, r7
 80041a0:	4630      	mov	r0, r6
 80041a2:	601c      	str	r4, [r3, #0]
 80041a4:	bdd0      	pop	{r4, r6, r7, pc}
 80041a6:	bf00      	nop

080041a8 <xflow>:
 80041a8:	b500      	push	{lr}
 80041aa:	b083      	sub	sp, #12
 80041ac:	b180      	cbz	r0, 80041d0 <xflow+0x28>
 80041ae:	4610      	mov	r0, r2
 80041b0:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 80041b4:	e9cd 0100 	strd	r0, r1, [sp]
 80041b8:	4610      	mov	r0, r2
 80041ba:	4619      	mov	r1, r3
 80041bc:	e9dd 2300 	ldrd	r2, r3, [sp]
 80041c0:	f7fc f9c2 	bl	8000548 <__aeabi_dmul>
 80041c4:	2222      	movs	r2, #34	@ 0x22
 80041c6:	b003      	add	sp, #12
 80041c8:	f85d eb04 	ldr.w	lr, [sp], #4
 80041cc:	f7ff bfe0 	b.w	8004190 <with_errno>
 80041d0:	4610      	mov	r0, r2
 80041d2:	4619      	mov	r1, r3
 80041d4:	e7ee      	b.n	80041b4 <xflow+0xc>
 80041d6:	bf00      	nop

080041d8 <__math_uflow>:
 80041d8:	2200      	movs	r2, #0
 80041da:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80041de:	f7ff bfe3 	b.w	80041a8 <xflow>
 80041e2:	bf00      	nop

080041e4 <__math_oflow>:
 80041e4:	2200      	movs	r2, #0
 80041e6:	f04f 43e0 	mov.w	r3, #1879048192	@ 0x70000000
 80041ea:	f7ff bfdd 	b.w	80041a8 <xflow>
 80041ee:	bf00      	nop

080041f0 <fabs>:
 80041f0:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80041f4:	4619      	mov	r1, r3
 80041f6:	4770      	bx	lr

080041f8 <scalbn>:
 80041f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80041fc:	4616      	mov	r6, r2
 80041fe:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8004202:	4607      	mov	r7, r0
 8004204:	4688      	mov	r8, r1
 8004206:	460b      	mov	r3, r1
 8004208:	bb6a      	cbnz	r2, 8004266 <scalbn+0x6e>
 800420a:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800420e:	4303      	orrs	r3, r0
 8004210:	d027      	beq.n	8004262 <scalbn+0x6a>
 8004212:	4b33      	ldr	r3, [pc, #204]	@ (80042e0 <scalbn+0xe8>)
 8004214:	2200      	movs	r2, #0
 8004216:	f7fc f997 	bl	8000548 <__aeabi_dmul>
 800421a:	4b32      	ldr	r3, [pc, #200]	@ (80042e4 <scalbn+0xec>)
 800421c:	4607      	mov	r7, r0
 800421e:	429e      	cmp	r6, r3
 8004220:	4688      	mov	r8, r1
 8004222:	db3c      	blt.n	800429e <scalbn+0xa6>
 8004224:	460b      	mov	r3, r1
 8004226:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800422a:	3a36      	subs	r2, #54	@ 0x36
 800422c:	f24c 3150 	movw	r1, #50000	@ 0xc350
 8004230:	428e      	cmp	r6, r1
 8004232:	dc21      	bgt.n	8004278 <scalbn+0x80>
 8004234:	4416      	add	r6, r2
 8004236:	f240 72fe 	movw	r2, #2046	@ 0x7fe
 800423a:	4296      	cmp	r6, r2
 800423c:	dc1c      	bgt.n	8004278 <scalbn+0x80>
 800423e:	2e00      	cmp	r6, #0
 8004240:	dc26      	bgt.n	8004290 <scalbn+0x98>
 8004242:	f116 0f35 	cmn.w	r6, #53	@ 0x35
 8004246:	db31      	blt.n	80042ac <scalbn+0xb4>
 8004248:	f023 41ff 	bic.w	r1, r3, #2139095040	@ 0x7f800000
 800424c:	f421 01e0 	bic.w	r1, r1, #7340032	@ 0x700000
 8004250:	3636      	adds	r6, #54	@ 0x36
 8004252:	ea41 5506 	orr.w	r5, r1, r6, lsl #20
 8004256:	2200      	movs	r2, #0
 8004258:	4638      	mov	r0, r7
 800425a:	4629      	mov	r1, r5
 800425c:	4b22      	ldr	r3, [pc, #136]	@ (80042e8 <scalbn+0xf0>)
 800425e:	f7fc f973 	bl	8000548 <__aeabi_dmul>
 8004262:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004266:	f240 7cff 	movw	ip, #2047	@ 0x7ff
 800426a:	4562      	cmp	r2, ip
 800426c:	d1de      	bne.n	800422c <scalbn+0x34>
 800426e:	4602      	mov	r2, r0
 8004270:	f7fb ffb4 	bl	80001dc <__adddf3>
 8004274:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004278:	4645      	mov	r5, r8
 800427a:	a315      	add	r3, pc, #84	@ (adr r3, 80042d0 <scalbn+0xd8>)
 800427c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004280:	f363 051e 	bfi	r5, r3, #0, #31
 8004284:	4629      	mov	r1, r5
 8004286:	4819      	ldr	r0, [pc, #100]	@ (80042ec <scalbn+0xf4>)
 8004288:	f7fc f95e 	bl	8000548 <__aeabi_dmul>
 800428c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004290:	f36f 531e 	bfc	r3, #20, #11
 8004294:	4638      	mov	r0, r7
 8004296:	ea43 5106 	orr.w	r1, r3, r6, lsl #20
 800429a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800429e:	a30e      	add	r3, pc, #56	@ (adr r3, 80042d8 <scalbn+0xe0>)
 80042a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042a4:	f7fc f950 	bl	8000548 <__aeabi_dmul>
 80042a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80042ac:	f008 4400 	and.w	r4, r8, #2147483648	@ 0x80000000
 80042b0:	f044 71d2 	orr.w	r1, r4, #27525120	@ 0x1a40000
 80042b4:	f441 31b7 	orr.w	r1, r1, #93696	@ 0x16e00
 80042b8:	a307      	add	r3, pc, #28	@ (adr r3, 80042d8 <scalbn+0xe0>)
 80042ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042be:	480c      	ldr	r0, [pc, #48]	@ (80042f0 <scalbn+0xf8>)
 80042c0:	f041 011f 	orr.w	r1, r1, #31
 80042c4:	f7fc f940 	bl	8000548 <__aeabi_dmul>
 80042c8:	e7cb      	b.n	8004262 <scalbn+0x6a>
 80042ca:	bf00      	nop
 80042cc:	f3af 8000 	nop.w
 80042d0:	8800759c 	.word	0x8800759c
 80042d4:	7e37e43c 	.word	0x7e37e43c
 80042d8:	c2f8f359 	.word	0xc2f8f359
 80042dc:	01a56e1f 	.word	0x01a56e1f
 80042e0:	43500000 	.word	0x43500000
 80042e4:	ffff3cb0 	.word	0xffff3cb0
 80042e8:	3c900000 	.word	0x3c900000
 80042ec:	8800759c 	.word	0x8800759c
 80042f0:	c2f8f359 	.word	0xc2f8f359

080042f4 <__ieee754_sqrt>:
 80042f4:	4a72      	ldr	r2, [pc, #456]	@ (80044c0 <__ieee754_sqrt+0x1cc>)
 80042f6:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80042fa:	438a      	bics	r2, r1
 80042fc:	4606      	mov	r6, r0
 80042fe:	460f      	mov	r7, r1
 8004300:	f000 80a9 	beq.w	8004456 <__ieee754_sqrt+0x162>
 8004304:	2900      	cmp	r1, #0
 8004306:	460c      	mov	r4, r1
 8004308:	4603      	mov	r3, r0
 800430a:	dd55      	ble.n	80043b8 <__ieee754_sqrt+0xc4>
 800430c:	1508      	asrs	r0, r1, #20
 800430e:	d062      	beq.n	80043d6 <__ieee754_sqrt+0xe2>
 8004310:	f3c4 0213 	ubfx	r2, r4, #0, #20
 8004314:	07c1      	lsls	r1, r0, #31
 8004316:	f2a0 37ff 	subw	r7, r0, #1023	@ 0x3ff
 800431a:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 800431e:	d403      	bmi.n	8004328 <__ieee754_sqrt+0x34>
 8004320:	0fd9      	lsrs	r1, r3, #31
 8004322:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 8004326:	005b      	lsls	r3, r3, #1
 8004328:	2600      	movs	r6, #0
 800432a:	2416      	movs	r4, #22
 800432c:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004330:	46b4      	mov	ip, r6
 8004332:	0052      	lsls	r2, r2, #1
 8004334:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8004338:	107f      	asrs	r7, r7, #1
 800433a:	005b      	lsls	r3, r3, #1
 800433c:	eb0c 0001 	add.w	r0, ip, r1
 8004340:	4290      	cmp	r0, r2
 8004342:	ea4f 75d3 	mov.w	r5, r3, lsr #31
 8004346:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800434a:	dc03      	bgt.n	8004354 <__ieee754_sqrt+0x60>
 800434c:	eb00 0c01 	add.w	ip, r0, r1
 8004350:	1a12      	subs	r2, r2, r0
 8004352:	440e      	add	r6, r1
 8004354:	3c01      	subs	r4, #1
 8004356:	eb05 0242 	add.w	r2, r5, r2, lsl #1
 800435a:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800435e:	d1ed      	bne.n	800433c <__ieee754_sqrt+0x48>
 8004360:	2520      	movs	r5, #32
 8004362:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 8004366:	46a0      	mov	r8, r4
 8004368:	e00a      	b.n	8004380 <__ieee754_sqrt+0x8c>
 800436a:	d043      	beq.n	80043f4 <__ieee754_sqrt+0x100>
 800436c:	0051      	lsls	r1, r2, #1
 800436e:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 8004372:	3d01      	subs	r5, #1
 8004374:	460a      	mov	r2, r1
 8004376:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800437a:	ea4f 0050 	mov.w	r0, r0, lsr #1
 800437e:	d045      	beq.n	800440c <__ieee754_sqrt+0x118>
 8004380:	4594      	cmp	ip, r2
 8004382:	eb08 0e00 	add.w	lr, r8, r0
 8004386:	daf0      	bge.n	800436a <__ieee754_sqrt+0x76>
 8004388:	f1be 0f00 	cmp.w	lr, #0
 800438c:	eb0e 0800 	add.w	r8, lr, r0
 8004390:	db0c      	blt.n	80043ac <__ieee754_sqrt+0xb8>
 8004392:	46e1      	mov	r9, ip
 8004394:	eba2 010c 	sub.w	r1, r2, ip
 8004398:	46cc      	mov	ip, r9
 800439a:	459e      	cmp	lr, r3
 800439c:	bf88      	it	hi
 800439e:	f101 31ff 	addhi.w	r1, r1, #4294967295	@ 0xffffffff
 80043a2:	0049      	lsls	r1, r1, #1
 80043a4:	eba3 030e 	sub.w	r3, r3, lr
 80043a8:	4404      	add	r4, r0
 80043aa:	e7e0      	b.n	800436e <__ieee754_sqrt+0x7a>
 80043ac:	f1b8 0f00 	cmp.w	r8, #0
 80043b0:	dbef      	blt.n	8004392 <__ieee754_sqrt+0x9e>
 80043b2:	f10c 0901 	add.w	r9, ip, #1
 80043b6:	e7ed      	b.n	8004394 <__ieee754_sqrt+0xa0>
 80043b8:	f021 4200 	bic.w	r2, r1, #2147483648	@ 0x80000000
 80043bc:	4302      	orrs	r2, r0
 80043be:	d044      	beq.n	800444a <__ieee754_sqrt+0x156>
 80043c0:	2900      	cmp	r1, #0
 80043c2:	d16b      	bne.n	800449c <__ieee754_sqrt+0x1a8>
 80043c4:	0ada      	lsrs	r2, r3, #11
 80043c6:	3c15      	subs	r4, #21
 80043c8:	055b      	lsls	r3, r3, #21
 80043ca:	2a00      	cmp	r2, #0
 80043cc:	d0fa      	beq.n	80043c4 <__ieee754_sqrt+0xd0>
 80043ce:	02d6      	lsls	r6, r2, #11
 80043d0:	4620      	mov	r0, r4
 80043d2:	d46c      	bmi.n	80044ae <__ieee754_sqrt+0x1ba>
 80043d4:	4614      	mov	r4, r2
 80043d6:	2200      	movs	r2, #0
 80043d8:	0064      	lsls	r4, r4, #1
 80043da:	02e5      	lsls	r5, r4, #11
 80043dc:	4611      	mov	r1, r2
 80043de:	f102 0201 	add.w	r2, r2, #1
 80043e2:	d5f9      	bpl.n	80043d8 <__ieee754_sqrt+0xe4>
 80043e4:	f1c2 0520 	rsb	r5, r2, #32
 80043e8:	fa23 f505 	lsr.w	r5, r3, r5
 80043ec:	432c      	orrs	r4, r5
 80043ee:	4093      	lsls	r3, r2
 80043f0:	1a40      	subs	r0, r0, r1
 80043f2:	e78d      	b.n	8004310 <__ieee754_sqrt+0x1c>
 80043f4:	459e      	cmp	lr, r3
 80043f6:	d902      	bls.n	80043fe <__ieee754_sqrt+0x10a>
 80043f8:	ea4f 014c 	mov.w	r1, ip, lsl #1
 80043fc:	e7b7      	b.n	800436e <__ieee754_sqrt+0x7a>
 80043fe:	f1be 0f00 	cmp.w	lr, #0
 8004402:	eb0e 0800 	add.w	r8, lr, r0
 8004406:	db22      	blt.n	800444e <__ieee754_sqrt+0x15a>
 8004408:	2100      	movs	r1, #0
 800440a:	e7cb      	b.n	80043a4 <__ieee754_sqrt+0xb0>
 800440c:	4319      	orrs	r1, r3
 800440e:	d012      	beq.n	8004436 <__ieee754_sqrt+0x142>
 8004410:	f8df a0b0 	ldr.w	sl, [pc, #176]	@ 80044c4 <__ieee754_sqrt+0x1d0>
 8004414:	f8df b0b0 	ldr.w	fp, [pc, #176]	@ 80044c8 <__ieee754_sqrt+0x1d4>
 8004418:	e9da 0100 	ldrd	r0, r1, [sl]
 800441c:	e9db 2300 	ldrd	r2, r3, [fp]
 8004420:	f7fb feda 	bl	80001d8 <__aeabi_dsub>
 8004424:	e9da 8900 	ldrd	r8, r9, [sl]
 8004428:	4602      	mov	r2, r0
 800442a:	460b      	mov	r3, r1
 800442c:	4640      	mov	r0, r8
 800442e:	4649      	mov	r1, r9
 8004430:	f7fc fb06 	bl	8000a40 <__aeabi_dcmple>
 8004434:	b9c8      	cbnz	r0, 800446a <__ieee754_sqrt+0x176>
 8004436:	0865      	lsrs	r5, r4, #1
 8004438:	1073      	asrs	r3, r6, #1
 800443a:	f103 537f 	add.w	r3, r3, #1069547520	@ 0x3fc00000
 800443e:	f503 1300 	add.w	r3, r3, #2097152	@ 0x200000
 8004442:	eb03 5107 	add.w	r1, r3, r7, lsl #20
 8004446:	ea45 70c6 	orr.w	r0, r5, r6, lsl #31
 800444a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800444e:	f1b8 0f00 	cmp.w	r8, #0
 8004452:	daae      	bge.n	80043b2 <__ieee754_sqrt+0xbe>
 8004454:	e7d8      	b.n	8004408 <__ieee754_sqrt+0x114>
 8004456:	4602      	mov	r2, r0
 8004458:	460b      	mov	r3, r1
 800445a:	f7fc f875 	bl	8000548 <__aeabi_dmul>
 800445e:	4632      	mov	r2, r6
 8004460:	463b      	mov	r3, r7
 8004462:	f7fb febb 	bl	80001dc <__adddf3>
 8004466:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800446a:	f1b4 3fff 	cmp.w	r4, #4294967295	@ 0xffffffff
 800446e:	e9da 0100 	ldrd	r0, r1, [sl]
 8004472:	e9db 2300 	ldrd	r2, r3, [fp]
 8004476:	d01e      	beq.n	80044b6 <__ieee754_sqrt+0x1c2>
 8004478:	e9da 8900 	ldrd	r8, r9, [sl]
 800447c:	f7fb feae 	bl	80001dc <__adddf3>
 8004480:	4602      	mov	r2, r0
 8004482:	460b      	mov	r3, r1
 8004484:	4640      	mov	r0, r8
 8004486:	4649      	mov	r1, r9
 8004488:	f7fc fad0 	bl	8000a2c <__aeabi_dcmplt>
 800448c:	b1a8      	cbz	r0, 80044ba <__ieee754_sqrt+0x1c6>
 800448e:	1ca3      	adds	r3, r4, #2
 8004490:	f104 0502 	add.w	r5, r4, #2
 8004494:	bf08      	it	eq
 8004496:	3601      	addeq	r6, #1
 8004498:	086d      	lsrs	r5, r5, #1
 800449a:	e7cd      	b.n	8004438 <__ieee754_sqrt+0x144>
 800449c:	4602      	mov	r2, r0
 800449e:	460b      	mov	r3, r1
 80044a0:	f7fb fe9a 	bl	80001d8 <__aeabi_dsub>
 80044a4:	4602      	mov	r2, r0
 80044a6:	460b      	mov	r3, r1
 80044a8:	f7fc f978 	bl	800079c <__aeabi_ddiv>
 80044ac:	e7cd      	b.n	800444a <__ieee754_sqrt+0x156>
 80044ae:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80044b2:	4614      	mov	r4, r2
 80044b4:	e79c      	b.n	80043f0 <__ieee754_sqrt+0xfc>
 80044b6:	3601      	adds	r6, #1
 80044b8:	e7be      	b.n	8004438 <__ieee754_sqrt+0x144>
 80044ba:	3401      	adds	r4, #1
 80044bc:	e7bb      	b.n	8004436 <__ieee754_sqrt+0x142>
 80044be:	bf00      	nop
 80044c0:	7ff00000 	.word	0x7ff00000
 80044c4:	08004540 	.word	0x08004540
 80044c8:	08004538 	.word	0x08004538

080044cc <_init>:
 80044cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044ce:	bf00      	nop
 80044d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80044d2:	bc08      	pop	{r3}
 80044d4:	469e      	mov	lr, r3
 80044d6:	4770      	bx	lr

080044d8 <_fini>:
 80044d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044da:	bf00      	nop
 80044dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80044de:	bc08      	pop	{r3}
 80044e0:	469e      	mov	lr, r3
 80044e2:	4770      	bx	lr
